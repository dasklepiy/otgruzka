////////////////////////////////////////////////////////////////////////////
////////////// МОДУЛЬ УПРАВЛЕНИЯ ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ (на клиенте) ////////
////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////
////////////// ОБЩИЕ МЕТОДЫ УПРАВЛЕНИЯ ОБОРУДОВАНИЕМ //////////////

/////////////////// ПОДКЛЮЧЕНИЕ ОБОРУДОВАНИЯ ///////////////////////////

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;

	Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);

КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства,
                                               ОписаниеОшибки = "") Экспорт

	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
                               ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")

	КонечныйРезультат = Истина;
	Результат         = Истина;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");

		Возврат Ложь;
	КонецЕсли;

	СписокОборудования =
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО,
	                                                              ИдентификаторУстройства);

	Если СписокОборудования.Количество() > 0 Тогда
		Для каждого Устройство Из СписокОборудования Цикл
			//Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
			                                                        Устройство.Ссылка);

			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее

				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					//Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					               + НСтр("ru = '%Наименование%: Не удалось загрузить драйвер устройства.
					                 |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;

					Продолжить;
				КонецЕсли;

				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);

				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("СетевойПорт"            , Устройство.СетевойПорт);
				НовоеПодключение.Вставить("Параметры", 
				                          МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(
				                           Устройство.Ссылка));
				НовоеПодключение.Вставить("КоличествоПодключенных", 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"  , Новый Структура());

				Результат = ПолучитьОбработчикаДрайвера(НовоеПодключение.ОбработчикДрайвера).ПодключитьУстройство(
					ОбъектДрайвера,
					НовоеПодключение.Параметры,
					НовоеПодключение.ПараметрыПодключения,
					ВыходныеПараметры);

				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;

					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
					               + НСтр("ru = 'Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				//Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru = 'Выбранное устройство не может использоваться для подключения.
		|Укажите другое устройство.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции
////

////////////////// ОТКЛЮЧЕНИЕ ОБОРУДОВАНИЯ //////////////////////////////

// Отключает все подключенное оборудование, соответствующее указанному типу ПО
//
Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт

	КонечныйРезультат = Истина;
	Результат         = Истина;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;

		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = Ложь;

			Продолжить;
		КонецЕсли;

		Результат = ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
			ОбъектДрайвера,
			ПодключенноеУстройство.Параметры,
			ПодключенноеУстройство.ПараметрыПодключения,
			ВыходныеПараметры);

		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		КонецЕсли;

		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;

	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();

	Возврат КонечныйРезультат;

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")

	КонечныйРезультат = Истина;
	Результат         = Истина;

	ВходныеПараметры  = Неопределено;
	ВыходныеПараметры = Неопределено;

	ВыходноеОписаниеОшибки = "";

	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];

			ИмяТипаПО = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено
			   И (ТипыПО = Неопределено
				 Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено
				 Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда

				Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					ПодключенноеУстройство.КоличествоПодключенных = 0;

					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
					Если ОбъектДрайвера = Неопределено Тогда
						//Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
						                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;

						Продолжить;
					КонецЕсли;

					Результат = ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера).ОтключитьУстройство(
						ОбъектДрайвера,
						ПодключенноеУстройство.Параметры,
						ПодключенноеУстройство.ПараметрыПодключения,
						ВыходныеПараметры);

					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
						               + НСтр("ru = 'При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					КонецЕсли;

					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;

			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции
////


///////////////////////////////////////////////////
////// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ МЕТОДЫ //////////

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
		                                        |ПараметрыПодключенияПО,
		                                        |ПоследнийСлипЧек,
		                                        |ТаблицаУстройствДМ,
		                                        |ПараметрыДрайверМенеджера",
		                                         Новый Соответствие(),
		                                         Новый Массив(),
		                                         "",
		                                         Неопределено,
		                                         Новый Структура(),
		                                         Новый Структура());
	КонецЕсли;

КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
КонецФункции

// Функция осуществляет выбор устройства из списка доступных
// по типу подключаемого оборудования
// Если устройств более одного, то пользователю отображается
// диалог со списком устройств с предложением выбрать "одно из..."
Функция ВыбратьУстройство(ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен) Экспорт

	//Выбор устройства
	Идентификатор = Неопределено;

	Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		Возврат Идентификатор;
	КонецЕсли;

	СписокДоступныхУстройств = 
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);

	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) ТОгда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;

		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
		Иначе
			Идентификатор = СписокУстройств.ВыбратьЭлемент(ТекстЗаголовкаВыбора);
			Если Идентификатор <> Неопределено Тогда
				Идентификатор = Идентификатор.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Идентификатор;

КонецФункции

// Функция предоставляет диалог выбора рабочего места
//
Функция ВыбратьРабочееМесто(ОткрыватьФормуВыбораПриПервомОбращении = Ложь, ИдентификаторКлиента = "") Экспорт

	Результат    = Ложь;
	РабочееМесто = "";

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОткрыватьПриПервомОбращении", ОткрыватьФормуВыбораПриПервомОбращении);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	ФормаВыбораРМ = ПолучитьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы);
	Ответ = ФормаВыбораРМ.ОткрытьМодально();

	Если Ответ = КодВозвратаДиалога.ОК Тогда
		РМ = ФормаВыбораРМ.Параметры.РабочееМесто;

		МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РМ);

		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);

		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			Параметры.Вставить("СетевойПорт");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
			Параметры.СетевойПорт          = МенеджерОборудованияКлиентСервер.ПолучитьСетевойПортПоУмолчанию();
			РабочееМесто = МенеджерОборудованияСервер.СоздатьРабочееМестоКлиента(Параметры);
			
		ИначеЕсли МассивРабочихМест.Количество() = 1 Тогда
			
			РабочееМесто = МассивРабочихМест[0];
			
		ИначеЕсли МассивРабочихМест.Количество() > 1 Тогда
			Результат = МенеджерОборудованияКлиент.ВыбратьРабочееМесто(Истина, ВРег(СистемнаяИнформация.ИдентификаторКлиента));
			
			РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
			
		КонецЕсли;
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РабочееМесто);
		
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);
	
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

// Установка из макета драйвера устройства.
//
Процедура УстановитьДрайвер(Идентификатор) Экспорт

	ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);

	ДрайверУстройства = ДанныеОборудования.ОбработчикДрайвера;
	
	Попытка
		Если Найти(ДрайверУстройства, "АТОЛ") > 0 Тогда
			#Если ВебКлиент Тогда
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверАТОЛОбщий", "setup.exe");
			#КонецЕсли
		КонецЕсли;
	Исключение
	КонецПопытки;

	Попытка
		Если Строка(ДрайверУстройства) = "1С: Сканеры штрихкода"
		 Или Строка(ДрайверУстройства) = "1С: Считыватели магнитных карт" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.Драйвер1ССканерШтрихкода");

		ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Сканеры штрихкода"
		      Или Строка(ДрайверУстройства) = "АТОЛ: Считыватели магнитных карт" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛСканерШтрихкода");

		ИначеЕсли Строка(ДрайверУстройства) = "1С: Фискальный регистратор (эмулятор)" Тогда

		ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Фискальные регистраторы" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛФискальныеРегистраторы");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "Версия-Т: КАСБИ ФР-01К" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверВерсияТКасбиФР01К");
			#Иначе
				ОбъектДрайвера = ПолучитьОбъектДрайвера(ДрайверУстройства);
				ОбъектДрайвера = Неопределено;

				УстановитьДрайверИзДистрибутива("ДрайверВерсияТКасбиФР01К",
				                                "ksb01frk.exe");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "ККС: Фискальные регистраторы ""Спарк""" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверККСФРСпарк");

		ИначеЕсли Строка(ДрайверУстройства) = "Штрих-М: Фискальные регистраторы" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверШтрихМФискальныеРегистраторы");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМФискальныеРегистраторы",
				                                "DrvFR_4.9_152.exe");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Терминалы сбора данных" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАтолТСД");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "Сканкод: Терминалы сбора данных" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверСканкодТСДCipherLab");

		ИначеЕсли Строка(ДрайверУстройства) = "Штрих-М: Терминалы сбора данных" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверШтрихМТСД");
			#Иначе
				УстановитьДрайверИзДистрибутива("ДрайверШтрихМТСД",
				                                "setup.exe");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Дисплеи покупателя" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛДисплеиПокупателя");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Электронные весы" Тогда
			#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛЭлектронныеВесы");
			#КонецЕсли

		ИначеЕсли Строка(ДрайверУстройства) = "СБ РФ: Эквайринговые терминалы" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверСБРФЭквайринговыеТерминалы");

		ИначеЕсли Строка(ДрайверУстройства) = "ИНПАС: Эквайринговые терминалы" Тогда
			УстановитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверИНПАСЭквайринговыеТерминалы");

		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

#Если Не ВебКлиент Тогда
Процедура УстановитьДрайверИзДистрибутива(ИмяМакета, ИмяФайла) Экспорт

	ВременныйКаталог = КаталогВременныхФайлов();

	// Получение макета с сервера
	СсылкаНаФайл = МенеджерОборудованияСервер.ПолучитьМакетССервера(ИмяМакета);

	// Распаковка архива дистрибутива во временный каталог
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", Ложь);
	ФайлМакета = Новый ЧтениеZipФайла();
	ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");
	ВременныйКаталог = ВременныйКаталог + "Model\";

	Для Каждого ЭлементМакета Из ФайлМакета.Элементы Цикл
		Если ЭлементМакета.Имя = ИмяФайла + ".zip" Тогда
			СоздатьКаталог(ВременныйКаталог);
			ФайлМакета.Извлечь(ЭлементМакета, ВременныйКаталог);

			// Распаковка дистрибутива
			ФайлАрхива = Новый ЧтениеZipФайла();
			ФайлАрхива.Открыть(ВременныйКаталог + ЭлементМакета.Имя);
			ФайлАрхива.ИзвлечьВсе(ВременныйКаталог);

			// Запуск инсталлятора
			ЗапуститьПриложение(ВременныйКаталог + ИмяФайла, ВременныйКаталог, Истина);

			// Удаление всех временных файлов после работы
			Попытка
				УдалитьФайлы(ВременныйКаталог);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;

	// Удаление всех временных файлов после работы
	ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "Model\", "");
	Попытка
		УдалитьФайлы(ВременныйКаталог + "Model.zip");
	Исключение
	КонецПопытки;

КонецПроцедуры
#КонецЕсли

// Возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры) Экспорт

	Возврат МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры);

КонецФункции

// Перенаправляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт

	Результат = Ложь;

	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);

	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);

		Иначе
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			ОбработчикДрайвера   = ПодключенноеУстройство.ОбработчикДрайвера;

			// Вызов метода выполнения команды у обработчика
			Результат = ПолучитьОбработчикаДрайвера(ОбработчикДрайвера).ВыполнитьКоманду(Команда,
			                                                                             ВходныеПараметры,
			                                                                             ВыходныеПараметры,
			                                                                             ОбъектДрайвера,
			                                                                             Параметры,
			                                                                             ПараметрыПодключения);
		КонецЕсли;
	Иначе
		//Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru = 'Устройство не подключено.
			|Перед выполнением операции устройство должно быть подключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры,
                                       Идентификатор, Параметры) Экспорт

	Результат = Ложь;

	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);

	Если ПодключенноеУстройство = Неопределено Тогда
		ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);

		времПараметрыПодключения = Новый Структура();

		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);
		Если ОбъектДрайвера = Неопределено Тогда
			//Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = НСтр("ru = 'Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));

		Иначе
			Результат = ПолучитьОбработчикаДрайвера(ДанныеОборудования.ОбработчикДрайвера).ВыполнитьКоманду(
			    Команда,
			    ВходныеПараметры,
			    ВыходныеПараметры,
			    ОбъектДрайвера,
			    Параметры,
			    времПараметрыПодключения);

			Если Не Результат Тогда
				ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		//Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru = 'Устройство подключено.
			|Перед выполнением операции устройство должно быть отключено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выводить модальную диалоговую форму настройки устройства
//Входные параметры:
//   Устройство   - СправочникСсылка.ПодключаемоеОборудование
Функция ВыполнитьНастройкуОборудования(Идентификатор, НастройкиИзменены = Ложь,СообщениеОбОшибке = "") Экспорт

	Результат = Истина;

	ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ОбработчикДрайвера = ДанныеУстройства.ОбработчикДрайвера;
	ИдентификаторУстройства = ДанныеУстройства.ИдентификаторУстройства;

	//Получить параметры из базы
	ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);
	ПараметрыОбработки.Вставить("Идентификатор", Идентификатор);

	// Получение формы настройки параметров
	ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ОбработчикДрайвера));
	ФормаНастройки = ПолучитьФорму("Справочник.ПодключаемоеОборудование.Форма." + ФормаНастройки, ПараметрыОбработки);

	Ответ = ФормаНастройки.ОткрытьМодально();
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ПараметрыФормы = ФормаНастройки.Параметры;
		Для каждого СтрокаСпискаЗначений Из ПараметрыФормы.ПараметрыНастройки Цикл
			//Проверка модифицированности предыдущего значения
			ПредыдущееЗначение = Неопределено;

			ПараметрыОбработки.Свойство(СтрокаСпискаЗначений.Представление, ПредыдущееЗначение);
			Если ПредыдущееЗначение <> Неопределено
			   И ПредыдущееЗначение <> СтрокаСпискаЗначений.Значение Тогда
				НастройкиИзменены = Истина; // Есть изменение настроек устройства
			КонецЕсли;

			ПараметрыОбработки.Вставить(СтрокаСпискаЗначений.Представление, СтрокаСпискаЗначений.Значение);
		КонецЦикла;

		Результат = МенеджерОборудованияСервер.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);
		Если Не Результат Тогда
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

//////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ ОБРАБОТКИ СОБЫТИЙ ОТ УСТРОЙСТВ

// Производит обработку данных события, полученных от клиента
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;
	ВходныеПараметры  = Новый Массив();
	ВыходныеПараметры = Неопределено;

	// Поиск обработчика события
	Для каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл

		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (Подключение.ИсточникСобытия = ""
		   И Подключение.ИменаСобытий <> Неопределено) Тогда

			// Ищем среди подключенного оборудования устройство с полученным событием
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение.ОбработчикДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					//Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
					                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);

					Продолжить;
				КонецЕсли;

				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);

				// Обрабатываем сообщение
				Результат = ВыполнитьКоманду(Подключение.Ссылка,
				                      "ОбработатьСобытие",
				                      ВходныеПараметры,
				                      ВыходныеПараметры);
				Если Результат Тогда
					// Оповещаем 
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;

				// Оповещаем драйвер о завершении обработки события
				ВходныеПараметры.Очистить();
				ВходныеПараметры.Добавить(Результат);
				ВыполнитьКоманду(Подключение.Ссылка,
				                 "ЗавершитьОбработкуСобытия",
				                 ВходныеПараметры,
				                 ВыходныеПараметры);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции


////////////////////////////////////////
////// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ //////////

// Получение объекта драйвера.
//
Функция ПолучитьОбъектДрайвера(ДрайверУстройства)

	ОбъектДрайвера = Неопределено;

	Для каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДрайверУстройства Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			Если Строка(ДрайверУстройства) = "1С: Сканеры штрихкода"
			 Или Строка(ДрайверУстройства) = "1С: Считыватели магнитных карт" Тогда
				ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.Драйвер1ССканерШтрихкода", "Сканер");
				ОбъектДрайвера = Новый ("AddIn.Сканер.Scanner");

			ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Сканеры штрихкода"
			 Или Строка(ДрайверУстройства) = "АТОЛ: Считыватели магнитных карт" Тогда
				ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛСканерШтрихкода", "АТОЛСканер");
				ОбъектДрайвера = Новый ("AddIn.АТОЛСканер.Scaner45");

			ИначеЕсли Строка(ДрайверУстройства) = "1С: Фискальный регистратор (эмулятор)" Тогда
				ОбъектДрайвера = "Не требуется";

			ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Фискальные регистраторы" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛФискальныеРегистраторы", "АТОЛФР");
					ОбъектДрайвера = Новый ("AddIn.АТОЛФР.ATOL_KKM_1C");
				#Иначе
					ProgID = "AddIn.ATOL_KKM_1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "Версия-Т: КАСБИ ФР-01К" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверВерсияТКасбиФР01К", "ВЕРСИЯТКАСБИФР01К");
					ОбъектДрайвера = Новый ("AddIn.ВЕРСИЯТКАСБИФР01К.KSBFR1K1C");
				#Иначе
					ProgID = "AddIn.KSBFR1K1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "ККС: Фискальные регистраторы ""Спарк""" Тогда
				ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверККСФРСпарк", "ККСФРСПАРК");
				ОбъектДрайвера = Новый ("AddIn.ККСФРСПАРК.SparkTF");

			ИначеЕсли Строка(ДрайверУстройства) = "Штрих-М: Фискальные регистраторы" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверШтрихМФискальныеРегистраторы", "ШтрихМФР");
					ОбъектДрайвера = Новый ("AddIn.ШтрихМФР.DrvFR1C");
				#Иначе
					ProgID = "AddIn.DrvFR1C";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Терминалы сбора данных" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАтолТСД", "АтолТСД");
					ОбъектДрайвера = Новый ("AddIn.АтолТСД.PDX45");
				#Иначе
					ProgID = "AddIn.PDX45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "Сканкод: Терминалы сбора данных" Тогда
				ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверСканкодТСДCipherLab", "СканкодТСД");
				ОбъектДрайвера = Новый ("AddIn.СканкодТСД.CipherLab");

			ИначеЕсли Строка(ДрайверУстройства) = "Штрих-М: Терминалы сбора данных" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверШтрихМТСД", "ШтрихМТСД");
					ОбъектДрайвера = Новый ("AddIn.ШтрихМТСД.Terminals");
				#Иначе
					ProgID = "AddIn.Terminals";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Дисплеи покупателя" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛДисплеиПокупателя", "АТОЛДП");
					ОбъектДрайвера = Новый ("AddIn.АТОЛДП.Line45");
				#Иначе
					ProgID = "AddIn.Line45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "АТОЛ: Электронные весы" Тогда
				#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверАТОЛЭлектронныеВесы", "АТОЛЭВ");
					ОбъектДрайвера = Новый ("AddIn.АТОЛЭВ.Scale45");
				#Иначе
					ProgID = "AddIn.Scale45";
					ПодключитьВнешнююКомпоненту(ProgID);
					ОбъектДрайвера = Новый (ProgID);
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "СБ РФ: Эквайринговые терминалы" Тогда
				#Если ВебКлиент Тогда
					// На текущий момент не может использоваться в Веб-клиенте
					//ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверСБРФЭквайринговыеТерминалы", "СБРФЭТ");
					//ОбъектДрайвера = Новый ("AddIn.СБРФЭТ.SBRFCOMExtension");
				#Иначе
					ПодключитьВнешнююКомпоненту("AddIn.SBRFCOMObject");
					ОбъектДрайвера = Новый("AddIn.SBRFCOMExtension");
				#КонецЕсли

			ИначеЕсли Строка(ДрайверУстройства) = "ИНПАС: Эквайринговые терминалы" Тогда
				ПодключитьВнешнююКомпоненту("Справочник.ПодключаемоеОборудование.Макет.ДрайверИНПАСЭквайринговыеТерминалы", "ИНПАСЭТ");
				ОбъектДрайвера = Новый("AddIn.ИНПАСЭТ.AddInPulsarDriver1C");

			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если ОбъектДрайвера <> Неопределено Тогда
		глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДрайверУстройства, ОбъектДрайвера);
		ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДрайверУстройства];
	КонецЕсли;

	Возврат ОбъектДрайвера;

КонецФункции

// Функция возвращает объект обработчика драйвера по его наименованию
//
Функция ПолучитьОбработчикаДрайвера(ОбработчикДрайвера)

	Результат = Неопределено;

	// Вызов метода выполнения команды у обработчика
	Если ОбработчикДрайвера <> Неопределено Тогда
		Если Строка(ОбработчикДрайвера) = "1С: Сканеры штрихкода" Тогда
			Результат = ПодключаемоеОборудование1ССканерыШтрихкода;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Сканеры штрихкода" Тогда
			Результат = ПодключаемоеОборудованиеАтолСканерыШтрихкода;

		ИначеЕсли Строка(ОбработчикДрайвера) = "1С: Фискальный регистратор (эмулятор)" Тогда
			Результат = ПодключаемоеОборудование1СФискальныйРегистраторЭмулятор;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Фискальные регистраторы" Тогда
			Результат = ПодключаемоеОборудованиеАтолФискальныеРегистраторы;

		ИначеЕсли Строка(ОбработчикДрайвера) = "Версия-Т: КАСБИ ФР-01К" Тогда
			Результат = ПодключаемоеОборудованиеВерсияТКасбиФР01К;

		ИначеЕсли Строка(ОбработчикДрайвера) = "ККС: Фискальные регистраторы ""Спарк""" Тогда
			Результат = ПодключаемоеОборудованиеККСФискальныеРегистраторыСпарк;

		ИначеЕсли Строка(ОбработчикДрайвера) = "Штрих-М: Фискальные регистраторы" Тогда
			Результат = ПодключаемоеОборудованиеШтрихМФискальныеРегистраторы;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Терминалы сбора данных" Тогда
			Результат = ПодключаемоеОборудованиеАтолТерминалыСбораДанных;

		ИначеЕсли Строка(ОбработчикДрайвера) = "Сканкод: Терминалы сбора данных" Тогда
			Результат = ПодключаемоеОборудованиеСканкодТерминалыСбораДанных;

		ИначеЕсли Строка(ОбработчикДрайвера) = "Штрих-М: Терминалы сбора данных" Тогда
			Результат = ПодключаемоеОборудованиеШтрихМТерминалыСбораДанных;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Дисплеи покупателя" Тогда
			Результат = ПодключаемоеОборудованиеАтолДисплеиПокупателя;

		ИначеЕсли Строка(ОбработчикДрайвера) = "1С: Считыватели магнитных карт" Тогда
			Результат = ПодключаемоеОборудование1ССчитывателиМагнитныхКарт;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Считыватели магнитных карт" Тогда
			Результат = ПодключаемоеОборудованиеАтолСчитывателиМагнитныхКарт;

		ИначеЕсли Строка(ОбработчикДрайвера) = "АТОЛ: Электронные весы" Тогда
			Результат = ПодключаемоеОборудованиеАтолЭлектронныеВесы;

		ИначеЕсли Строка(ОбработчикДрайвера) = "СБ РФ: Эквайринговые терминалы" Тогда
			Результат = ПодключаемоеОборудованиеСБРФЭквайринговыеТерминалы;

		ИначеЕсли Строка(ОбработчикДрайвера) = "ИНПАС: Эквайринговые терминалы" Тогда
			Результат = ПодключаемоеОборудованиеИНПАСЭквайринговыеТерминалы;

		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

//Поиск по идентификатору подключенного ранее устройства
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор)

	ПодключенноеУстройство = Неопределено;

	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ПодключенноеУстройство;

КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////// МЕТОДЫ ОБРАТНОГО ВЫЗОВА (Передача событий и данных из драйверов оборудования /////////////////////

// Функция ОбработкаСобытияПолученияДанных предназначена для получения события с данными из устройства
//(данный метод будет вызван например, при сканировании штрихкода сканером)
//Внимание! Так как данная функция предназначена для вызова из внешнего объекта, то в имени данной функции
//рекомендуется использовать только символы латинского алфафита во избежании проблем взаимодействия при
//функционировании на системах, где не установлена поддержка русского языка (нет русской локализации)
//
//Входные параметры:
//   Source  - строка содержащая идентификатор источника (оборудования, либо асихронной команды)
//   Event   - строка содержащая вид события (регламентируется на уровне типа)
//   Data    - строка с кратким представлением данных события. Например, считанный штрихкод
//             или данные магнитной карты (дорожка и формат могут быть заданы в настройках)
//   ExtData - необязательный ComSafeArray (например, полные "сырые" данные со всех дорожек)
//Возвращает:
//   Булево значение: Истина - сигнализирует обработчику устройства что его сообщение обрабтано
//                    Ложь   - сигнализирует обработчику устройства что его сообщение не было обработано
Функция DataEventHandler(Источник, Событие, Данные, ДополнительныеДанные = Неопределено) Экспорт

	Результат = Истина; // Необходимо вернуть в устройство значение Истина, чтобы он очистил эти данные в своем буфере

	// Конвертируем данные во внутренний формат
	ДопДанные = ПерепаковатьSafeArrayВМассив(ДополнительныеДанные);
	ДанныеСобытия = Новый Массив();
	ДанныеСобытия.Добавить(Данные);
	ДанныеСобытия.Добавить(ДопДанные);
	
	// Оповещаем все формы 
	Оповестить(Событие, ДанныеСобытия, "ПодключаемоеОборудование");

	// Возвращаем обработчику устройства результат обработки его события
	Возврат Результат; // Истина - если событие было обработано

КонецФункции

// Функция ОбработкаСобытияСостоянияКоманды предназначена для передачи информации из устройства
//в клиентское приложение о прогрессе выполнения текущей команды,
//а также для продления установленного таймаута ее выполнения
//(вызывается периодически с интервалом около 1/10 от общего времени исполнения команды)
//Внимание! Так как данная функция предназначена для вызова из внешнего объекта, то в имени данной функции
//рекомендуется использовать только символы латинского алфафита во избежании проблем взаимодействия при
//функционировании на системах, где не установлена поддержка русского языка (нет русской локализации)
//
//Входные параметры:
//   Source      - идентификатор источника (оборудование либо асинхронной команды)
//   Percent     - число, значение в % прогресса исполнения текущей команды
//   TextStatus  - строка с текстовым описанием состояния команды (не обязательный параметр)
//
//Возвращает:
//   Булево значение: Истина - сигнализирует обработчику что он может продолжать исполнение команды (продлевается таймаут)
//                    Ложь   - сигнализирует обработчику что команда отменена, результат ее исполнения не нужен, рекомендуется прервать (при возможности) исполнение текущей команды
//
Функция TaskStateHandler(Источник, Прогресс, ОписаниеСостояния = "") Экспорт

	Результат = Истина; // Необходимо возвращать Истина для продолжения исполнения текущей команды устройства
	                    //При возврате Ложь устройство попытается аварийно завершить исполнение текущей команды

	// ВНИМАНИЕ! Разработчику клиентского приложения не рекомендуется выполнять 
	//длительные операции при исполнении данного метода т.к. вызов происходит в
	//синхронном режиме и обработчик устройства приостанавливает выполнение команды
	//на это время.
	
	Возврат Результат; // Ложь - если исполнение команды необходимо прервать

КонецФункции // TaskState

// Функция ОбработкаСобытияОшибкиВУстройстве предназначен для передачи информации о возникновении 
//аварийного состоянияв оборудовании из устройства в клиентское приложениекое, если последнее 
// установило обработчик для событий данного типа (эту самую процедуру)
//Внимание! Так как данная функция предназначена для вызова из внешнего объекта, то в имени данной функции
//рекомендуется использовать только символы латинского алфафита во избежании проблем взаимодействия при
//функционировании на системах, где не установлена поддержка русского языка (нет русской локализации)
//
//Входные параметры:
//   Source      - строка содержащая идентификатор оборудования
//   ErrorType   - строка содержащая вид ошибки (если оборудование может генерировать разные виды событий, также регламентируется на уровне типа)
//   Description - строка с кратким описанием ошибочного состояния
//   ExtData     - необязательный ComSafeArray с дополнительными данными 
//Возвращает:
//   Булево значение: Истина - сигнализирует обработчику устройства что его сообщение обрабтано
//                    Ложь   - сигнализирует обработчику устройства что его сообщение не было обработано
Функция ErrorEventHandler(Источник, ТипОшибки, ОписаниеОшибки, ДополнительныеДанные = Неопределено) Экспорт

	Результат = Истина;  // Мы должны вернуть обработчику Истина в случае если его событие было обработано
	


	// Возвращаем обработчику устройства результат обработки его события
	Возврат Результат; // Истина - если событие было обработано

КонецФункции // ErrorEvent

// Функция ОбработкаВызоваИнтерактивногоДиалога предназначена для передачи интерактивного запроса 
//от оборудования к пользователю
//Внимание! Так как данная функция предназначена для вызова из внешнего объекта, то в имени данной функции
//рекомендуется использовать только символы латинского алфафита во избежании проблем взаимодействия при
//функционировании на системах, где не установлена поддержка русского языка (нет русской локализации)
//Разработчикам драйверов не рекомендуется использовать данный метод кроме как для исключительных
//ситуаций в которых совершенно необходимо получить интерактивную реакцию пользователя (Вставлен спец-бланк?)
//
//Входные параметры:
//   Source   - идентификатор устройства (GUID в виде строки)
//   Message  - строка с сообщением (вопросом) пользователю
//   Type     - число, тип диалога (0-предупреждение, 1-информация, 2-вопрос)
//   Buttons  - строка с перечнем кнопок, доступных пользователю в виде "Да+Нет" (должны соответствовать возможностям диалогов 1С)
//   TimeOut  - число > 0, предельное время ожидание реакции пользователя в модальном диалоге
//Возвращает:
//   строку с именем нажатой пользователем кнопки или пустую строку если истек таймаут
Функция MessageDlgHandler(Источник, Сообщение, Тип = 0, Кнопки = "OK", Таймаут = 60) Экспорт

	Результат = ""; // Если не было реакции пользователя (произошел таймаут), то возвращается пустая строка

	// ВНИМАНИЕ! В данном методе необходимо обеспечить МОДАЛЬНЫЙ ИНТЕРАКТИВНЫЙ ДИАЛОГ
	//с текущим пользователем клиентского приложения.
	//Крайне рекомендуется устанавливать ограничение по времени на вывод диалога (таймаут)
	//во избежание длительной блокировки системы управления подключаемым оборудованием

	// !!! Отладочное
	//Предупреждение(Сообщение, Таймаут , "MessageDlg." + Источник);
	
	// Возвращаем обработчику устройства результат обработки его события
	Возврат Результат; // Имя нажатой кнопки, либо пустая строка если был Timeout

КонецФункции // MessageDlg


////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////// СЕКЦИЯ ПОДГОТОВКИ ДАННЫХ МЕНЕДЖЕРА ПОДКЛЮЧАЕМОГО ОБОРУДОВАНИЯ ////////////////////////////

// Функция используется для создания структуры в которую упаковываются входные или выходные параметры
//Входные параметры:
//   ЭлементовИзмерения0 - число, количество строк двумерного массива или элементов одномерного
//   ЭлементовИзмерения  - число, необязательный, по умолчанию = 0 при этом функция создает одномерный массив
//                         при положительном значении массив будет двумерным, параметр это число колонок в нем
//Возвращает:значение типа ComSafeArray
Функция СоздатьПараметры(ЭлементовИзмерения0, ЭлементовИзмерения1 = 0) Экспорт

	Если ЭлементовИзмерения1 > 0 Тогда
		Результат = Новый COMSafeArray("VT_VARIANT", ЭлементовИзмерения0, ЭлементовИзмерения1);
	Иначе
		Результат = Новый COMSafeArray("VT_VARIANT", ЭлементовИзмерения0);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция предназначена для перепаковки массивов 1С в массивы SafeArray
//включая вложенные массивы
Функция ПерепаковатьМассивВSafeArray(МассивПараметров) Экспорт

	Если МассивПараметров = Неопределено Тогда
		SafeArrayПараметров = Неопределено;
	ИначеЕсли ТипЗнч(МассивПараметров) <> Тип("Массив") Тогда
		SafeArrayПараметров = МассивПараметров;
	Иначе
		КПараметров = МассивПараметров.Количество();
		КЗначений   = 0;
		// Создаем новый SafeArray
		Если КПараметров > 0 И ТипЗнч(МассивПараметров[0]) = Тип("СписокЗначений") Тогда
			КЗначений = МассивПараметров[0].Количество();
			SafeArrayПараметров = СоздатьПараметры(КПараметров, КЗначений);
		Иначе
			SafeArrayПараметров = СоздатьПараметры(КПараметров);
		КонецЕсли;

		Для Индекс = 0 По КПараметров - 1 Цикл
			Параметр = МассивПараметров[Индекс];
			// Если параметр представляет собой тоже массив, то перепаковываем его
			Если КЗначений = 0 Тогда
				Если ТипЗнч(Параметр) = Тип("Массив") Тогда
					Параметр = ПерепаковатьМассивВSafeArray(Параметр);
				КонецЕсли;
				SafeArrayПараметров.SetValue(Индекс, Параметр);
			Иначе
				Если ТипЗнч(Параметр) = Тип("Массив") Тогда
					Параметр = ПерепаковатьМассивВSafeArray(Параметр);

					SafeArrayПараметров.SetValue(Индекс, 0, Параметр);

				ИначеЕсли ТипЗнч(Параметр) = Тип("СписокЗначений") Тогда
					Для ИндексЗначения = 0 По КЗначений - 1 Цикл
						Значение = Параметр[ИндексЗначения];
						SafeArrayПараметров.SetValue(Индекс, ИндексЗначения, Значение.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат SafeArrayПараметров;

КонецФункции

// Функция предназначена для перепаковки массивов 1С в массивы SafeArray
//включая вложенные массивы
Функция ПерепаковатьSafeArrayВМассив(SafeArrayПараметров) Экспорт

	МассивПараметров = Новый Массив();
	
	Если SafeArrayПараметров = Неопределено Тогда
		// Нечего тут перепаковывать
	ИначеЕсли ТипЗнч(SafeArrayПараметров) <> Тип("COMSafeArray") Тогда
		МассивПараметров = SafeArrayПараметров;
	Иначе
		КПараметров = SafeArrayПараметров.GetLength();
		КИзмерений  = SafeArrayПараметров.GetDimensions();

		Для Индекс = 0 По КПараметров - 1 Цикл
			Если КИзмерений = 2 Тогда
				Для Измерение = 0 По 1 Цикл
					Параметр = SafeArrayПараметров.GetValue(Индекс, Измерение);
					// Если параметр представляет собой тоже массив, то перепаковываем его
					Если ТипЗнч(Параметр) = Тип("COMSafeArray") Тогда
						Параметр = ПерепаковатьSafeArrayВМассив(Параметр);
					КонецЕсли;
					МассивПараметров.Добавить(Параметр);
				КонецЦикла;

			ИначеЕсли КИзмерений = 1 Тогда
				Параметр = SafeArrayПараметров.GetValue(Индекс);
				// Если параметр представляет собой тоже массив, то перепаковываем его
				Если ТипЗнч(Параметр) = Тип("COMSafeArray") Тогда
					Параметр = ПерепаковатьSafeArrayВМассив(Параметр);
				КонецЕсли;
				МассивПараметров.Добавить(Параметр);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат МассивПараметров;

КонецФункции
