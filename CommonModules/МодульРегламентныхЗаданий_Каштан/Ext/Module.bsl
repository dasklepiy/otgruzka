
Процедура ОбменСДелфи() Экспорт
	Если не Константы.ВключитьОбмен.Получить() тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	   
	objRecordset = ПолучитьОбъектПодключения();
	ПризнакЗахвата = ПолучитьПризнакЗахвата(objRecordset);
	Если ПризнакЗахвата = 0 тогда
		Захват(objRecordset,ПризнакЗахвата);
		ОбменСправочниками(objRecordset);
		ОбменДокументами(objRecordset);
		ЗафиксироватьТранзакцию();
		ОтчисткаТаблицСправочников(objRecordset);
		ОтчисткаТаблицДокументов(objRecordset);
		ОтменаЗахвата(objRecordset);
	Иначе
		//ОтменаЗахвата(objRecordset);
		ОтменитьТранзакцию();
		ВызватьИсключение "Выполняется блокирующее фоновое задание";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменСДелфиСправочники() Экспорт
	Если не Константы.ВключитьОбмен.Получить() тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	objRecordset = ПолучитьОбъектПодключения();
	ПризнакЗахвата = ПолучитьПризнакЗахвата(objRecordset);
	Если ПризнакЗахвата = 0 тогда
		Захват(objRecordset,ПризнакЗахвата);
		ОбменСправочниками(objRecordset);
		ЗафиксироватьТранзакцию();
		ОтчисткаТаблицСправочников(objRecordset);
		ОтменаЗахвата(objRecordset);
	Иначе
		//ОтменаЗахвата(objRecordset);
		ОтменитьТранзакцию();
		ВызватьИсключение "Выполняется блокирующее фоновое задание";
	КонецЕсли;
КонецПроцедуры

Процедура ОбменСДелфиВыгрузкаДанных() Экспорт
	Если не Константы.ВключитьОбмен.Получить() тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	objRecordset = ПолучитьОбъектПодключения();
	ПризнакЗахвата = ПолучитьПризнакЗахвата(objRecordset);
	Захват(objRecordset,ПризнакЗахвата);
	ОтчисткаТаблицДокументовВыгрузки(objRecordset);
	ВыгрузкаДокументов(objRecordset);
	ЗафиксироватьТранзакцию();
	Если ПризнакЗахвата = 0 тогда 
		ОтменаЗахвата(objRecordset);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьОбъектПодключения()
	Попытка
		objConnection = Новый COMОбъект("ADODB.Connection");
		//objConnection.Open("Provider=SQLOLEDB.1;Password=z;Persist Security Info=True;User ID=sa;Initial Catalog=Kasatka;Data Source=192.168.95.168");
		objConnection.Open(Константы.СтрокаСоединенияОбменСДелфи.Получить());
		objRecordset = Новый COMОбъект("ADODB.Recordset");
		objRecordset.ActiveConnection = objConnection;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "Неудалось подключится к серверу базы данных делфи";
	КонецПопытки;
	Возврат objRecordset;
КонецФункции

Процедура ОбменСправочниками(objRecordset)
	//Загрузка Производителей
	стрЗапрос = "Producer";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDПроизводитель = objRecordset.Fields("ProducerID").Value;
			Наименование =  objRecordset.Fields("Name").Value;
			
			НайденнаяСсылка = Справочники.Производители.НайтиПоКоду(IDПроизводитель);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.Производители.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Код = IDПроизводитель;
			НовыйОбъект.Наименование = Наименование;
			НовыйОбъект.НаименованиеПолное = Наименование;
			НовыйОбъект.Записать();
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	
	//Загрузка Номенклатуры
	стрЗапрос = "Nomenklatura";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDноменклатура = objRecordset.Fields("NomenkID").Value;
			Наименование =  objRecordset.Fields("Name").Value;
			Артикул =  objRecordset.Fields("AtxCode").Value;
			БазоваяЕдиницаИзмерения =  СокрЛП(objRecordset.Fields("EdIzm").Value);
			ШтрихКод=  objRecordset.Fields("BarCode").Value;
			IDПроизводитель=  objRecordset.Fields("ProducerID").Value;
			
			НайденнаяСсылка = Справочники.Номенклатура.НайтиПоКоду(IDноменклатура);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Код = IDноменклатура;
			НовыйОбъект.Наименование = Наименование;
			НовыйОбъект.Артикул = Артикул;
			Если НовыйОбъект.ШтрихКод <> "" Тогда
				НовыйОбъект.ШтрихКод = ШтрихКод;
				//много ШК
				Если НовыйОбъект.ШтрихКоды.Количество()=0 Тогда
					НС = НовыйОбъект.ШтрихКоды.Добавить();
					НС.ШтрихКод = ШтрихКод;
				Иначе 
					НовыйОбъект.ШтрихКоды[0].ШтрихКод = ШтрихКод;
				КонецЕсли;
			КонецЕсли;
			НовыйОбъект.Производитель = Справочники.Производители.НайтиПоКоду(IDПроизводитель);
			НовыйОбъект.Записать();
			
			НайденнаяСсылкаЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(БазоваяЕдиницаИзмерения,,,НовыйОбъект.Ссылка);
			Если ЗначениеЗаполнено(НайденнаяСсылкаЕдИзм) тогда
				НовыйОбъект.БазоваяЕдиницаИзмерения = НайденнаяСсылкаЕдИзм;
			Иначе
				НоваяЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				НоваяЕдИзм.Наименование = БазоваяЕдиницаИзмерения;
				НоваяЕдИзм.Владелец = НовыйОбъект.Ссылка;
				НоваяЕдИзм.Коэффициент = 1;
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(БазоваяЕдиницаИзмерения);
				Если ЗначениеЗаполнено(ЕдиницаПоКлассификатору) тогда
					НоваяЕдИзм.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору;
				Иначе
					ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
					ЕдиницаПоКлассификатору.Наименование = БазоваяЕдиницаИзмерения;
					ЕдиницаПоКлассификатору.НаименованиеПолное = БазоваяЕдиницаИзмерения;
					ЕдиницаПоКлассификатору.Записать();
					НоваяЕдИзм.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору.Ссылка; 
				КонецЕсли;
				НоваяЕдИзм.Записать();
				НовыйОбъект.БазоваяЕдиницаИзмерения = НоваяЕдИзм.Ссылка;
			КонецЕсли;
			НовыйОбъект.Записать();
			БезСерии = Справочники.СерииНоменклатуры.НайтиПоНаименованию("Без серии",,,НовыйОбъект.Ссылка);
			Если не ЗначениеЗаполнено(БезСерии) Тогда 
				НовыйБезСерии = Справочники.СерииНоменклатуры.СоздатьЭлемент();
				НовыйБезСерии.Наименование = "Без серии";
				НовыйБезСерии.НомерСерии = "Без серии";
				НовыйБезСерии.Владелец = НовыйОбъект.Ссылка;
				НовыйБезСерии.Записать();
				НоваяЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				НоваяЕдИзм.Владелец = НовыйБезСерии.Ссылка;
				НоваяЕдИзм.Наименование =  "Оригинал";
				НоваяЕдИзм.Коэффициент = 1;
				НоваяЕдИзм.Записать();
				НовыйБезСерии.СкладскаяЕдиницаИзмерения = НоваяЕдИзм.Ссылка;
				НовыйБезСерии.Записать();
			КонецЕсли;

			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	
	//Загрузка Серий
	
	стрЗапрос = "Serial";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDноменклатура = objRecordset.Fields("NomenkID").Value;
			СрокГодности =  objRecordset.Fields("ExpDate").Value;
			НомерСерии = objRecordset.Fields("SerialNo").Value;
			Если КодСимвола(НомерСерии) = 0 тогда
                 НомерСерии = "";
			КонецЕсли;
			ЕдИзмНаименование = СокрЛП(objRecordset.Fields("EdIzm").Value);
			ЕдИзмКоличествоВУпаковке = objRecordset.Fields("GrKolich").Value;
			
			Наименование = СокрЛП(НомерСерии)+" с.г. "+Формат(СрокГодности,"ДФ=dd.MM.yyyy");
			НайденнаяНоменклатура = Справочники.Номенклатура.НайтиПоКоду(IDноменклатура);
			
			НайденнаяСсылка = Справочники.СерииНоменклатуры.НайтиПоНаименованию(Наименование,,,НайденнаяНоменклатура);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.СерииНоменклатуры.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Наименование = Наименование;
			НовыйОбъект.НомерСерии = НомерСерии;
			НовыйОбъект.СрокГодности = СрокГодности;
			НовыйОбъект.Владелец = НайденнаяНоменклатура;
			НовыйОбъект.Записать();
			
			НайденнаяСсылкаЕдИзм = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЕдИзмНаименование,,,НовыйОбъект.Ссылка);
			Если ЗначениеЗаполнено(НайденнаяСсылкаЕдИзм) тогда
				НоваяЕдИзм = НайденнаяСсылкаЕдИзм.ПолучитьОбъект();
				//НоваяЕдИзм.Коэффициент = ЕдИзмКоличествоВУпаковке;
				НоваяЕдИзм.Наименование =  ЕдИзмНаименование;
				НоваяЕдИзм.Записать();
				НовыйОбъект.СкладскаяЕдиницаИзмерения = НоваяЕдИзм.Ссылка;
			Иначе
				НоваяЕдИзм = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
				НоваяЕдИзм.Владелец = НовыйОбъект.Ссылка;
				НоваяЕдИзм.Наименование =  ЕдИзмНаименование;
				НоваяЕдИзм.Коэффициент = ЕдИзмКоличествоВУпаковке;
				ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(ЕдИзмНаименование);
				Если ЗначениеЗаполнено(ЕдиницаПоКлассификатору) тогда
					НоваяЕдИзм.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору;
				Иначе
					ЕдиницаПоКлассификатору = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
					ЕдиницаПоКлассификатору.Наименование = ЕдИзмНаименование;
					ЕдиницаПоКлассификатору.НаименованиеПолное = ЕдИзмНаименование;
					ЕдиницаПоКлассификатору.Записать();
					НоваяЕдИзм.ЕдиницаПоКлассификатору = ЕдиницаПоКлассификатору.Ссылка; 
				КонецЕсли;
				НоваяЕдИзм.Записать();
				НовыйОбъект.СкладскаяЕдиницаИзмерения = НоваяЕдИзм.Ссылка;
			КонецЕсли;
			НовыйОбъект.Записать();
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	//Загрузка Контрагентов
	стрЗапрос = "Client";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDконтрагента = objRecordset.Fields("ClientID").Value;
			Наименование =  objRecordset.Fields("Name").Value;
			ИНН =  objRecordset.Fields("INN").Value;
			
			НайденнаяСсылка = Справочники.Контрагенты.НайтиПоКоду(IDконтрагента);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Код = IDконтрагента;
			НовыйОбъект.Наименование = Наименование;
			НовыйОбъект.НаименованиеПолное = Наименование;
			НовыйОбъект.ИНН = ИНН;
			
			НовыйОбъект.Записать();
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	//Загрузка Складов
	стрЗапрос = "Store";
	objRecordset.Open(стрЗапрос);
	ОсновнойСклад = Константы.ОсновнойСклад.Получить(); 
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDсклада = objRecordset.Fields("StoreID").Value;
			Если  IDсклада=""  тогда
				
			КонецЕсли;
			НаименованиеСклада =  objRecordset.Fields("StoreName").Value;
			//IDСубсклада = objRecordset.Fields("SubStoreID").Value;
			//НаименованиеСубСклада =  objRecordset.Fields("SubStoreName").Value;
			//IDАнгара = IDсклада;//+"-"+IDСубсклада;
			//Адрес =  objRecordset.Fields("Адрес").Value;
			
			НайденнаяСсылка = Справочники.Склады.НайтиПоКоду(IDсклада);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.Склады.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Код = IDсклада;
			НовыйОбъект.Наименование = НаименованиеСклада;//+"-"+НаименованиеСубСклада;
			//НовыйОбъект.Владелец = ОсновнойСклад;
			НовыйОбъект.Записать();
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	
	//Загрузка АнгаровСкладов
	стрЗапрос = "Angari";
	objRecordset.Open(стрЗапрос);
	ОсновнойСклад = Константы.ОсновнойСклад.Получить(); 
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			IDАнгара = objRecordset.Fields("AngarID").Value;
			НаименованиеАнгара =  objRecordset.Fields("AngarName").Value;
			
			НайденнаяСсылка = Справочники.АнгарыСкладов.НайтиПоКоду(IDАнгара);
			Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
				НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
			Иначе
				НовыйОбъект = Справочники.АнгарыСкладов.СоздатьЭлемент();
			КонецЕсли;
			НовыйОбъект.Код = IDАнгара;
			НовыйОбъект.Наименование = НаименованиеАнгара;//+"-"+НаименованиеСубСклада;
			НовыйОбъект.Владелец = ОсновнойСклад;
			НовыйОбъект.Записать();
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
КонецПроцедуры

процедура ОтчисткаТаблицСправочников(objRecordset)
	//Отчистка Производителей
	стрЗапрос = "delete from Producer";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Номенклатуры
	стрЗапрос = "delete from Nomenklatura";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Серий
	стрЗапрос = "delete from Serial";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Контрагентов
	стрЗапрос = "delete from Client";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Cкладов
	стрЗапрос = "delete from Store";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка АнгаровСкладов
	стрЗапрос = "delete from Angari";
	objRecordset.Open(стрЗапрос);
	
КонецПроцедуры

Процедура ОбменДокументами(objRecordset)
	//Получаю основные Значения
	ОсновнойСклад = Константы.ОсновнойСклад.Получить(); 
	ОрганизацияОбмена = Константы.ОрганизацияОбмена.Получить();
	ПодразделениеОбмена = Константы.ПодразделениеОбмена.Получить();
	ОтветственныйОбмена = Константы.ОтветственныйОбмена.Получить();
	
	//Создаем таблици прихода и расхода
	ТаблицаПриходов = новый ТаблицаЗначений();
	ТаблицаПриходов.Колонки.Добавить("IDПрихода");
	ТаблицаПриходов.Колонки.Добавить("ДатаПрихода");
	ТаблицаПриходов.Колонки.Добавить("IDАнгара");
	//ТаблицаПриходов.Колонки.Добавить("IDСубСклада");
	ТаблицаПриходов.Колонки.Добавить("IDноменклатура");
	ТаблицаПриходов.Колонки.Добавить("IDСтрПрихода");
	ТаблицаПриходов.Колонки.Добавить("СрокГодности");
	ТаблицаПриходов.Колонки.Добавить("НомерСерии");
	ТаблицаПриходов.Колонки.Добавить("ЕдИзмНаименование");
	ТаблицаПриходов.Колонки.Добавить("Количество");
	ТаблицаПриходов.Колонки.Добавить("ПриходнаяЦена");
	ТаблицаПриходов.Колонки.Добавить("ПризнакВоздушки");
	ТаблицаПриходов.Колонки.Добавить("ПризнакВидаДокумента");
	ТаблицаПриходов.Колонки.Добавить("Отправитель");
	ТаблицаПриходов.Колонки.Добавить("НомерСчетФактуры");
	ТаблицаПриходов.Колонки.Добавить("Комент");

	
	ТаблицаРасходов = новый ТаблицаЗначений();
	ТаблицаРасходов.Колонки.Добавить("IDрасхода");
	ТаблицаРасходов.Колонки.Добавить("ДатаРасхода");
	ТаблицаРасходов.Колонки.Добавить("IDАнгара");
	//ТаблицаРасходов.Колонки.Добавить("IDСубСклада");
	ТаблицаРасходов.Колонки.Добавить("ПризнакВидаДокумента");
	ТаблицаРасходов.Колонки.Добавить("НомерСчетФактуры");
	ТаблицаРасходов.Колонки.Добавить("IDКонтрагента");	
	ТаблицаРасходов.Колонки.Добавить("IDноменклатура");
	ТаблицаРасходов.Колонки.Добавить("IDПрихода");
	ТаблицаРасходов.Колонки.Добавить("IDСтрПрихода");
	ТаблицаРасходов.Колонки.Добавить("IDСтрРасхода");
	ТаблицаРасходов.Колонки.Добавить("СрокГодности");
	ТаблицаРасходов.Колонки.Добавить("НомерСерии");
	ТаблицаРасходов.Колонки.Добавить("Количество");
	ТаблицаРасходов.Колонки.Добавить("ЦенаПродажи");
	ТаблицаРасходов.Колонки.Добавить("ПриходнаяЦена");
	ТаблицаРасходов.Колонки.Добавить("ПризнакВоздушки");
	ТаблицаРасходов.Колонки.Добавить("Комент");
	
	//Загрузка Приход
	стрЗапрос = "Prihod";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			СтрТаблицаПриходов = ТаблицаПриходов.Добавить();
			
			СтрТаблицаПриходов.IDПрихода = СокрЛП(objRecordset.Fields("IDПрихода").Value);
			СтрТаблицаПриходов.ДатаПрихода =  objRecordset.Fields("ДатаПрихода").Value;
			СтрТаблицаПриходов.IDАнгара = objRecordset.Fields("IDАнгара").Value;
			Если  СтрТаблицаПриходов.IDАнгара=1   тогда
				 СтрТаблицаПриходов.IDАнгара=2;
			КонецЕсли;	
			//СтрТаблицаПриходов.IDСубСклада = objRecordset.Fields("IDСубСклада").Value;
			СтрТаблицаПриходов.IDноменклатура = objRecordset.Fields("IDноменклатура").Value;
			СтрТаблицаПриходов.IDСтрПрихода = objRecordset.Fields("IDСтрПрихода").Value;
			СтрТаблицаПриходов.СрокГодности = objRecordset.Fields("СрокГодности").Value;
			СтрТаблицаПриходов.НомерСерии = objRecordset.Fields("НомерСерии").Value;
			Если КодСимвола(СтрТаблицаПриходов.НомерСерии) = 0 тогда
                 СтрТаблицаПриходов.НомерСерии = "";
			КонецЕсли;
			СтрТаблицаПриходов.ЕдИзмНаименование = objRecordset.Fields("ЕдИзмНаименование").Value;
			СтрТаблицаПриходов.Количество = objRecordset.Fields("Количество").Value;
			СтрТаблицаПриходов.ПриходнаяЦена = objRecordset.Fields("ПриходнаяЦена").Value;
			СтрТаблицаПриходов.ПризнакВоздушки = objRecordset.Fields("ПризнакВоздушки").Value;
			СтрТаблицаПриходов.ПризнакВидаДокумента = objRecordset.Fields("ПризнакВидаДокумента").Value;
			СтрТаблицаПриходов.Отправитель = objRecordset.Fields("Отправитель").Value;
			СтрТаблицаПриходов.НомерСчетФактуры = objRecordset.Fields("НомерСчетФактуры").Value;
			СтрТаблицаПриходов.Комент = objRecordset.Fields("Комент").Value;

			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	//Загрузка Расход
	стрЗапрос = "Rashod";
	objRecordset.Open(стрЗапрос);
	
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			СтрТаблицаРасходов = ТаблицаРасходов.Добавить();
			
			СтрТаблицаРасходов.IDрасхода = СокрЛП(objRecordset.Fields("IDрасхода").Value);
			СтрТаблицаРасходов.ДатаРасхода =  objRecordset.Fields("ДатаРасхода").Value;
			СтрТаблицаРасходов.IDАнгара = objRecordset.Fields("IDАнгара").Value;
			Если  СтрТаблицаРасходов.IDАнгара=1   тогда
				 СтрТаблицаРасходов.IDАнгара=2; 
			КонецЕсли;	

			
			//СтрТаблицаРасходов.IDСубСклада = objRecordset.Fields("IDСубСклада").Value;	
			СтрТаблицаРасходов.ПризнакВидаДокумента = objRecordset.Fields("ПризнакВидаДокумента").Value;
			СтрТаблицаРасходов.НомерСчетФактуры = objRecordset.Fields("НомерСчетФактуры").Value;
			СтрТаблицаРасходов.IDКонтрагента = objRecordset.Fields("IDКонтрагента").Value;
			СтрТаблицаРасходов.IDноменклатура = objRecordset.Fields("IDноменклатура").Value;
			СтрТаблицаРасходов.IDПрихода = СокрЛП(objRecordset.Fields("IDПрихода").Value);
			СтрТаблицаРасходов.IDСтрПрихода = СокрЛП(objRecordset.Fields("IDСтрПрихода").Value);
			СтрТаблицаРасходов.IDСтрРасхода = СокрЛП(objRecordset.Fields("IDСтрРасхода").Value);
			СтрТаблицаРасходов.СрокГодности = objRecordset.Fields("СрокГодности").Value;
			СтрТаблицаРасходов.НомерСерии = objRecordset.Fields("НомерСерии").Value;
			Если КодСимвола(СтрТаблицаРасходов.НомерСерии) = 0 тогда
                 СтрТаблицаРасходов.НомерСерии = "";
			КонецЕсли;
			СтрТаблицаРасходов.Количество = objRecordset.Fields("Количество").Value;
			СтрТаблицаРасходов.ЦенаПродажи = objRecordset.Fields("ЦенаПродажи").Value;
			СтрТаблицаРасходов.ПриходнаяЦена = objRecordset.Fields("ПриходнаяЦена").Value;
			СтрТаблицаРасходов.ПризнакВоздушки = objRecordset.Fields("ПризнакВоздушки").Value;
			СтрТаблицаРасходов.Комент = objRecordset.Fields("Комент").Value;
			
			objRecordset.MoveNext();
		КонецЦикла;
	КонецЕсли;
	objRecordset.Close();
	
	ЗафиксироватьТранзакцию();
    НачатьТранзакцию();
	//Создание ДокументовПрихода
	I = 0;
	ТаблицаШапокДокументовПрихода = ТаблицаПриходов.Скопировать();
	ТаблицаШапокДокументовПрихода.Свернуть("IDПрихода,ДатаПрихода,ПризнакВоздушки,ПризнакВидаДокумента,Отправитель,НомерСчетФактуры,Комент","");
	ТаблицаШапокДокументовПрихода.Сортировать("ДатаПрихода возр,IDПрихода возр");
	Для Каждого СтрТаблицаШапокДокументовПрихода из ТаблицаШапокДокументовПрихода Цикл 
		НайденнаяСсылка = Документы.ПриходныйОрдерНаТовары.НайтиПоНомеру(СтрТаблицаШапокДокументовПрихода.IDПрихода,СтрТаблицаШапокДокументовПрихода.ДатаПрихода);
		Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
			НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
		Иначе
			НовыйОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		КонецЕсли;
		
		НовыйОбъект.Номер = СтрТаблицаШапокДокументовПрихода.IDПрихода;
		НовыйОбъект.Дата = СтрТаблицаШапокДокументовПрихода.ДатаПрихода;
		НовыйОбъект.НомерСчетфактуры = СтрТаблицаШапокДокументовПрихода.НомерСчетФактуры; 
		НовыйОбъект.Организация = ОрганизацияОбмена;
		НовыйОбъект.Подразделение = ПодразделениеОбмена;
		НовыйОбъект.Ответственный = ОтветственныйОбмена;
		Если СтрТаблицаШапокДокументовПрихода.ПризнакВоздушки = 0 тогда
			НовыйОбъект.ЭтоВоздушка = Ложь;
		Иначе
			НовыйОбъект.ЭтоВоздушка = Истина;
		КонецЕсли;
		НовыйОбъект.Склад = ОсновнойСклад;
		
		НовыйОбъект.Комментарий = СтрТаблицаШапокДокументовПрихода.Комент;
		
		НовыйОбъект.Расставленно = Ложь;
		
		Если СтрТаблицаШапокДокументовПрихода.ПризнакВидаДокумента = 1 Тогда 
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.Поступление;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель); 
		ИначеЕсли СтрТаблицаШапокДокументовПрихода.ПризнакВидаДокумента = 2 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ПеремещениеВходящее;
			//НовыйОбъект.Основание = Справочники.Склады.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель);
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель); 
		ИначеЕсли СтрТаблицаШапокДокументовПрихода.ПризнакВидаДокумента = 3 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ВозвратОтПокупателя;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель);
		ИначеЕсли СтрТаблицаШапокДокументовПрихода.ПризнакВидаДокумента = 4 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ВозвратОтКомиссионера;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель);
		Иначе
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ПрочийПриход;
			//НовыйОбъект.Основание = "";
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовПрихода.Отправитель); 
		КонецЕсли;
		
		НовыйОбъект.Товары.Очистить();
		ОтборПоШапке = Новый Структура("IDПрихода,ДатаПрихода,ПризнакВоздушки,ПризнакВидаДокумента,Отправитель,НомерСчетФактуры");
		ЗаполнитьЗначенияСвойств(ОтборПоШапке,СтрТаблицаШапокДокументовПрихода);
		ТЧДокумента = ТаблицаПриходов.Скопировать(ОтборПоШапке); // отбор по СтрТаблицаШапокДокументовПрихода
		
		Для Каждого СтрТЧДокумента из ТЧДокумента Цикл
			НовСтрТовары = НовыйОбъект.Товары.Добавить();
			НовСтрТовары.IDСтрПрихода = СтрТЧДокумента.IDСтрПрихода;
			НовСтрТовары.Ангар = Справочники.АнгарыСкладов.НайтиПоКоду(СтрТЧДокумента.IDАнгара);
			НовСтрТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрТЧДокумента.IDНоменклатура);
			Если не ЗначениеЗаполнено(СтрТЧДокумента.СрокГодности) и не ЗначениеЗаполнено(СтрТЧДокумента.НомерСерии) тогда
				НаименованиеСерии = "Без серии";
			Иначе
				НаименованиеСерии = СокрЛП(СтрТЧДокумента.НомерСерии)+" с.г. "+Формат(СтрТЧДокумента.СрокГодности,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			НовСтрТовары.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию(НаименованиеСерии,,,НовСтрТовары.Номенклатура);
			НовСтрТовары.Количество = СтрТЧДокумента.Количество;
			НовСтрТовары.ПриходнаяЦена = СтрТЧДокумента.ПриходнаяЦена;
		КонецЦикла;
		
		НовыйОбъект.Товары.Сортировать("Номенклатура");
		
		НовыйОбъект.Расставленно = Ложь;
		НовыйОбъект.ПризнакСинхронизацииСДелфи = Истина;
		НовыйОбъект.ПометкаУдаления = Ложь;
		НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если I > 200 тогда
				ЗафиксироватьТранзакцию();
			    НачатьТранзакцию();
        		I = 0 ;
			Иначе
				I = I+1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
    НачатьТранзакцию();
	
	//Создание ДокументовРасхода
	I = 0;
	ТаблицаШапокДокументовРасхода = ТаблицаРасходов.Скопировать();
	ТаблицаШапокДокументовРасхода.Свернуть("IDРасхода,ДатаРасхода,ПризнакВоздушки,ПризнакВидаДокумента,IDКонтрагента,НомерСчетФактуры,Комент","");
	ТаблицаШапокДокументовРасхода.Сортировать("ДатаРасхода возр,IDРасхода возр");
	Для Каждого СтрТаблицаШапокДокументовРасхода из ТаблицаШапокДокументовРасхода Цикл 
		НайденнаяСсылка = Документы.РасходныйОрдерНаТовары.НайтиПоНомеру(СтрТаблицаШапокДокументовРасхода.IDРасхода,СтрТаблицаШапокДокументовРасхода.ДатаРасхода);
		Если ЗначениеЗаполнено(НайденнаяСсылка) тогда
			НовыйОбъект = НайденнаяСсылка.ПолучитьОбъект();
		Иначе
			НовыйОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		КонецЕсли;
		
		НовыйОбъект.Номер = СтрТаблицаШапокДокументовРасхода.IDРасхода;
		НовыйОбъект.Дата = СтрТаблицаШапокДокументовРасхода.ДатаРасхода;
		НовыйОбъект.НомерСчетфактуры = СтрТаблицаШапокДокументовРасхода.НомерСчетФактуры; 
		НовыйОбъект.Организация = ОрганизацияОбмена;
		НовыйОбъект.Подразделение = ПодразделениеОбмена;
		НовыйОбъект.Ответственный = ОтветственныйОбмена;
		Если СтрТаблицаШапокДокументовРасхода.ПризнакВоздушки = 0 тогда
			НовыйОбъект.ЭтоВоздушка = Ложь;
		Иначе
			НовыйОбъект.ЭтоВоздушка = Истина;
		КонецЕсли;
		НовыйОбъект.Склад = ОсновнойСклад;
		НовыйОбъект.Комментарий = СтрТаблицаШапокДокументовРасхода.Комент;
		
		Если СтрТаблицаШапокДокументовРасхода.ПризнакВидаДокумента = 1 Тогда 
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.Реализация;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента); 
		ИначеЕсли СтрТаблицаШапокДокументовРасхода.ПризнакВидаДокумента = 2 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ПеремещениеИсходящее;
			//НовыйОбъект.Основание = Справочники.Склады.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента);
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента); 
		ИначеЕсли СтрТаблицаШапокДокументовРасхода.ПризнакВидаДокумента = 3 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ВозвратПоставщику;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента);
		ИначеЕсли СтрТаблицаШапокДокументовРасхода.ПризнакВидаДокумента = 4 Тогда
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ВозвратКомитенту;
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента);
		Иначе
			НовыйОбъект.ВидДокументаЗагрузки = Перечисления.ВидДокументаЗагрузки.ПрочийРасход;
			//НовыйОбъект.Основание = "";
			НовыйОбъект.Основание = Справочники.Контрагенты.НайтиПоКоду(СтрТаблицаШапокДокументовРасхода.IDКонтрагента); 
		КонецЕсли;
		
		НовыйОбъект.Товары.Очистить();
		ОтборПоШапке = Новый Структура("IDРасхода,ДатаРасхода,ПризнакВоздушки,ПризнакВидаДокумента,IDКонтрагента,НомерСчетФактуры");
		ЗаполнитьЗначенияСвойств(ОтборПоШапке,СтрТаблицаШапокДокументовРасхода);
		ТЧДокумента = ТаблицаРасходов.Скопировать(ОтборПоШапке); // отбор по СтрТаблицаШапокДокументовРасхода
		Для Каждого СтрТЧДокумента из ТЧДокумента Цикл
			НовСтрТовары = НовыйОбъект.Товары.Добавить();
			НовСтрТовары.Ангар = Справочники.АнгарыСкладов.НайтиПоКоду(СтрТЧДокумента.IDАнгара);
			НовСтрТовары.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СтрТЧДокумента.IDНоменклатура);
			//НаименованиеСерии = СокрЛП(СтрТЧДокумента.НомерСерии)+" с.г. "+Формат(СтрТЧДокумента.СрокГодности,"ДФ=dd.MM.yyyy");
			Если не ЗначениеЗаполнено(СтрТЧДокумента.СрокГодности) и не ЗначениеЗаполнено(СтрТЧДокумента.НомерСерии) тогда
				НаименованиеСерии = "Без серии";
			Иначе
				НаименованиеСерии = СокрЛП(СтрТЧДокумента.НомерСерии)+" с.г. "+Формат(СтрТЧДокумента.СрокГодности,"ДФ=dd.MM.yyyy");
			КонецЕсли;
			НовСтрТовары.СерияНоменклатуры = Справочники.СерииНоменклатуры.НайтиПоНаименованию(НаименованиеСерии,,,НовСтрТовары.Номенклатура);
			НовСтрТовары.Количество = СтрТЧДокумента.Количество;
			НовСтрТовары.Цена = СтрТЧДокумента.ЦенаПродажи;
			НовСтрТовары.IDПрихода = СтрТЧДокумента.IDПрихода;
			НовСтрТовары.IDСтрПрихода = СтрТЧДокумента.IDСтрПрихода;
			НовСтрТовары.IDСтрРасхода = СтрТЧДокумента.IDСтрРасхода;
			НовСтрТовары.Сумма = НовСтрТовары.Цена * НовСтрТовары.Количество;
			НовСтрТовары.ПриходнаяЦена = СтрТЧДокумента.ПриходнаяЦена;
		КонецЦикла;
		
		НовыйОбъект.Товары.Сортировать("Номенклатура");
		
		НовыйОбъект.ПризнакСинхронизацииСДелфи = Истина;
		НовыйОбъект.ПометкаУдаления = Ложь;
		НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если I > 200 Тогда
				ЗафиксироватьТранзакцию();
			    НачатьТранзакцию();
        		I = 0 ;
			Иначе
				I = I+1;
		КонецЕсли;

	КонецЦикла;
	ЗафиксироватьТранзакцию();
	НачатьТранзакцию();
КонецПроцедуры

процедура ОтчисткаТаблицДокументов(objRecordset)
	//Отчистка Прихода
	стрЗапрос = "delete from Prihod";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Расхода
	стрЗапрос = "delete from Rashod";
	objRecordset.Open(стрЗапрос);
	
КонецПроцедуры

Процедура ВыгрузкаДокументов(objRecordset)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.Номер КАК IDПрихода,
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.Дата КАК ДатаПрихода,
	|	ПриходныйОрдерНаТоварыТовары.Ангар.Код КАК IDАнгара,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.Код КАК IDноменклатура,
	|	ПриходныйОрдерНаТоварыТовары.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	|	ПриходныйОрдерНаТоварыТовары.СерияНоменклатуры.НомерСерии КАК НомерСерии,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзмНаименование,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.ПриходнаяЦена КАК ПриходнаяЦена,
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.ЭтоВоздушка КАК ПризнакВоздушки,
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.ВидДокументаЗагрузки КАК ПризнакВидаДокумента,
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.Основание.Код КАК Отправитель,
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.НомерСчетфактуры КАК НомерСчетфактуры
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка.ПризнакСинхронизацииСДелфи = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПрихода,
	|	IDПрихода";
	
	ТЗВыгрузкиПриходов = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Номер КАК IDРасхода,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Дата КАК ДатаРасхода,
	|	РасходныйОрдерНаТоварыТовары.Ангар.Код КАК IDАнгара,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.ВидДокументаЗагрузки КАК ПризнакВидаДокумента,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.НомерСчетфактуры Как НомерСчетфактуры,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.Основание.Код КАК IDКонтрагента,
	|	РасходныйОрдерНаТоварыТовары.Номенклатура.Код КАК IDноменклатура,
	|	РасходныйОрдерНаТоварыТовары.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	|	РасходныйОрдерНаТоварыТовары.СерияНоменклатуры.НомерСерии КАК НомерСерии,
	|	РасходныйОрдерНаТоварыТовары.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдИзмНаименование,
	|	РасходныйОрдерНаТоварыТовары.Количество КАК Количество,
	|	РасходныйОрдерНаТоварыТовары.Цена КАК ЦенаПродажи,
	|	РасходныйОрдерНаТоварыТовары.ПриходнаяЦена КАК ПриходнаяЦена,
	|	РасходныйОрдерНаТоварыТовары.Ссылка.ЭтоВоздушка КАК ПризнакВоздушки
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|ГДЕ
	|	РасходныйОрдерНаТоварыТовары.Ссылка.ПризнакСинхронизацииСДелфи = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасхода,
	|	IDРасхода";
	
	ТЗВыгрузкиРасходов = Запрос.Выполнить().Выгрузить();
	
	
	Для Каждого СтрТЗВыгрузкиПриходов из ТЗВыгрузкиПриходов Цикл
		
		IDПрихода = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDПрихода);
		ДатаПрихода =  ФорматSQLДата(СтрТЗВыгрузкиПриходов.ДатаПрихода);
		IDАнгара = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDАнгара);
		//IDСубСклада = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDСубСклада);
		IDноменклатура = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDноменклатура);
		СрокГодности = ФорматSQLДата(СтрТЗВыгрузкиПриходов.СрокГодности);
		НомерСерии = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.НомерСерии);
		ЕдИзмНаименование = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.ЕдИзмНаименование);
		Количество = ФорматSQLДеньги(СтрТЗВыгрузкиПриходов.Количество);
		ПриходнаяЦена = ФорматSQLДеньги(СтрТЗВыгрузкиПриходов.ПриходнаяЦена);
		ПризнакВоздушки = ФорматSQLБулево(СтрТЗВыгрузкиПриходов.ПризнакВоздушки);
		ПризнакВидаДокумента = ФорматSQLПризнакВидаДокумента(СтрТЗВыгрузкиПриходов.ПризнакВидаДокумента);
		Отправитель = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.Отправитель);
		НомерСчетфактуры = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.НомерСчетфактуры);

		стрЗапрос = "Insert into PrihodOUT with (tablockx) (IDПрихода,ДатаПрихода,IDАнгара,IDноменклатура,СрокГодности,НомерСерии,ЕдИзмНаименование,Количество,ПриходнаяЦена,ПризнакВоздушки,ПризнакВидаДокумента,Отправитель,НомерСчетфактуры) Values ("+IDПрихода+","+ДатаПрихода+","+IDАнгара+","+IDноменклатура+","+СрокГодности+","+НомерСерии+","+ЕдИзмНаименование+","+Количество+","+ПриходнаяЦена+","+ПризнакВоздушки+","+ПризнакВидаДокумента+","+Отправитель+","+НомерСчетфактуры+")";
		objRecordset.Open(стрЗапрос);
		
	КонецЦикла;
	
	Для Каждого СтрТЗВыгрузкиРасходов из ТЗВыгрузкиРасходов Цикл
		IDРасхода = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.IDРасхода);
		ДатаРасхода =  ФорматSQLДата(СтрТЗВыгрузкиРасходов.ДатаРасхода);
		IDАнгара = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.IDАнгара);
		//IDСубСклада = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDСубСклада);
		ПризнакВидаДокумента = ФорматSQLПризнакВидаДокумента(СтрТЗВыгрузкиРасходов.ПризнакВидаДокумента);
		НомерСчетфактуры = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.НомерСчетфактуры);
		IDКонтрагента = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.IDКонтрагента);
		IDноменклатура = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.IDноменклатура);
		СрокГодности = ФорматSQLДата(СтрТЗВыгрузкиРасходов.СрокГодности);
		НомерСерии = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.НомерСерии);
		ЕдИзмНаименование = ФорматSQLСтр(СтрТЗВыгрузкиРасходов.ЕдИзмНаименование);
		Количество = ФорматSQLДеньги(СтрТЗВыгрузкиРасходов.Количество);
		ЦенаПродажи = ФорматSQLДеньги(СтрТЗВыгрузкиРасходов.ЦенаПродажи);
		ПриходнаяЦена = ФорматSQLДеньги(СтрТЗВыгрузкиРасходов.ПриходнаяЦена);
		ПризнакВоздушки = ФорматSQLБулево(СтрТЗВыгрузкиРасходов.ПризнакВоздушки);
		
		стрЗапрос = "Insert into RashodOUT with (tablockx) (IDРасхода,ДатаРасхода,IDАнгара,ПризнакВидаДокумента,НомерСчетфактуры,IDКонтрагента,IDноменклатура,СрокГодности,НомерСерии,Количество,ЦенаПродажи,ПриходнаяЦена,ПризнакВоздушки) Values ("+IDРасхода+","+ДатаРасхода+","+IDАнгара+","+ПризнакВидаДокумента+","+НомерСчетфактуры+","+IDКонтрагента+","+IDноменклатура+","+СрокГодности+","+НомерСерии+","+Количество+","+ЦенаПродажи+","+ПриходнаяЦена+","+ПризнакВоздушки+")";
		objRecordset.Open(стрЗапрос);
	КонецЦикла;
	
	
	//стрЗапрос = "SpisanieOUT";
	//objRecordset.Open(стрЗапрос);
	//МожноЗаписыватьСписание = objRecordset.EOF;
	//objRecordset.Close();	
	//Если МожноЗаписыватьСписание Тогда 
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.Ссылка.Номер КАК IDСписания,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.Ссылка.Дата КАК ДатаСписания,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.СтароеМестоХранения.Ангар КАК IDАнгара,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.Номенклатура.Код КАК IDноменклатура,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.СерияНоменклатуры.СрокГодности КАК СрокГодности,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.СерияНоменклатуры.НомерСерии КАК НомерСерии,
	//	|	ВЫБОР
	//	|		КОГДА ПеремещениеМеждуЯчейкамиСкладаТовары.НовоеМестоХранения = &ЯчейкаНедосдачи
	//	|			ТОГДА -ПеремещениеМеждуЯчейкамиСкладаТовары.Количество
	//	|		ИНАЧЕ ПеремещениеМеждуЯчейкамиСкладаТовары.Количество
	//	|	КОНЕЦ КАК Количество,
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.Ссылка
	//	|ИЗ
	//	|	Документ.ПеремещениеМеждуЯчейкамиСклада.Товары КАК ПеремещениеМеждуЯчейкамиСкладаТовары
	//	|ГДЕ
	//	|	ПеремещениеМеждуЯчейкамиСкладаТовары.Ссылка.ПризнакСинхронизацииСДелфи = ЛОЖЬ
	//	|	И ПеремещениеМеждуЯчейкамиСкладаТовары.Ссылка.Проведен = ИСТИНА
	//	|	И (ПеремещениеМеждуЯчейкамиСкладаТовары.НовоеМестоХранения = &ЯчейкаНедосдачи
	//	|			ИЛИ ПеремещениеМеждуЯчейкамиСкладаТовары.НовоеМестоХранения = &ЯчейкаИзлишков)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ДатаСписания,
	//	|	IDСписания";
	//	Запрос.УстановитьПараметр("ЯчейкаНедосдачи" , Константы.АвтоЯчейкаНедосдачи.Получить());
	//	Запрос.УстановитьПараметр("ЯчейкаИзлишков" , Константы.АвтоЯчейкаИзлишков.Получить());
	//	ТЗВыгрузкиСписаний = Запрос.Выполнить().Выгрузить();
	//	
	//	Для Каждого СтрТЗВыгрузкиСписаний из ТЗВыгрузкиСписаний Цикл
	//		
	//		IDСписания = ФорматSQLСтр(СтрТЗВыгрузкиСписаний.IDСписания);
	//		ДатаСписания =  ФорматSQLДата(СтрТЗВыгрузкиСписаний.ДатаСписания);
	//		IDАнгара = ФорматSQLСтр(СтрТЗВыгрузкиСписаний.IDАнгара);
	//		//IDСубСклада = ФорматSQLСтр(СтрТЗВыгрузкиСписаний.IDСубСклада);
	//		IDноменклатура = ФорматSQLСтр(СтрТЗВыгрузкиСписаний.IDноменклатура);
	//		СрокГодности = ФорматSQLДата(СтрТЗВыгрузкиСписаний.СрокГодности);
	//		НомерСерии = ФорматSQLСтр(СтрТЗВыгрузкиСписаний.НомерСерии);
	//		Количество = ФорматSQLДеньги(СтрТЗВыгрузкиСписаний.Количество);
	//		
	//		стрЗапрос = "Insert into SpisanieOUT with (tablockx) (IDСписания,ДатаСписания,IDАнгара,IDноменклатура,СрокГодности,НомерСерии,Количество) Values ("+IDСписания+","+ДатаСписания+","+IDАнгара+","+IDноменклатура+","+СрокГодности+","+НомерСерии+","+Количество+")";
	//		objRecordset.Open(стрЗапрос);
	//		
	//	КонецЦикла;
	//	
	//	ТЗВыгрузкиСписаний.Свернуть("Ссылка");
	//	Для Каждого СтрТЗВыгрузкиСписаний из ТЗВыгрузкиСписаний Цикл
	//		ОбъектСписание = СтрТЗВыгрузкиСписаний.Ссылка.ПолучитьОбъект();
	//		ОбъектСписание.ПризнакСинхронизацииСДелфи = Истина;
	//		ОбъектСписание.Записать();
	//	КонецЦикла;
	//КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасставленныеПоступления.ПрихОрдер.Номер КАК IDПрихода,
	|	РасставленныеПоступления.ПрихОрдер.Дата КАК ДатаПрихода,
	|	РасставленныеПоступления.ПрихОрдер.НомерСчетфактуры КАК НомерСчетфактуры
	|ИЗ
	|	РегистрСведений.РасставленныеПоступления КАК РасставленныеПоступления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПрихода,
	|	IDПрихода";
	
	ТЗВыгрузкиРасстановки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТЗВыгрузкиПриходов из ТЗВыгрузкиРасстановки Цикл
		
		IDПрихода = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.IDПрихода);
		ДатаПрихода =  ФорматSQLДата(СтрТЗВыгрузкиПриходов.ДатаПрихода);
		НомерСчетфактуры = ФорматSQLСтр(СтрТЗВыгрузкиПриходов.НомерСчетфактуры);

		стрЗапрос = "Insert into RasstOUT with (tablockx) (IDПрихода,ДатаПрихода,НомерСчетфактуры) Values ("+IDПрихода+","+ДатаПрихода+","+НомерСчетфактуры+")";
		objRecordset.Open(стрЗапрос);
		
	КонецЦикла;
КонецПроцедуры

процедура ОтчисткаТаблицДокументовВыгрузки(objRecordset)
	//Отчистка Прихода
	стрЗапрос = "delete from PrihodOUT";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Расхода
	стрЗапрос = "delete from RashodOUT";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Списания
	стрЗапрос = "delete from SpisanieOUT";
	objRecordset.Open(стрЗапрос);
	
	//Отчистка Расстановки
	стрЗапрос = "delete from RasstOUT";
	objRecordset.Open(стрЗапрос);	
	
КонецПроцедуры

Функция ПолучитьПризнакЗахвата(objRecordset)
	//Проверка доступности чтения 0 или 1 (если /([0,1]-1) дало ошибку )
	ПризнакЗахватаТаблицОбмена = Константы.ПризнакЗахватаТаблицОбмена.Получить();
	ПризнакЗахвата = 0;
	стрЗапрос = "SYSTEM";
	objRecordset.Open(стрЗапрос);
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;
		Пока objRecordset.EOF = 0 Цикл
			ПризнакЗахвата = objRecordset.Fields("LockField").Value;
			objRecordset.MoveNext();
		КонецЦикла;
		Если ПризнакЗахвата <> 0 и ПризнакЗахвата <> ПризнакЗахватаТаблицОбмена тогда
			ОтменитьТранзакцию();
			ВызватьИсключение "База делфи захвачена другой системой";
		КонецЕсли;	
	КонецЕсли;
	objRecordset.Close();
	Возврат ПризнакЗахвата;
КонецФункции

Процедура Захват(objRecordset, ПризнакЗахвата)
	//Захватываю для чтения ставлю Константы.ПризнакЗахватаТаблицОбмена
	ПризнакЗахватаТаблицОбмена = Константы.ПризнакЗахватаТаблицОбмена.Получить();
	Если ПризнакЗахвата = 0 тогда
		стрЗапрос = "delete from SYSTEM";
		objRecordset.Open(стрЗапрос);
		стрЗапрос = "Insert into SYSTEM with (tablockx) (LockField) Values ("+ПризнакЗахватаТаблицОбмена+")";
		objRecordset.Open(стрЗапрос);
	КонецЕсли;
КонецПроцедуры

Процедура ОтменаЗахвата(objRecordset)
	//Отпускаю  ставлю 0
	стрЗапрос = "update System set LockField=0";
	objRecordset.Open(стрЗапрос);
	
	//
	//стрЗапрос = "delete from SYSTEM";
	//objRecordset.Open(стрЗапрос);
	//стрЗапрос = "Insert into SYSTEM with (tablockx) (LockField) Values ("+0+")";
	//objRecordset.Open(стрЗапрос);
	
КонецПроцедуры

Функция ФорматSQLДата(d)
	стрd = "'"+Формат(Год(d),"ЧГ=0")+Формат(Месяц(d),"ЧЦ=2; ЧВН=; ЧГ=0")+Формат(День(d),"ЧЦ=2; ЧВН=; ЧГ=0")+"'";//+Формат(Час(ТекущаяДата()),"ЧЦ=2; ЧВН=; ЧГ=0")+Формат(Минута(ТекущаяДата()),"ЧЦ=2; ЧВН=; ЧГ=0")+Формат(Секунда(ТекущаяДата()),"ЧЦ=2; ЧВН=; ЧГ=0")+"'";
	Возврат стрd;
КонецФункции

Функция ФорматSQLДеньги(m)
	стрm = Формат(m, "ЧРД=.; ЧН=0; ЧГ=0");
	Возврат стрm;
КонецФункции

Функция ФорматSQLЦел(i)
	стрi = Формат(i, "ЧДЦ=0; ЧН=0; ЧГ=0");
	Возврат стрi;
КонецФункции

Функция ФорматSQLСтр(s)
	стрs = "'"+s+"'";	
	Возврат стрs;
КонецФункции

Функция ФорматSQLБулево(b)
	Если b тогда
		стрb = Формат(1, "ЧДЦ=0; ЧН=0; ЧГ=0");
	Иначе
		стрb = Формат(0, "ЧДЦ=0; ЧН=0; ЧГ=0");
	КонецЕсли;
	Возврат стрb;
КонецФункции

Функция ФорматSQLПризнакВидаДокумента(b)
	Если b = Перечисления.ВидДокументаЗагрузки.Поступление тогда
		стрb = Формат(1, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ПеремещениеВходящее тогда
		стрb = Формат(2, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ВозвратОтПокупателя тогда
		стрb = Формат(3, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ВозвратОтКомиссионера тогда
		стрb = Формат(4, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.Реализация тогда
		стрb = Формат(1, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ПеремещениеИсходящее тогда
		стрb = Формат(2, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ВозвратПоставщику тогда
		стрb = Формат(3, "ЧДЦ=0; ЧН=0; ЧГ=0");
	ИначеЕсли b = Перечисления.ВидДокументаЗагрузки.ВозвратКомитенту тогда
		стрb = Формат(4, "ЧДЦ=0; ЧН=0; ЧГ=0");
	Иначе
		стрb = Формат(0, "ЧДЦ=0; ЧН=0; ЧГ=0");
	КонецЕсли;
	Возврат стрb;
КонецФункции
