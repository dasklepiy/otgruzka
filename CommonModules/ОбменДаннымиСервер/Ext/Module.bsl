////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ФормаНастройкиУзлаПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	Форма.НастройкаОтборовНаУзле = ПланыОбмена[ИмяПланаОбмена].НастройкаОтборовНаУзле();
	
	Для Каждого НастройкаОтбора ИЗ Форма.НастройкаОтборовНаУзле Цикл
		
		Ключ = НастройкаОтбора.Ключ;
		
		Если ТипЗнч(Форма[Ключ]) = Тип("ДанныеФормыКоллекция") Тогда
			
			Таблица = Новый ТаблицаЗначений;
			
			СтруктураТабличнойЧасти = Форма.Параметры[Ключ];
			
			Для Каждого Элемент ИЗ СтруктураТабличнойЧасти Цикл
				
				УстановитьКоличествоСтрокТаблицы(Таблица, Элемент.Значение.Количество());
				
				Таблица.Колонки.Добавить(Элемент.Ключ);
				
				Таблица.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
				
			КонецЦикла;
			
			Форма[Ключ].Загрузить(Таблица);
			
		Иначе
			
			Форма[Ключ] = Форма.Параметры[Ключ];
			
		КонецЕсли;
		
		Форма.НастройкаОтборовНаУзле[Ключ] = Форма.Параметры[Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ФормаНастройкиЗначенийПоУмолчаниюПриСозданииНаСервере(Форма, ИмяПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Форма.ЗначенияПоУмолчаниюНаУзле = ПланыОбмена[ИмяПланаОбмена].ЗначенияПоУмолчаниюНаУзле();
	
	Для Каждого Настройка ИЗ Форма.ЗначенияПоУмолчаниюНаУзле Цикл
		
		Ключ = Настройка.Ключ;
		
		Форма[Ключ] = Форма.Параметры[Ключ];
		
		Форма.ЗначенияПоУмолчаниюНаУзле[Ключ] = Форма.Параметры[Ключ];
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обновление типовых правил конвертации объектов для всех планов обмена,
// для которых созданы настройки обмена в системе
//
// Параметры:
//  Отказ - Булево - флаг отказа; поднимается при возникновении ошибки обновления правил
// 
Процедура ВыполнитьОбновлениеТиповыхПравилКонвертацииОбъектов(Отказ) Экспорт
	
	ВыполнитьОбновлениеТиповыхПравилДляОбменаДанными(Отказ, "ПравилаКонвертацииОбъектов", "ПравилаОбмена");
	
КонецПроцедуры

// Выполняет обновление типовых правил регистрации объектов для всех планов обмена,
// для которых созданы настройки обмена в системе
//
// Параметры:
//  Отказ - Булево - флаг отказа; поднимается при возникновении ошибки обновления правил
// 
Процедура ВыполнитьОбновлениеТиповыхПравилРегистрацииОбъектов(Отказ) Экспорт
	
	ВыполнитьОбновлениеТиповыхПравилДляОбменаДанными(Отказ, "ПравилаРегистрацииОбъектов", "ПравилаРегистрации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ОБМЕНА ДАННЫМИ

Процедура ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ,
														УзелИнформационнойБазы,
														ВыполнятьЗагрузку = Истина,
														ВыполнятьВыгрузку = Истина,
														ВидТранспортаСообщенийОбмена = Неопределено) Экспорт
	
	
	Если ВыполнятьЗагрузку Тогда
		
		// ЗАГРУЗКА ДАННЫХ
		ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, ВидТранспортаСообщенийОбмена);
		
	КонецЕсли;
	
	Если ВыполнятьВыгрузку Тогда
		
		// ВЫГРУЗКА ДАННЫХ
		ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, ВидТранспортаСообщенийОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет процесс обмена данными отдельно для каждой строки настройки обмена
// Процесс обмена данными состоит из двух стадий:
// - инициализация обмена - подготовка подсистемы обмена данными к процессу обмена
// - обмен данными        - процесс зачитывания файла сообщения с последующей загрузкой этих данных в ИБ 
//                          или выгрузки изменений в файл сообщения
// Стадия инициализации выполняется один раз за сеанс и сохраняется в кэше сеанса на сервере 
// до перезапуска сеанса или сброса повторно-используемых значений подсистемы обмена данными.
// Сброс повторно-используемых значений происходит при изменении данных, влияющих на процесс обмена данными
// (настройки транспорта, настройка выполнения обмена, настройка отборов на узлах планов обмена)
//
// Обмен может быть выполнен полностью для всех строк сценария,
// а может быть выполнен для отдельной строки ТЧ сценария обмена
//
// Параметры:
//  НастройкаВыполненияОбмена - СправочникСсылка.СценарииОбменовДанными - элемент справочника,
//                              по значениям реквизитов которого будет выполнен обмен данными
//  НомерСтроки               - Число - Номер строки по которой будет выполнен обмен данными.
//  Если не указан, то обмен данными будет выполнен для всех строк
// 
Процедура ВыполнитьОбменДаннымиПоСценариюОбменаДанными(НастройкаВыполненияОбмена, НомерСтроки = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка      КАК НастройкаВыполненияОбмена,
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ПроизводитьЗагрузкуДанных,
	|	ВЫБОР
	|		КОГДА НастройкиВыполненияОбменаНастройкиОбмена.ВыполняемоеДействие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных) ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ПроизводитьВыгрузкуДанных
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК НастройкиВыполненияОбменаНастройкиОбмена
	|ГДЕ
	|	НастройкиВыполненияОбменаНастройкиОбмена.Ссылка = &НастройкаВыполненияОбмена
	|	[УсловиеПоНомеруСтроки]
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки
	|";
	
	// устанавливаем привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	УсловиеПоНомеруСтроки = ?(НомерСтроки = Неопределено, "", "И НастройкиВыполненияОбменаНастройкиОбмена.НомерСтроки = &НомерСтроки");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеПоНомеруСтроки]", УсловиеПоНомеруСтроки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НастройкаВыполненияОбмена", НастройкаВыполненияОбмена);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
		СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбмена(Выборка.НастройкаВыполненияОбмена, Выборка.НомерСтроки);
		
		// если настройка невалидная, то обмен не производим; статус "Отменено"
		Если СтруктураНастроекОбмена.Отказ Тогда
			
			// фиксируем в ЖР лог по обмену данными
			ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
			Продолжить;
		КонецЕсли;
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
		СтруктураНастроекОбмена.ДатаНачала = ТекущаяДата();
		
		// добавляем в ЖР информацию о процессе обмена данными
		СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными по настройке [НастройкаВыполненияОбменаНаименование]'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[НастройкаВыполненияОбменаНаименование]", СтруктураНастроекОбмена.НастройкаВыполненияОбменаНаименование);
		ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
		
		// ОБМЕН ДАННЫМИ
		ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена);
		
		// фиксируем в ЖР лог по обмену данными
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
	КонецЦикла;
	
КонецПроцедуры

//

Функция ПолучитьСообщениеОбменаВоВременныйКаталог(Отказ, УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	Результат.Вставить("ИмяВременногоКаталогаСообщенийОбмена", "");
	Результат.Вставить("ИмяФайлаСообщенияОбмена",              "");
	Результат.Вставить("ИдентификаторФайлаПакетаДанных",       Неопределено);
	
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена);
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДата();
	
	// если настройка невалидная, то получение сообщения обмена не производим; статус "Отменено"
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		НСтрока = НСтр("ru = 'При инициализации обработки транспорта сообщений обмена возникли ошибки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	// создаем временный каталог
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		// получаем сообщение во временный каталог
		ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена <> Неопределено Тогда
		
		НСтрока = НСтр("ru = 'При получении сообщений обмена возникли ошибки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		
		// удаляем временный каталог и все его содержимое
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяВременногоКаталогаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяКаталогаСообщенияОбмена();
	Результат.ИмяФайлаСообщенияОбмена              = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
	Результат.ИдентификаторФайлаПакетаДанных       = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДатаФайлаСообщенияОбмена();
	
	Возврат Результат;
КонецФункции

// ЭКСПОРТНЫЕ ВНУТРЕННИЕ СВОЙСТВА

// Возвращает имя временного каталога для сообщений обмена данными
// Имя каталога соответствует шаблону:
// "Exchange82 {GUID}", 
// где GUID - строка уникального идентификатора
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка - имя временного каталога для сообщений обмена данными
//
Функция ИмяВременногоКаталогаСообщенийОбмена() Экспорт
	
	Возврат СтрЗаменить("Exchange82 {GUID}", "GUID", ВРег(Строка(Новый УникальныйИдентификатор)));
	
КонецФункции

Функция ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта) Экспорт
	
	Возврат СтрЗаменить("ТранспортСообщенийОбмена[ВидТранспорта]", "[ВидТранспорта]", ОбщегоНазначения.ИмяЗначенияПеречисления(ВидТранспорта));
	
КонецФункции

//

Процедура ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(Отказ, УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// если настройка невалидная, то обмен не производим; статус "Отменено"
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДата();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла: [УзелИнформационнойБазыНаименование]'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[УзелИнформационнойБазыНаименование]", СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ
	ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена <> Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена)
	
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
		// загрузка данных только при успешном получении сообщения обмена
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		// выгрузка данных
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ЗаписатьСообщенияСИзменениямиДляУзла(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
		// отправка сообщения обмена только в случае успешной выгрузки данных
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗаписатьСообщенияСИзменениямиДляУзла(СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда // конвертация объектов по правилам обмена
	
		// получаем инициализированную обработку обмена данными
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
		
		// выгрузка данных
		ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузкуДанных();
		
		Если ОбработкаОбменаДаннымиXML.ФлагОшибки() Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
		КонецЕсли;
		
		// фиксируем состояние выполнения обмена данными
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
	Иначе // конвертация объектов методами сериализации, предоставленными платформой (РИБ)
		
		Отказ = Ложь;
		
		// получаем обработку обмена данными
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// устанавливаем имя файла сообщения обмена, который необходимо прочитать
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
		
		ОбработкаОбменаДанными.ВыполнитьВыгрузкуДанных(Отказ);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает сообщение обмена с новыми данными и загружает данные в информационную базу
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда // конвертация объектов по правилам обмена
		
		// получаем инициализированную обработку обмена данными
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
		
		// загрузка данных
		ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузкуДанных();
		
		Если ОбработкаОбменаДаннымиXML.ФлагОшибки() Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
		КонецЕсли;
		
		// фиксируем состояние выполнения обмена данными
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
		СтруктураНастроекОбмена.РезультатОтложенныхДвиженийДокументов = ОбработкаОбменаДаннымиXML.РезультатВыполненияОтложенныхДвижений;
		
	Иначе // конвертация объектов платформенными методами сериализации
		
		Отказ = Ложь;
		
		// получаем обработку обмена данными
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// устанавливаем имя файла сообщения обмена, который необходимо прочитать
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
		
		ОбработкаОбменаДанными.ВыполнитьЗагрузкуДанных(Отказ);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТРАНСПОРТА СООБЩЕНИЙ ОБМЕНА

Процедура ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// получаем новое имя временного файла
	Если Не ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПередОбработкойСообщения() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// отправляем сообщение обмена из временного каталога
	Если Не ОбработкаТранспортаСообщенийОбмена.ОтправитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// получаем сообщение обмена во временный каталог
	Если Не ОбработкаТранспортаСообщенийОбмена.ПолучитьСообщение() Тогда
		
		ЗаписьЖурналаРегистрацииОбменаДанными(ОбработкаТранспортаСообщенийОбмена.СтрокаСообщенияОбОшибкеЖР, СтруктураНастроекОбмена, Истина);
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена)
	
	// получаем инициализированную обработку транспорта сообщений
	ОбработкаТранспортаСообщенийОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена;
	
	// выполняем действия после отправки сообщения
	ОбработкаТранспортаСообщенийОбмена.ВыполнитьДействияПослеОбработкиСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНУТРЕННИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, СтруктураНастроек, ВидТранспорта) Экспорт
	
	// создаем экземпляр объекта обработки
	ОбработкаОбъект = Обработки[ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта)].Создать();
	
	// инициализация свойств обработки переданными параметрами настроек
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураНастроек);
	
	// Инициализация транспорта обмена
	ОбработкаОбъект.Инициализация();
	
	// выполняем проверку подключения
	Если Не ОбработкаОбъект.ПодключениеУстановлено() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОбработкаОбъект.СтрокаСообщенияОбОшибке,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ФайлСообщенияОбменаСуществует(СтруктураНастроек, ВидТранспорта, ШаблонИмениФайлаСообщения) Экспорт
	
	// создаем экземпляр объекта обработки
	ОбработкаОбъект = Обработки[ИмяОбработкиТранспортаСообщенийОбмена(ВидТранспорта)].Создать();
	
	// инициализация свойств обработки переданными параметрами настроек
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект, СтруктураНастроек);
	
	ОбработкаОбъект.ШаблонИмениФайлаСообщения = ШаблонИмениФайлаСообщения;
	
	// Инициализация транспорта обмена
	ОбработкаОбъект.Инициализация();
	
	Возврат ОбработкаОбъект.ФайлСообщенияОбменаСуществует();
	
КонецФункции

Процедура СоздатьКаталогПриНеобходимости(Знач ИмяКаталога) Экспорт
	
	Попытка
		
		Каталог = Новый Файл(ИмяКаталога);
		
		Если Не Каталог.Существует() Тогда
			
			СоздатьКаталог(ИмяКаталога);
			
		КонецЕсли;
		
	Исключение
		СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция НовоеИмяКаталогаОбменаИнформацией() Экспорт
	
	// возвращаемое значение функции
	НовоеИмяКаталога = "";
	
	ТаблицаНомеровКаталога = Новый ТаблицаЗначений;
	ТаблицаНомеровКаталога.Колонки.Добавить("НомерКаталога", Новый ОписаниеТипов("Число"));
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ШаблонИмениКаталога = НСтр("ru = 'Каталог обмена'");
	
	МассивНайденныхФайлов = НайтиФайлы(КаталогВременныхФайлов, ШаблонИмениКаталога + "*");
	
	Для Каждого Файл ИЗ МассивНайденныхФайлов Цикл
		
		Если Не Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		НомерКаталога = СтрЗаменить(Файл.Имя, ШаблонИмениКаталога, "");
		НомерКаталога = СтрЗаменить(НомерКаталога, "(", "");
		НомерКаталога = СтрЗаменить(НомерКаталога, ")", "");
		
		Попытка
			НомерКаталога = Число(НомерКаталога);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТаблицаНомеровКаталога.Добавить().НомерКаталога = НомерКаталога;
		
	КонецЦикла;
	
	Если ТаблицаНомеровКаталога.Количество() > 0 Тогда
		
		ТаблицаНомеровКаталога.Сортировать("НомерКаталога Убыв");
		
		НовыйНомерКаталога = ТаблицаНомеровКаталога[0]["НомерКаталога"] + 1;
		
	Иначе
		
		НовыйНомерКаталога = 1;
		
	КонецЕсли;
	
	НовоеИмяКаталога = КаталогВременныхФайлов + ШаблонИмениКаталога + " (" + Формат(НовыйНомерКаталога, "ЧГ=0") + ")";
	
	Возврат НовоеИмяКаталога;
КонецФункции

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина".
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(ТекстСообщения, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	Возврат ОбменДаннымиПовтИсп.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
КонецФункции

// Добавляет одну запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений, в который необходимо добавить запись
// 
Процедура ДобавитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет запись в регистр сведений по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо создать менеджер записи и обновить запись
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо обновить запись
// 
Процедура ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, Знач ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем менеджер записи регистра
	МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			МенеджерЗаписи[Измерение.Имя] = СтруктураЗаписи[Измерение.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// считываем запись из базы данных
	МенеджерЗаписи.Прочитать();
	
	// заполняем значения свойств записи из переданной структуры
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураЗаписи);
	
	// записываем менеджер записи
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Удаляет набор записей в регистре по переданным значениям структуры
//
// Параметры:
//  СтруктураЗаписи - Структура - структура, по значениям которой необходимо удалить набор записей
//  ИмяРегистра     - Строка - имя регистра сведений, в котором необходимо удалить набор записей
// 
Процедура УдалитьНаборЗаписейВРегистреСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра);
	
	// записываем набор записей
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗагрузитьПравилаДляОбменаДанными(Отказ, Знач ИмяПланаОбмена, Знач ВидПравил, Знач ИмяМакетаПравил, Знач ИспользоватьФильтрВыборочнойРегистрацииОбъектов = Истина) Экспорт
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИмяПланаОбмена",  ИмяПланаОбмена);
	СтруктураЗаписи.Вставить("ВидПравил",       Перечисления.ВидыПравилДляОбменаДанными[ВидПравил]);
	СтруктураЗаписи.Вставить("ИмяМакетаПравил", ИмяМакетаПравил);
	СтруктураЗаписи.Вставить("ИсточникПравил",  Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации);
	СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", ИспользоватьФильтрВыборочнойРегистрацииОбъектов);
	
	// получаем набор записей регистра
	НаборЗаписей = СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, "ПравилаДляОбменаДанными");
	
	// добавляем только одну запись в новый набор записей
	НоваяЗапись = НаборЗаписей.Добавить();
	
	// заполняем значения свойств записи из структуры
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);
	
	// Загружаем правила для обмена данными в ИБ
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НаборЗаписей[0]);
	
	Если Не Отказ Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеТиповыхПравилДляОбменаДанными(Отказ, ВидПравил, ИмяМакетаПравил)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена,
	|	ПравилаДляОбменаДанными.ИспользоватьФильтрВыборочнойРегистрацииОбъектов
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил      = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.#ВидПравил#)
	|	И ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.МакетКонфигурации)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВидПравил#", ВидПравил);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗагрузитьПравилаДляОбменаДанными(Отказ, Выборка.ИмяПланаОбмена, ВидПравил, ИмяМакетаПравил, Выборка.ИспользоватьФильтрВыборочнойРегистрацииОбъектов);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает набор записей регистра сведений по переданным значениям структуры. Добавляет одну запись в набор
//
// Параметры:
//  СтруктураЗаписи - Структура - структура по значениям которой необходимо создать набор записей и заполнить этот набор
//  ИмяРегистра     - Строка - имя регистра сведений
// 
Функция СоздатьНаборЗаписейРегистраСведений(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписей;
КонецФункции

// Получает список транспортов сообщений обмена определенных в конфигурации
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокЗначений - список транспортов сообщений обмена определенных в конфигурации
// 
Функция СписокВидовТранспортаСообщенийОбмена() Экспорт
	
	Список = Новый СписокЗначений;
	
	ВидыТранспортаСообщенийОбмена = Метаданные.Перечисления.ВидыТранспортаСообщенийОбмена.ЗначенияПеречисления;
	
	Для Каждого Элемент ИЗ ВидыТранспортаСообщенийОбмена Цикл
		
		Список.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена[Элемент.Имя], Элемент.Синоним);
		
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

Функция ИндексКартинкиТаблицыИнформацииСтатистики(Знач КоличествоОбъектовНесопоставленных, Знач ДанныеУспешноЗагружены) Экспорт
	
	Возврат ?(ДанныеУспешноЗагружены = Истина, 2, ?(КоличествоОбъектовНесопоставленных = 0, 0, 1));
	
КонецФункции

Функция ПравилаКонвертацииОбъектовДляПланаОбменаЗагружены(Знач ИмяПланаОбмена) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|	И ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция РазмерСообщенияОбменаПревышаетДопустимый(Знач ИмяФайла, Знач МаксимальныйДопустимыйРазмерСообщения) Экспорт
	
	// возвращаемое значение функции
	Результат = Ложь;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() И Файл.ЭтоФайл() Тогда
		
		Если МаксимальныйДопустимыйРазмерСообщения <> 0 Тогда
			
			РазмерПакета = Окр(Файл.Размер() / 1024, 0, РежимОкругления.Окр15как20);
			
			Если РазмерПакета > МаксимальныйДопустимыйРазмерСообщения Тогда
				
				СтрокаСообщения = НСтр("ru = 'Размер исходящего пакета составил [РазмерПакета] Кбайт, что превышает допустимое ограничение [ДопустимыйРазмер] Кбайт.'");
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[РазмерПакета]",     Строка(РазмерПакета));
				СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ДопустимыйРазмер]", Строка(МаксимальныйДопустимыйРазмерСообщения));
				
				СообщитьОбОшибке(СтрокаСообщения, Результат);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВСПОМОГАТЕЛЬНЫЕ

Процедура ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(УзелИнформационнойБазы, ЭлементФормы) Экспорт
	
	ИспользуемыеТранспорты = ПланыОбмена[ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)].ИспользуемыеТранспортыСообщенийОбмена();
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из ИспользуемыеТранспорты Цикл
		
		ЭлементФормы.СписокВыбора.Добавить(Элемент, Строка(Элемент));
		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует что обмен был произведен и фиксирует информацию в протоколе
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена)
	
	// статус "Неопределено" в конце обмена свидетельствует об успешном выполнении обмена
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	// формируем итоговое сообщение для протокола
	СтрокаСообщения = НСтр("ru = '[РезультатВыполненияОбмена], [ДействиеПриОбмене]; Обработано [КоличествоОбъектовОбработано] объектов'");
	
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[РезультатВыполненияОбмена]", СтруктураНастроекОбмена.РезультатВыполненияОбмена);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ДействиеПриОбмене]", СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[КоличествоОбъектовОбработано]", СтруктураНастроекОбмена.КоличествоОбъектовОбработано);
	
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	СтруктураНастроекОбмена.ДатаОкончания = ТекущаяДата();
	
	// фиксируем состояние обмена в РС
	ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена);
	
	// если обмен данными был успешно выполнен
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
		
		ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Фиксирует состояние обмена данными в регистре сведений СостояниеОбменовДанными
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
// 
Процедура ЗафиксироватьЗавершениеОбменаВРегистреСведений(СтруктураНастроекОбмена)
	
	// создаем структуру для новой записи в РС
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы",    СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",         СтруктураНастроекОбмена.ДействиеПриОбмене);
	
	СтруктураЗаписи.Вставить("РезультатВыполненияОбмена", СтруктураНастроекОбмена.РезультатВыполненияОбмена);
	СтруктураЗаписи.Вставить("ДатаНачала",                СтруктураНастроекОбмена.ДатаНачала);
	СтруктураЗаписи.Вставить("ДатаОкончания",             СтруктураНастроекОбмена.ДатаОкончания);
	
	// добавляем запись в РС
	РегистрыСведений.СостояниеОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ЗафиксироватьУспешныйОбменДаннымиВРегистреСведений(СтруктураНастроекОбмена)
	
	// создаем структуру для новой записи в РС
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", СтруктураНастроекОбмена.УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ДействиеПриОбмене",      СтруктураНастроекОбмена.ДействиеПриОбмене);
	СтруктураЗаписи.Вставить("ДатаОкончания",          СтруктураНастроекОбмена.ДатаОкончания);
	
	// добавляем запись в РС
	РегистрыСведений.СостояниеУспешныхОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОПравилах(Отказ, АдресВременногоХранилища, СтрокаИнформацииОПравилах) Экспорт
	
	РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьИнформациюОПравилах(Отказ, АдресВременногоХранилища, СтрокаИнформацииОПравилах);
	
КонецПроцедуры

Процедура УстановитьКоличествоСтрокТаблицы(Таблица, КоличествоСтрок) Экспорт
	
	Пока Таблица.Количество() < КоличествоСтрок Цикл
		
		Таблица.Добавить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииОбменаДанными(Комментарий, СтруктураНастроекОбмена, ЭтоОшибка = Ложь) Экспорт
	
	Уровень = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, Уровень,,, Комментарий);
	
КонецПроцедуры

// Проверяет состав полей таблицы значений в соответствии с составом полей таблицы-шаблона
// Если колонка в таблице отсутствует, то она будет добавлена из таблицы-шаблона
// Новые колонки добавляются; удаленные колонки в таблиц-шаблоне не удаляются из таблицы
//
// Параметры:
//  Таблица       - ТаблицаЗначений; ДеревоЗначений - таблица в которую будет добавлена колонка при необходимости
//  ТаблицаШаблон - ТаблицаЗначений; ДеревоЗначений - таблица-шаблон, которая используется для сопоставления колонок
// 
Процедура ПроверитьСоставПолейТаблицыЗначений(Таблица, ТаблицаШаблон)
	
	Для Каждого КолонкаТаблицыШаблона Из ТаблицаШаблон.Колонки Цикл
		
		Если Таблица.Колонки.Найти(КолонкаТаблицыШаблона.Имя) = Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(Таблица.Колонки.Добавить(), КолонкаТаблицыШаблона);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Распаковывает файл архива ZIP в указанный каталог; Извлекает все файлы архива
//
// Параметры:
//  ПолноеИмяФайлаАрхива  - Строка - имя файла архива, который необходимо распаковать
//  ПутьРаспаковкиФайлов  - Строка - путь по которому необходимо распаковать файлы
//  ПарольАрхива          - Строка - пароль для распаковки архива. По умолчанию пустая строка
// 
// Возвращаемое значение:
//  Результат - Булево - Истина, если успешно, Ложь, если нет.
Функция РаспаковатьZipФайл(Знач ПолноеИмяФайлаАрхива, Знач ПутьРаспаковкиФайлов, Знач ПарольАрхива = "") Экспорт
	
	// возвращаемое значение функции
	Результат = Истина;
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПолноеИмяФайлаАрхива, ПарольАрхива);
		
	Исключение
		Архиватор = Неопределено;
		СообщитьОбОшибке(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		
		Архиватор.ИзвлечьВсе(ПутьРаспаковкиФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при распаковке файлов архива: [ПолноеИмяФайлаАрхива] в каталог: [ПутьРаспаковкиФайлов]'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПолноеИмяФайлаАрхива]", ПолноеИмяФайлаАрхива);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПутьРаспаковкиФайлов]", ПутьРаспаковкиФайлов);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		
		Результат = Ложь;
	КонецПопытки;
	
	Архиватор.Закрыть();
	Архиватор = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Функция НаборЗаписейРегистраПустой(СтруктураЗаписи, ИмяРегистра) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	// создаем набор записей регистра
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	
	// устанавливаем отбор по измерениям регистра
	Для Каждого Измерение ИЗ МетаданныеРегистра.Измерения Цикл
		
		// если задано значение в структуре, то отбор устанавливаем
		Если СтруктураЗаписи.Свойство(Измерение.Имя) Тогда
			
			НаборЗаписей.Отбор[Измерение.Имя].Установить(СтруктураЗаписи[Измерение.Имя]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей.Количество() = 0;
	
КонецФункции

Функция КоличествоЗаписейВТаблицеБазыДанных(Знач ИмяТаблицы) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

Функция КоличествоЗаписейВоВременнойТаблицеБазыДанных(Знач ИмяТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Количество(*) КАК Количество
	|ИЗ
	|	#ИмяТаблицы
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяТаблицы", ИмяТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка["Количество"];
	
КонецФункции

Функция ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене) Экспорт
	
	ИмяПланаОбмена     = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	КодУзлаПланаОбмена = ОбщегоНазначения.ПолучитьЗначениеРеквизита(УзелИнформационнойБазы, "Код");
	
	КлючСообщения = "Обмен данными.[ИмяПланаОбмена].Узел [КодУзла].[ДействиеПриОбмене]";
	
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[КодУзла]",           КодУзлаПланаОбмена);
	КлючСообщения = СтрЗаменить(КлючСообщения, "[ДействиеПриОбмене]", ДействиеПриОбмене);
	
	Возврат КлючСообщения;
	
КонецФункции

Функция ПолучитьКлючСообщенияЖурналаРегистрацииПоСтрокеДействия(УзелИнформационнойБазы, ДействиеПриОбменеСтрокой) Экспорт
	
	Возврат ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене[ДействиеПриОбменеСтрокой]);
	
КонецФункции

Функция ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы, Знач ДействиеПриОбмене) Экспорт
	
	Если ТипЗнч(ДействиеПриОбмене) = Тип("Строка") Тогда
		
		ДействиеПриОбмене = Перечисления.ДействияПриОбмене[ДействиеПриОбмене];
		
	КонецЕсли;
	
	СостояниеОбменовДанными = РегистрыСведений.СостояниеОбменовДанными.СостояниеОбменовДанными(УзелИнформационнойБазы, ДействиеПриОбмене);
	
	Отбор = Новый Структура;
	Отбор.Вставить("СобытиеЖурналаРегистрации", ПолучитьКлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене));
	Отбор.Вставить("ДатаНачала",                СостояниеОбменовДанными.ДатаНачала);
	Отбор.Вставить("ДатаОкончания",             СостояниеОбменовДанными.ДатаОкончания);
	
	Возврат Отбор;
КонецФункции

Функция РольДоступнаДобавлениеИзменениеОбменовДанными() Экспорт
	
	Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)
		ИЛИ РольДоступна(Метаданные.Роли.ДобавлениеИзменениеОбменовДанными);
	
КонецФункции

Функция ИмяФайлаСообщенияОбмена(КодУзлаОтправителя, КодУзлаПолучателя) Экспорт
	
	ШаблонИмени = "[Префикс]_[УзелОтправитель]_[УзелПолучатель]";
	
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[Префикс]",         "Message");
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелОтправитель]", КодУзлаОтправителя);
	ШаблонИмени = СтрЗаменить(ШаблонИмени, "[УзелПолучатель]",  КодУзлаПолучателя);
	
	Возврат ШаблонИмени;
КонецФункции

Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит ИЗ СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = ИмяРеквизита Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ВсеТранспортыСообщенийОбменаКонфигурации() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Перечисления.ВидыТранспортаСообщенийОбмена Цикл
		
		Результат.Добавить(Элемент);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИНИЦИАЛИЗАЦИИ СЕАНСА

// Получает массив всех планов обмена по которым выполняется обмен данными
// Наличие обмена с каким либо планом обмена определяется по наличию у этого плана обмена узлов кроме предопределенного.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  МассивПлановОбмена - Массив - массив строк (имен) всех планов обмена по которым выполняется обмен данными
//
Функция ПолучитьИспользуемыеПланыОбмена() Экспорт
	
	// возвращаемое значение
	МассивПлановОбмена = Новый Массив;
	
	// список всех узлов в конфигурации
	СписокПлановОбмена = ОбменДаннымиПовтИсп.ПолучитьСписокПлановОбменаКонфигурации();
	
	Для Каждого Элемент ИЗ СписокПлановОбмена Цикл
		
		ИмяПланаОбмена = Элемент.Значение;
		
		Если Не ПланОбменаНеСодержитУзлов(ИмяПланаОбмена) Тогда
			
			МассивПлановОбмена.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПлановОбмена;
	
КонецФункции

// Получает таблицу правил регистрации объектов из информационной базы
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил регистрации объектов для МРО
// 
Функция ПолучитьПравилаРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	ПравилаРегистрацииОбъектов = ИнициализацияТаблицыПравилРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ПравилаРегистрацииОбъектов, Выборка.ПравилаЗачитанные.Получить());
		
	КонецЦикла;
	
	Возврат ПравилаРегистрацииОбъектов;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из информационной базы
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ПравилаВыборочнойРегистрацииОбъектов - ТаблицаЗначений - таблица общих правил выборочной регистрации объектов для МРО
// 
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектов() Экспорт
	
	// возвращаемое значение функции
	ПравилаВыборочнойРегистрацииОбъектов = ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные КАК ПравилаЗачитанные
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	  ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)
	|	И ПравилаДляОбменаДанными.ИспользоватьФильтрВыборочнойРегистрацииОбъектов
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПравилОбмена = Выборка.ПравилаЗачитанные.Получить();
		
		ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ПравилаВыборочнойРегистрацииОбъектов, СтруктураПравилОбмена["ПравилаВыборочнойРегистрацииОбъектов"]);
		
	КонецЦикла;
	
	Возврат ПравилаВыборочнойРегистрацииОбъектов;
	
КонецФункции

Функция ИнициализацияТаблицыПравилРегистрацииОбъектов()
	
	// возвращаемое значение функции
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("ОбъектМетаданныхИмя",     Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ТекстЗапроса",            Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СвойстваОбъекта",         Новый ОписаниеТипов("Структура"));
	
	Колонки.Добавить("ТекстЗапросаПоСвойствамСсылкиПРОБ", Новый ОписаниеТипов("Строка"));
	
	// признаки того, что правила пустые
	Колонки.Добавить("ПравилоПоСвойствамОбъектаПустое", Новый ОписаниеТипов("Булево"));
	
	// обработчики событий
	Колонки.Добавить("ПередОбработкой", Новый ОписаниеТипов("Строка"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкой", Новый ОписаниеТипов("Булево"));
	
	Колонки.Добавить("ОтборПоСвойствамОбъекта", Новый ОписаниеТипов("ДеревоЗначений"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ОбъектМетаданныхИмя");
	
	Возврат Правила;
	
КонецФункции

Функция ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов()
	
	// возвращаемое значение функции
	Правила = Новый ТаблицаЗначений;
	
	Колонки = Правила.Колонки;
	
	Колонки.Добавить("Порядок",                        Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                     Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяПланаОбмена",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",              Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыРегистрации",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовРегистрации", Новый ОписаниеТипов("Структура"));
	
	// добавляем индекс
	Правила.Индексы.Добавить("ИмяПланаОбмена, ИмяОбъекта");
	
	Возврат Правила;
	
КонецФункции

Функция ПланОбменаНеСодержитУзлов(Знач ИмяПланаОбмена)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Ссылка <> &ЭтотУзел
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	Возврат Запрос.Выполнить().Пустой()
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначенийПРО(ТаблицаПриемник, ТаблицаИсточник)
	
	ТаблицаШаблон = Обработки.ЗагрузкаПравилРегистрацииОбъектов.ИнициализацияТаблицыОтборПоСвойствамОбъекта();
	
	Для Каждого СтрокаИсточника ИЗ ТаблицаИсточник Цикл
		
		ПроверитьСоставПолейТаблицыЗначений(СтрокаИсточника.ОтборПоСвойствамОбъекта, ТаблицаШаблон);
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствДляТаблицыЗначений(ТаблицаПриемник, ТаблицаИсточник)
	
	Для Каждого СтрокаИсточника ИЗ ТаблицаИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПриемник.Добавить(), СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПА ОБЪЕКТА МЕТАДАННЫХ

Функция ЭтоДокумент(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Документы.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоСправочник(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Справочники.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоКонстанта(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Константы.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрСведений(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрНакопления(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрБухгалтерии(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоРегистрРасчета(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоБизнесПроцесс(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных);
	
КонецФункции

Функция ЭтоЗадача(ОбъектМетаданных) Экспорт
	
	Возврат Метаданные.Задачи.Содержит(ОбъектМетаданных);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБМЕНА ДАННЫМИ ПОД ПОЛНЫМИ ПРАВАМИ

// Находит регламентное задание по GUID
//
// Параметры:
//  УникальныйНомерЗадания - Строка - строка с GUID регламентного задания
// 
// Возвращаемое значение:
//  Неопределено               - если поиск регламентного задания по GUID не дал результатов
//  ТекущееРегламентноеЗадание - РегламентноеЗадание - найденное по GUID регламентное задание
//
Функция НайтиРегламентноеЗаданиеПоПараметру(УникальныйНомерЗадания) Экспорт
	
	// возвращаемое значение функции
	РегламентноеЗадание = Неопределено;
	
	Если ПустаяСтрока(УникальныйНомерЗадания) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УникальныйНомерЗадания));
		
	Исключение
		
		РегламентноеЗадание = Неопределено;
		
	КонецПопытки;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

// Обновляет/устанавливает повторно-используемые значения и параметры сеанса для подсистемы обмена данными
//
// Устанавливаемые параметры сеанса:
//   ОбменДаннымиВключен         - Булево - флаг, который показывает следует или нет использовать обмен данными в конфигурации.
//                                Определяется косвенным образом по факту наличия обмена данными хотя бы с одним планом обмена.
//                                Наличие обмена с каким либо планом обмена определяется по наличию у этого плана обмена узлов
//                                кроме предопределенного.
//   ИспользуемыеПланыОбмена    - ФиксированныйМассив - массив с именами планов обмена для которых используется обмен.
//   ПравилаРегистрацииОбъектов - ХранилищеЗначения - в бинарном виде содержит таблицу значений с правилами регистрации объектов.
//   ПравилаВыборочнойРегистрацииОбъектов - 
//   ДатаОбновленияПовторноИспользуемыхЗначенийМРО - Дата (Дата и время) - содержит дату последнего актуального
//                                                                         кэша для подсистемы обмена данными
//
// Параметры:
//  Нет.
// 
Процедура ОбновитьПовторноИспользуемыеЗначенияМРО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновляем повторно используемые значения
	ОбновитьПовторноИспользуемыеЗначения();
	
	// получаем планы обмена конфигурации, которые используются при обмене
	ИспользуемыеПланыОбмена = ПолучитьИспользуемыеПланыОбмена();
	
	// флаг включения механизма обмена данными
	ОбменДаннымиВключен = (ИспользуемыеПланыОбмена.Количество() <> 0);
	
	// устанавливаем параметр сеанса ОбменДаннымиВключен
	ПараметрыСеанса.ОбменДаннымиВключен = ОбменДаннымиВключен;
	
	// устанавливаем параметр сеанса ИспользуемыеПланыОбмена
	ПараметрыСеанса.ИспользуемыеПланыОбмена = Новый ФиксированныйМассив(ИспользуемыеПланыОбмена);
	
	// получаем таблицу правил регистрации из ИБ
	ПравилаРегистрацииОбъектов = ПолучитьПравилаРегистрацииОбъектов();
	
	// устанавливаем параметр сеанса ПравилаРегистрацииОбъектов
	ПараметрыСеанса.ПравилаРегистрацииОбъектов = Новый ХранилищеЗначения(ПравилаРегистрацииОбъектов);
	
	// устанавливаем параметр сеанса ПравилаВыборочнойРегистрацииОбъектов
	ПравилаВыборочнойРегистрацииОбъектов = ПолучитьПравилаВыборочнойРегистрацииОбъектов();
	
	ПараметрыСеанса.ПравилаВыборочнойРегистрацииОбъектов = Новый ХранилищеЗначения(ПравилаВыборочнойРегистрацииОбъектов);
	
	// КЛЮЧ ДЛЯ ПРОВЕРКИ АКТУАЛЬНОСТИ КЭША
	
	// устанавливаем актуальную дату обновления кеша МРО
	АктуальнаяДата = ПолучитьФункциональнуюОпцию("АктуальнаяДатаОбновленияПовторноИспользуемыхЗначенийМРО");
	
	ПараметрыСеанса.ДатаОбновленияПовторноИспользуемыхЗначенийМРО = АктуальнаяДата;
	
КонецПроцедуры

// Устанавливает значение константы ДатаОбновленияПовторноИспользуемыхЗначенийМРО
// В качестве устанавливаемого значения используется текущая дата компьютера (сервера)
// В момент изменения значения этой константы повторно-используемые значения 
// для подсистемы обмена данными становятся не актуальными и требуют повторной инициализации.
//
// Параметры:
//  Нет.
// 
Процедура УстановитьДатуОбновленияПовторноИспользуемыхЗначенийМРО() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО.Установить(ТекущаяДата());
	
КонецПроцедуры

// Устанавливает параметры сеанса подсистемы обмена данными
//
// Параметры:
//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить
//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса
// 
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если НЕ    (ИмяПараметра = "ДатаОбновленияПовторноИспользуемыхЗначенийМРО"
			ИЛИ ИмяПараметра = "ОбменДаннымиВключен" 
			ИЛИ ИмяПараметра = "ИспользуемыеПланыОбмена" 
			ИЛИ ИмяПараметра = "ПравилаВыборочнойРегистрацииОбъектов"
			ИЛИ ИмяПараметра = "ПравилаРегистрацииОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// процедура обновления повторно-используемых значений и параметров сеанса
	ОбновитьПовторноИспользуемыеЗначенияМРО();
	
	// зарегистрируем имена параметров, которые установлены при 
	// выполнении ОбновитьПовторноИспользуемыеЗначенияМРО
	УстановленныеПараметры.Добавить("ОбменДаннымиВключен");
	УстановленныеПараметры.Добавить("ИспользуемыеПланыОбмена");
	УстановленныеПараметры.Добавить("ПравилаВыборочнойРегистрацииОбъектов");
	УстановленныеПараметры.Добавить("ПравилаРегистрацииОбъектов");
	УстановленныеПараметры.Добавить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОНСТАНТЫ ПОДСИСТЕМЫ ОБМЕНА ДАННЫМИ

Функция СтрокаНеограниченнойДлины() Экспорт
	
	Возврат "Строка(Неогр)";
	
КонецФункции

Функция ЭлементОтбораСвойствоЗначениеКонстанты() Экспорт
	
	Возврат "ЗначениеКонстанты";
	
КонецФункции

Функция ЭлементОтбораСвойствоАлгоритмЗначения() Экспорт
	
	Возврат "АлгоритмЗначения";
	
КонецФункции
