// Возвращает сумму документа 
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа
// ЦенаВключаетНДС - Признак включения НДС в цену документа
//
// Возвращаемое значение:
// Число
// Сумма документа с учетом НДС
//
Функция ПолучитьСуммуДокумента(Знач Товары, ИмяКолонки = "Сумма") Экспорт
	СуммаДокумента = Товары.Итог(ИмяКолонки);
	//, Знач СуммаСоСкидкой
	//Если Не СуммаДокумента Тогда
	//	СуммаДокумента = СуммаДокумента - Товары.Итог("СуммаСкидки");
	//КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции // ПолучитьСуммуДокумента()

Функция ЗаполнитьОсновныеЗначения(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиПользователей.Настройка,
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь";
	//20,01,2011	
	ОсновнойОтветственный = АвторизованныйПользователь();
	//Запрос.УстановитьПараметр("Пользователь", АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Пользователь", ОсновнойОтветственный);
	//20,01,2011	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
			Если Объект.Свойство("Организация") и не ЗначениеЗаполнено(Объект.Организация) тогда
				Объект.Организация = Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяВалюта Тогда
			Если Объект.Свойство("ВалютаДокумента") и не ЗначениеЗаполнено(Объект.ВалютаДокумента) тогда
				Объект.ВалютаДокумента = Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяВалюта Тогда
			Если Объект.Свойство("Валюта")  и не ЗначениеЗаполнено(Объект.Валюта) тогда
				Объект.Валюта = Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
		//20,01,2011
		//Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойОтветственный Тогда
		//	Если Объект.Свойство("Ответственный") тогда
		//		Объект.Ответственный = Выборка.Значение;
		//	КонецЕсли;
		//КонецЕсли;
		Если ЗначениеЗаполнено(ОсновнойОтветственный) Тогда
			//ИЗМЕНЕНО Евгений(Начало 31.01.2011
			Если Объект.Свойство("Ответственный") тогда
				Объект.Ответственный = ОсновнойОтветственный;
			КонецЕсли;
			//Окончание)Евгений
			Если ЗначениеЗаполнено(ОсновнойОтветственный.ТекущееПодразделение) тогда
				Если Объект.Свойство("Подразделение") тогда
					Объект.Подразделение = ОсновнойОтветственный.ТекущееПодразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение Тогда
		//	Если Объект.Свойство("Подразделение") тогда
		//		Объект.Подразделение = Выборка.Значение;
		//	КонецЕсли;
		//КонецЕсли;
		//20,01,2011		
		Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойСклад Тогда
			Если Объект.Свойство("Склад")  и не ЗначениеЗаполнено(Объект.Склад) тогда
				Объект.Склад = Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
		Если Выборка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойТипЦен Тогда
			Если Объект.Свойство("ТипЦен")  и не ЗначениеЗаполнено(Объект.ТипЦен) тогда
				Объект.ТипЦен = Выборка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Функция АвторизованныйПользователь возвращает
// текущего пользователя сеанса.
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи.
// 
Функция АвторизованныйПользователь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь), ПараметрыСеанса.ТекущийПользователь, ПараметрыСеанса.ТекущийВнешнийПользователь);
	
КонецФункции

Функция ПолучитьРеквизитОбъекта(Объект, НаименованиеРеквизита) Экспорт
	Возврат Объект[НаименованиеРеквизита];
КонецФункции

Функция ПолучитьСтруктуруОбъекта(Объект, Структура) Экспорт
	ВозращаемаяСтруктура = Новый Структура;
	Для Каждого Поля из Структура Цикл
		ВозращаемаяСтруктура.Вставить(Поля.Ключ,Объект[Поля.Значение]); 
	КонецЦикла;
	Возврат ВозращаемаяСтруктура;
КонецФункции

Функция ПолучитьЗначениеНастройкиПользователя(Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка";
	
	Запрос.УстановитьПараметр("Пользователь", АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Настройка", Настройка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Значение;		
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции


//&НаСервере
//Процедура УдалениеАвтоРезерва(Форма) Экспорт 
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	|	АвторезервированиеВПодборе.IDВладельца,
//	|	АвторезервированиеВПодборе.Подразделение,
//	|	АвторезервированиеВПодборе.Номенклатура,
//	|	АвторезервированиеВПодборе.СерияНоменклатуры,
//	|	АвторезервированиеВПодборе.ДокументПоступления,
//	|	АвторезервированиеВПодборе.Количество,
//	|	АвторезервированиеВПодборе.Пользователь
//	|ИЗ
//	|	РегистрСведений.АвторезервированиеВПодборе КАК АвторезервированиеВПодборе
//	|ГДЕ
//	|	АвторезервированиеВПодборе.IDВладельца = &IDВладельца";
//	
//	Запрос.УстановитьПараметр("IDВладельца", Форма.УникальныйИдентификатор);
//	
//	Результат = Запрос.Выполнить();
//	Выборка = Результат.Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Запись = РегистрыСведений.АвторезервированиеВПодборе.СоздатьМенеджерЗаписи();
//		Запись.IDВладельца = Выборка.IDВладельца;
//		Запись.Подразделение = Выборка.Подразделение;
//		Запись.Номенклатура = Выборка.Номенклатура;
//		Запись.СерияНоменклатуры = Выборка.СерияНоменклатуры;
//		Запись.ДокументПоступления = Выборка.ДокументПоступления;
//		
//		Запись.Удалить();
//		
//	КонецЦикла;
//	
//	
//	
//	
//КонецПроцедуры

//Функция НаличиеНеобходимыхДокументов(Дата, Контрагент) Экспорт
//	Если Не ЗначениеЗаполнено(Контрагент.НомерЛицензии) тогда
//		Возврат "У контрагента отсутствует лицензия";
//	КонецЕсли;
//	Если Контрагент.СрокДействияЛицензии < Дата тогда
//		Возврат "Срок действия лицензии контрагента истёк";
//	КонецЕсли;
//	Если Контрагент.ДокументыКонтрагента.Итог("ВНаличии") <> Контрагент.ДокументыКонтрагента.количество() 	тогда
//		Возврат "У контрагента не все документы в наличии";
//	КонецЕсли;
//	Возврат "";
//КонецФункции

//Функция КИЛТОПроверка(Дата, Организация, Контрагент, ДоговорКонтрагента, СуммаДокумента, ИсключаемаяРеализация, СуммаПредоплаты = 0) Экспорт
//	Если ЗначениеЗаполнено(Дата) тогда
//		НаДату = КонецДня(Дата);
//	Иначе
//		НаДату = ТекущаяДата();
//	КонецЕсли;
//	РезультирующаяСтрока = "";
//	ВалютаУпр = Константы.ВалютаРегламентированногоУчета.Получить();
//	
//	ТЗЗадолженности = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(Дата, Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Организация, Контрагент, ДоговорКонтрагента), "Организация, Контрагент, ДоговорКонтрагента", "СуммаУпр"); 
//	Если ТЗЗадолженности.Количество() > 0 тогда
//		СуммаЗадолженности = - ТЗЗадолженности[0].СуммаУпр;
//	Иначе
//		СуммаЗадолженности = 0;
//	КонецЕсли;
//	
//	//Если СуммаЗадолженности < 0 тогда
//	//	РезультирующаяСтрока = "Долг организации перед контрагентом составляет " + Строка(-СуммаЗадолженности) +" "+ Строка(ВалютаУпр)+".";
//	//Иначе
//	//	РезультирующаяСтрока = "Долг контрагента перед организацией составляет " + Строка(СуммаЗадолженности) +" "+ Строка(ВалютаУпр)+".";
//	//КонецЕсли;
//	
//	КредитныйЛимит = РегистрыСведений.КредитныеСтавкиИЛимиты.ПолучитьПоследнее(НаДату, Новый Структура("Контрагент", Контрагент)).Лимит;	
//	
//	//Если СуммаЗадолженности < 0 тогда
//	//	ОстатокКредитногоЛимита = КредитныйЛимит - СуммаЗадолженности ;
//	//Иначе
//	ОстатокКредитногоЛимита = КредитныйЛимит - СуммаЗадолженности;
//	//КонецЕсли;
//	//
//	//Если СуммаДокумента * ПроцентПредоплаты /100 > ИсключаемаяРеализация.ОплаченоПоПредоплате тогда                        //?(ИсключаемаяРеализация.Проведен, СуммаДокумента - СуммаЗадолженности , - СуммаЗадолженности)
//	//	РезультирующаяСтрока = "Нет предоплаты по заказу";
//	//	Возврат  РезультирующаяСтрока;
//	//КонецЕсли;
//	
//	
//	//РезультирующаяСтрока = РезультирующаяСтрока + " При кредитном лимите "+ Строка(КредитныйЛимит) +" "+ Строка(ВалютаУпр)+ ", остаток кредитного лимита составляет " + Строка(ОстатокКредитногоЛимита) +" "+ Строка(ВалютаУпр) + "."; 
//	Если СуммаПредоплаты > ОстатокКредитногоЛимита тогда
//		РезультирующаяСтрока = "Сумма предоплаты привышает остаток кредитного лимита";
//		Возврат  РезультирующаяСтрока;
//	КонецЕсли;	
//	
//	
//	Запрос = Новый Запрос;
//	Если ДоговорКонтрагента.ВидРасчетов = Перечисления.ВидыВзаимоРасчетов.ПоЗаказам тогда	
//		//Запрос.Текст = "ВЫБРАТЬ
//		//|	ВложенныйЗапрос.Реализация,
//		//|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
//		//|	ВложенныйЗапрос.СуммаЗадолженности
//		//|ИЗ
//		//|	(ВЫБРАТЬ
//		//|		Реализации.Реализация КАК Реализация,
//		//|		Реализации.СрокОплаты КАК СрокОплаты,
//		//|		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
//		//|	ИЗ
//		//|		(ВЫБРАТЬ
//		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
//		//|			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
//		//|			РеализацияТоваровУслуг.Ссылка КАК Реализация
//		//|		ИЗ
//		//|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//		//|		ГДЕ
//		//|			РеализацияТоваровУслуг.Проведен = ИСТИНА
//		//|			И РеализацияТоваровУслуг.Организация = &Организация
//		//|			И РеализацияТоваровУслуг.Контрагент = &Контрагент
//		//|			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
//		//|			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
//		//|			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
//		//|		
//		//|		СГРУППИРОВАТЬ ПО
//		//|			РеализацияТоваровУслуг.Ссылка,
//		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
//		//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
//		//|				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
//		//|			ИЗ
//		//|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
//		//|						&НаДату,
//		//|						Организация = &Организация
//		//|							И Контрагент = &Контрагент
//		//|							И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстатки
//		//|			ГДЕ
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
//		//|				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
//		//|			
//		//|			СГРУППИРОВАТЬ ПО
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
//		//|			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
//		//|	
//		//|	СГРУППИРОВАТЬ ПО
//		//|		Реализации.СрокОплаты,
//		//|		Реализации.Реализация) КАК ВложенныйЗапрос
//		//|ГДЕ
//		//|	ВложенныйЗапрос.СуммаЗадолженности > 0
//		//|
//		//|УПОРЯДОЧИТЬ ПО
//		//|	СрокОплаты";
//		
//				Запрос.Текст = "ВЫБРАТЬ
//							   |	ВложенныйЗапрос.Реализация,
//							   |	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
//							   |	ВложенныйЗапрос.СуммаЗадолженности
//							   |ИЗ
//							   |	(ВЫБРАТЬ
//							   |		Реализации.Реализация КАК Реализация,
//							   |		Реализации.СрокОплаты КАК СрокОплаты,
//							   |		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
//							   |	ИЗ
//							   |		(ВЫБРАТЬ
//							   |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
//							   |			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
//							   |			РеализацияТоваровУслуг.Ссылка КАК Реализация
//							   |		ИЗ
//							   |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//							   |		ГДЕ
//							   |			РеализацияТоваровУслуг.Проведен = ИСТИНА
//							   |			И РеализацияТоваровУслуг.Организация = &Организация
//							   |			И РеализацияТоваровУслуг.Контрагент = &Контрагент
//							   |			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
//							   |			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
//							   |		
//							   |		СГРУППИРОВАТЬ ПО
//							   |			РеализацияТоваровУслуг.Ссылка,
//							   |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
//							   |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
//							   |				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
//							   |			ИЗ
//							   |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
//							   |			ГДЕ
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
//							   |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
//							   |			
//							   |			СГРУППИРОВАТЬ ПО
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
//							   |			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
//							   |	
//							   |	СГРУППИРОВАТЬ ПО
//							   |		Реализации.СрокОплаты,
//							   |		Реализации.Реализация) КАК ВложенныйЗапрос
//							   |ГДЕ
//							   |	ВложенныйЗапрос.СуммаЗадолженности > 0
//							   |
//							   |УПОРЯДОЧИТЬ ПО
//							   |	СрокОплаты";

//		
//		
//		
//		//Запрос.УстановитьПараметр("ВидРасчетов", Перечисления.ВидыВзаимоРасчетов.ПоЗаказам );
//		Запрос.УстановитьПараметр("Организация", Организация );
//		Запрос.УстановитьПараметр("Контрагент", Контрагент );
//		//Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
//		Запрос.УстановитьПараметр("НаДату", НаДату );
//		//Запрос.УстановитьПараметр("ИсключаемыйЗаказ" , ИсключаемыйЗаказ);
//		Запрос.УстановитьПараметр("ИсключаемаяРеализация" , ИсключаемаяРеализация);
//		Результат = Запрос.Выполнить();
//		Выборка = Результат.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			//РезультирующаяСтрока = "Истек скрок оплаты по заказу: " + строка(Выборка.ЗаказПокупателя) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
//			РезультирующаяСтрока = "Истек скрок оплаты по реализации: " + строка(Выборка.Реализация) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
//			Возврат  РезультирующаяСтрока;
//		КонецЦикла;
//		
//	ИначеЕсли ДоговорКонтрагента.ВидРасчетов = Перечисления.ВидыВзаимоРасчетов.ПоДоговору тогда
//		//Запрос.Текст = "ВЫБРАТЬ
//		//|	ВложенныйЗапрос.Реализация,
//		//|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
//		//|	ВложенныйЗапрос.СуммаЗадолженности
//		//|ИЗ
//		//|	(ВЫБРАТЬ
//		//|		Реализации.Реализация КАК Реализация,
//		//|		Реализации.СрокОплаты КАК СрокОплаты,
//		//|		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
//		//|	ИЗ
//		//|		(ВЫБРАТЬ
//		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
//		//|			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
//		//|			РеализацияТоваровУслуг.Ссылка КАК Реализация
//		//|		ИЗ
//		//|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//		//|		ГДЕ
//		//|			РеализацияТоваровУслуг.Проведен = ИСТИНА
//		//|			И РеализацияТоваровУслуг.Организация = &Организация
//		//|			И РеализацияТоваровУслуг.Контрагент = &Контрагент
//		//|			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
//		//|			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
//		//|			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
//		//|		
//		//|		СГРУППИРОВАТЬ ПО
//		//|			РеализацияТоваровУслуг.Ссылка,
//		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
//		//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
//		//|				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
//		//|			ИЗ
//		//|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
//		//|						&НаДату,
//		//|						Организация = &Организация
//		//|							И Контрагент = &Контрагент
//		//|							И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстатки
//		//|			ГДЕ
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
//		//|				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
//		//|			
//		//|			СГРУППИРОВАТЬ ПО
//		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
//		//|			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
//		//|	
//		//|	СГРУППИРОВАТЬ ПО
//		//|		Реализации.СрокОплаты,
//		//|		Реализации.Реализация) КАК ВложенныйЗапрос
//		//|ГДЕ
//		//|	ВложенныйЗапрос.СуммаЗадолженности > 0
//		//|
//		//|УПОРЯДОЧИТЬ ПО
//		//|	СрокОплаты";
//				Запрос.Текст = "ВЫБРАТЬ
//							   |	ВложенныйЗапрос.Реализация,
//							   |	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
//							   |	ВложенныйЗапрос.СуммаЗадолженности
//							   |ИЗ
//							   |	(ВЫБРАТЬ
//							   |		Реализации.Реализация КАК Реализация,
//							   |		Реализации.СрокОплаты КАК СрокОплаты,
//							   |		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
//							   |	ИЗ
//							   |		(ВЫБРАТЬ
//							   |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
//							   |			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
//							   |			РеализацияТоваровУслуг.Ссылка КАК Реализация
//							   |		ИЗ
//							   |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//							   |		ГДЕ
//							   |			РеализацияТоваровУслуг.Проведен = ИСТИНА
//							   |			И РеализацияТоваровУслуг.Организация = &Организация
//							   |			И РеализацияТоваровУслуг.Контрагент = &Контрагент
//							   |			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
//							   |			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
//							   |		
//							   |		СГРУППИРОВАТЬ ПО
//							   |			РеализацияТоваровУслуг.Ссылка,
//							   |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
//							   |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
//							   |				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
//							   |			ИЗ
//							   |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
//							   |			ГДЕ
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
//							   |				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
//							   |			
//							   |			СГРУППИРОВАТЬ ПО
//							   |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
//							   |			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
//							   |	
//							   |	СГРУППИРОВАТЬ ПО
//							   |		Реализации.СрокОплаты,
//							   |		Реализации.Реализация) КАК ВложенныйЗапрос
//							   |ГДЕ
//							   |	ВложенныйЗапрос.СуммаЗадолженности > 0
//							   |
//							   |УПОРЯДОЧИТЬ ПО
//							   |	СрокОплаты";
//		//Запрос.УстановитьПараметр("ВидРасчетов", Перечисления.ВидыВзаимоРасчетов.ПоДоговору );
//		Запрос.УстановитьПараметр("Организация", Организация );
//		Запрос.УстановитьПараметр("Контрагент", Контрагент );
//		//Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
//		Запрос.УстановитьПараметр("НаДату", НаДату );
//		//Запрос.УстановитьПараметр("ИсключаемыйЗаказ" , ИсключаемыйЗаказ);
//		Запрос.УстановитьПараметр("ИсключаемаяРеализация" , ИсключаемаяРеализация);
//		Результат = Запрос.Выполнить();
//		Выборка = Результат.Выбрать();
//		
//		Пока Выборка.Следующий() Цикл
//			//РезультирующаяСтрока = "Истек скрок оплаты по заказу: " + строка(Выборка.ЗаказПокупателя) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
//			РезультирующаяСтрока = "Истек скрок оплаты по реализации: " + строка(Выборка.Реализация) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
//			Возврат  РезультирующаяСтрока;
//		КонецЦикла;
//	КонецЕсли;
//	
//	
//КонецФункции

//Процедура ПриУстановкеНовогоКодаСправочникаПриУстановкеНовогоКода(Источник, СтандартнаяОбработка, Префикс) Экспорт
//	
//	//ДобавитьПрефиксУзла(Префикс);
//	
//КонецПроцедуры

//Процедура ПриУстановкеНовогоНомераДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
//	
//	//ДобавитьПрефиксУзла(Префикс);
//	
//КонецПроцедуры

//Процедура ДобавитьПрефиксУзла(Префикс) Экспорт
//	
//	//Префикс =  Константы.ПрефиксБазы.Получить();
//	
//	ВыборкаИзЗапроса = ПолучитьПодразделениеТекущегоПользователя();
//	//ВыборкаИзЗапроса.Следующий();
//	
//	Префикс = ВыборкаИзЗапроса.ПрефиксПодразделения;
//	
//	
//КонецПроцедуры

//Функция ПолучитьЦену(Дата, ТипЦен, Номенклатура, ДокументПоступления, Валюта) Экспорт
//	Если ЗначениеЗаполнено(Дата) тогда
//		НаДату = КонецДня(Дата);
//	Иначе
//		НаДату = ТекущаяДата();
//	КонецЕсли;
//	
//	Цена = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(НаДату, Новый Структура("ТипЦен, Номенклатура, ДокументПоступления",ТипЦен, Номенклатура, ДокументПоступления )).Цена;	
//	
//	Коэффициенты = МодульВалютногоУчета.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Константы.ВалютаУправленческогоУчета.Получить(), НаДату);
//	КоэффициентКонвертацииВВалюту = ?(Коэффициенты.КоэффициентПересчетаВВалютуУпр <> 0, Коэффициенты.КоэффициентПересчетаВВалютуУпр, 1);
//	
//	Цена = Цена / КоэффициентКонвертацииВВалюту;
//	
//	Возврат Цена;
//	
//КонецФункции

//// Формирование изображения штрихкода для указанного объекта
//// 
//// Параметры: 
////  Нет 
//// 
//// Возвращаемое значение: 
////  Картинка - Картинка со сформированным штрихкодом ИЛИ НЕОПРЕДЕЛЕНО

 Функция ПолучитьКартинкуШтрихкода(Штрихкод, Ширина, Высота,ВыводитьТекст=Истина) Экспорт
	
	// В зависимости от типа платформы подключим соответствующую внешнюю компоненту
	ИнформацияОСистеме = Новый СистемнаяИнформация;
	Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовWindows32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовWindows64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовLinux32", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);		
		
	Иначе
		
		ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодовLinux64", "КартинкаШтрихкода", ТипВнешнейКомпоненты.Native);
		
	КонецЕсли;
	
	// Создадим объект внешней компоненты
	Компонент = Новый("AddIn.КартинкаШтрихкода.Barcode");
	// Если нет возможности рисовать
	Если НЕ Компонент.ГрафикаУстановлена Тогда
		
		// То картинку сформировать не сможем
		Возврат Неопределено;
		
	КонецЕсли;
	
	//// Если в системе установлен шрифт Tahoma
	//Если Компонент.НайтиШрифт("Tahoma") = Истина Тогда
	
	//	// Выбираем его как шрифт для формирования картинки
	//	Компонент.Шрифт = "Tahoma";
	
	//Иначе
	
	//	// Шрифт Tahoma в системе отсутствует
	
	//	// Обойдем все доступные компоненте шрифты
	//	Для Сч = 0 По Компонент.КоличествоШрифтов -1 Цикл
	
	//		// Получим очередной шрифт, доступный компоненте
	//		ТекущийШрифт = Компонент.ШрифтПоИндексу(Сч);
	
	//		// Если шрифт доступен
	//		Если ТекущийШрифт <> Неопределено Тогда
	
	//			// Они и будет шрифтом для формирования штрихкода
	//			Компонент.Шрифт = ТекущийШрифт;
	//			Прервать;
	
	//		КонецЕсли;
	
	//	КонецЦикла;
	
	//КонецЕсли;
	
	//// Установим размер шрифта
	Если Не ВыводитьТекст Тогда
		Компонент.РазмерШрифта = 0;
	КонецЕсли;
	
	//// Зададим размер картинки
	Компонент.Ширина = 100;
	Компонент.Высота = 50;
	
	// Разрешим компоненте самой определять тип кода
	//Компонент.АвтоТип = Истина;
	// ИЛИ установим код EAN-13
	Компонент.ТипКода = 4;
	

	//
	// Тип смотрим в документации на внешнюю компоненту
	
	// Если код содержит контрольный символ, обязательно указываем
	//Компонент.СодержитКС = СтрДлина(Штрихкод) = 13;
	
	// Если отображать контрольный символ не нужно
	//Компонент.ВидимостьКС = Ложь;
	
	// Формируем картинку штрихкода 
	
	Компонент.ЗначениеКода = Штрихкод;
	Компонент.ПоложениеТекста = 1;
	//Компонент.ПоложениеТекста = 0;
	
	// Если установленная нами ширина меньше минимально допустимой для этого штрихкода
	Если Компонент.Ширина < Компонент.МинимальнаяШиринаКода Тогда
		
		Компонент.Ширина = Компонент.МинимальнаяШиринаКода + 10;
		
	КонецЕсли;
	
	// Сформируем картинку
	ДвоичныеДанныеКартинки = Компонент.ПолучитьШтрихкод();
	
	// Если картинка сформировалась
	Если НЕ ДвоичныеДанныеКартинки = Неопределено Тогда
		
		// Формируем из двоичных данных
		Возврат Новый Картинка(ДвоичныеДанныеКартинки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции









//// Функция формирует представление суммы прописью в указанной валюте
////
//// Параметры:
////  Сумма - Число - Сумма, которую надо представить прописью 
////  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
////  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
////
//// Возвращаемое значение:
////  Строка - сумма прописью
////
//Функция СформироватьСуммуПрописью(Знач Сумма, Валюта, ВыводитьСуммуБезКопеек = Ложь) Экспорт
//	
//	Результат         = ?(Сумма < 0, -Сумма, Сумма);
//	ЦелаяЧасть        = Цел(Результат);
//	ФорматСтрока      = "Л=ru_RU; ДП=Ложь";
//	ПараметрыПредмета = Справочники.Валюты.ПолучитьРеквизитыВалюты(Валюта).ПараметрыПрописиНаРусском;
//	
//	Если Результат = ЦелаяЧасть Тогда
//		
//		Если ВыводитьСуммуБезКопеек Тогда
//			
//			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
//			Результат = Лев(Результат, Найти(Результат, "0") - 1);
//			
//		Иначе
//			
//			Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
//			
//		КонецЕсли;
//		
//	Иначе
//		
//		Результат = ЧислоПрописью(Результат, ФорматСтрока, ПараметрыПредмета);
//		
//	КонецЕсли;
//	
//	Возврат Результат;
//	
//КонецФункции // СформироватьСуммуПрописью()

Функция ПолучитьНомерДокументаПоШК(ШК) Экспорт
	//Код = Сред(ШК, 4, 1);
	КодДокумента = Прав(ШК,9);
	//Префикс = ПланыВидовХарактеристик.НастройкиОбъектовДляШтрихкодов.НайтиПоКоду(Код).Наименование;
	Возврат "00"+КодДокумента;	
КонецФункции

Функция ПолучитьВидДокументаПоШК(ШК)    Экспорт 
	Код = Сред(ШК, 3, 1);
	ВидДокумента = ПланыВидовХарактеристик.НастройкиОбъектовДляШтрихкодов.НайтиПоКоду(Код).Наименование; 
	Возврат ВидДокумента;
КонецФункции

Функция НайтиДокумент(Вид, Номер) Экспорт 
	МассивДокументов = новый Массив;	
	Для мГод = 2000 по год(ТекущаяДата()) Цикл
		док = Документы[Вид].НайтиПоНомеру(Номер, Дата(мГод,1,1));
		Если док <> Документы[Вид].ПустаяСсылка() тогда
			МассивДокументов.Добавить(док);
		КонецЕсли;
	КонецЦикла;
	
	//док = Документы[Вид].НайтиПоНомеру(Номер, ТекущаяДата());
	возврат МассивДокументов;
КонецФункции

Функция ПодключатьСШКПриЗапускеСистемы() Экспорт
	ПодключатьСШК = ОбщийМодуль_Каштан.ПолучитьЗначениеНастройкиПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ПодключатьСШК);	
	Если ПодключатьСШК = Неопределено тогда
		Возврат Ложь;
	Иначе 
		Возврат ПодключатьСШК;
	КонецЕсли;
КонецФункции


Функция НастройкаШКПользователя() Экспорт
	НастройкаШК = ОбщийМодуль_Каштан.ПолучитьЗначениеНастройкиПользователя(ПланыВидовХарактеристик.НастройкиПользователей.НастройкаШК);
	Если НастройкаШК <> Неопределено тогда
		ПараметрыСканера = Новый Структура();
		ПараметрыСканера.Вставить("БитДанных", НастройкаШК.БитДанных);
		ПараметрыСканера.Вставить("Скорость", НастройкаШК.Скорость);
		ПараметрыСканера.Вставить("Порт", НастройкаШК.Порт);
		Возврат ПараметрыСканера;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура СозданиеНовогоОбъектаПриЗаписи(Источник, Отказ) Экспорт
	//ВыборкаИзЗапроса = ПолучитьПодразделениеТекущегоПользователя();
	////ВыборкаИзЗапроса.Следующий();
	//Если Не ЗначениеЗаполнено(ВыборкаИзЗапроса) Тогда
	//	Сообщить("У текущего пользователя значение настройки ""Основное подразделение"" не заполнено!"
	//	, СтатусСообщения.ОченьВажное);
	//	Отказ = Истина;
	//Иначе
	//	Попытка
	//		Если не РольДоступна("СпециальныеВозможности") тогда
	//			Если не Метаданные.Справочники.Содержит(Источник.Метаданные()) тогда
	//				Если не Источник.Подразделение = ВыборкаИзЗапроса тогда
	//					Сообщить("Объект создан в другом подразделении!"
	//					, СтатусСообщения.ОченьВажное);
	//					Отказ = Истина;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	Исключение
	//		
	//	КонецПопытки;
	//КонецЕсли;
	//
КонецПроцедуры

Функция ПолучитьПодразделениеТекущегоПользователя() Экспорт;
	//20,01,2011
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	НастройкиПользователей.Значение
	//|ИЗ
	//|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	//|ГДЕ
	//|	НастройкиПользователей.Пользователь = &Пользователь
	//|	И НастройкиПользователей.Настройка = &Настройка";
	//
	//Запрос.УстановитьПараметр("Пользователь", АвторизованныйПользователь());
	//Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделение);	
	//ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	//Если ВыборкаИзЗапроса.Следующий() тогда
	//	 Возврат ВыборкаИзЗапроса.Значение;
	// Иначе 
	//	 возврат Справочники.Подразделения.ПустаяСсылка();
	// КонецЕсли;
	ОсновнойОтветственный = АвторизованныйПользователь();
	Если ЗначениеЗаполнено(ОсновнойОтветственный) тогда
		Если ЗначениеЗаполнено(ОсновнойОтветственный.ТекущееПодразделение) тогда
			ОсновноеПодразделение = ОсновнойОтветственный.ТекущееПодразделение;
		Иначе
			ОсновноеПодразделение = Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ОсновноеПодразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	возврат ОсновноеПодразделение; 
	//20,01,2011
КонецФункции

Функция ЗначениеЗапросаЗавершенияПрограммы() Экспорт 
	Возврат ПолучитьЗначениеНастройкиПользователя(ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытииПрограммы);	
КонецФункции

Функция ПроверкаДоступностиСкладаПодразделению(Склад, Подразделение) Экспорт 
	Если Подразделение.СкладыПодразделения.Найти(Склад, "Склад") = Неопределено тогда
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат Склад;
	КонецЕсли;
КонецФункции

Процедура ВостановитьОтборСпискаФормы(Форма) Экспорт
	Настройки = РаботаСФайлами.ХранилищеОбщихНастроекЗагрузить(Форма.ИмяФормы,);
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("СохраненныйОтбор") Тогда
			Для Каждого Строка из Настройки.СохраненныйОтбор.Элементы Цикл
				ЭлементОтбора=Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
				ЗаполнитьЗначенияСвойств(ЭлементОтбора,Строка);
			КонецЦикла;		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПогаситьЗадолженностиПоОтсроченнымПлатежам(НаДату, Организация, Контрагент, ДоговорКонтрагента, ИсключаемаяРеализация, Подразделение) Экспорт
	ВалютаУпр = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТЗЗадолженности = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.Остатки(НаДату, Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Сделка", Организация, Контрагент, ДоговорКонтрагента, ), "Организация, Контрагент, ДоговорКонтрагента, Сделка", "СуммаУпр");	
	Если ТЗЗадолженности.Количество() > 0 тогда
		СуммаЗадолженности = ТЗЗадолженности[0].СуммаУпр;
	Иначе
		СуммаЗадолженности = 0;
	КонецЕсли;
	
	//Если СуммаЗадолженности <= 0 тогда
	//	Возврат Ложь;	
	//КонецЕсли;
	
	
	Запрос = новый Запрос;
	Если ДоговорКонтрагента.ВидРасчетов = Перечисления.ВидыВзаимоРасчетов.ПоЗаказам тогда	
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Реализация,
		//|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
		//|	ВложенныйЗапрос.СуммаЗадолженности
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		Реализации.Реализация КАК Реализация,
		//|		Реализации.СрокОплаты КАК СрокОплаты,
		//|		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
		//|	ИЗ
		//|		(ВЫБРАТЬ
		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
		//|			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
		//|			РеализацияТоваровУслуг.Ссылка КАК Реализация
		//|		ИЗ
		//|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|		ГДЕ
		//|			РеализацияТоваровУслуг.Проведен = ИСТИНА
		//|			И РеализацияТоваровУслуг.Организация = &Организация
		//|			И РеализацияТоваровУслуг.Контрагент = &Контрагент
		//|			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты) < &НаДату
		//|			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		//|			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			РеализацияТоваровУслуг.Ссылка,
		//|			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
		//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		//|				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
		//|			ИЗ
		//|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		//|						&НаДату,
		//|						Организация = &Организация
		//|							И Контрагент = &Контрагент
		//|							И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстатки
		//|			ГДЕ
		//|				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		//|				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
		//|			
		//|			СГРУППИРОВАТЬ ПО
		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
		//|			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		Реализации.СрокОплаты,
		//|		Реализации.Реализация) КАК ВложенныйЗапрос
		//|ГДЕ
		//|	ВложенныйЗапрос.СуммаЗадолженности > 0
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	СрокОплаты";
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВложенныйЗапрос.Реализация,
		               |	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
		               |	СУММА(ВложенныйЗапрос.СуммаЗадолженности) КАК СуммаЗадолженности
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Реализации.Реализация КАК Реализация,
		               |		Реализации.СрокОплаты КАК СрокОплаты,
		               |		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
		               |			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
		               |			РеализацияТоваровУслуг.Ссылка КАК Реализация
		               |		ИЗ
		               |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ГДЕ
		               |			РеализацияТоваровУслуг.Проведен = ИСТИНА
		               |			И РеализацияТоваровУслуг.Организация = &Организация
		               |			И РеализацияТоваровУслуг.Контрагент = &Контрагент
		               |			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
		               |			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		               |			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РеализацияТоваровУслуг.Ссылка,
		               |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		               |				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
		               |			ИЗ
		               |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
		               |			ГДЕ
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
		               |			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Реализации.СрокОплаты,
		               |		Реализации.Реализация) КАК ВложенныйЗапрос
		               |ГДЕ
		               |	ВложенныйЗапрос.СуммаЗадолженности <> 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Реализация,
		               |	ВложенныйЗапрос.СрокОплаты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СрокОплаты";
		
		//Запрос.УстановитьПараметр("ВидРасчетов", Перечисления.ВидыВзаимоРасчетов.ПоЗаказам );
		Запрос.УстановитьПараметр("Организация", Организация );
		Запрос.УстановитьПараметр("Контрагент", Контрагент );
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
		//Запрос.УстановитьПараметр("ИсключаемыйЗаказ" , ИсключаемыйЗаказ);
		Запрос.УстановитьПараметр("ИсключаемаяРеализация" , ИсключаемаяРеализация);
		//Результат = Запрос.Выполнить();
		//Выборка = Результат.Выбрать();
		
		//Пока Выборка.Следующий() Цикл
		//	//РезультирующаяСтрока = "Истек скрок оплаты по заказу: " + строка(Выборка.ЗаказПокупателя) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
		//	РезультирующаяСтрока = "Истек скрок оплаты по реализации: " + строка(Выборка.Реализация) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
		//	Возврат  РезультирующаяСтрока;
		//КонецЦикла;
		
	ИначеЕсли ДоговорКонтрагента.ВидРасчетов = Перечисления.ВидыВзаимоРасчетов.ПоДоговору тогда
		//Запрос.Текст = "ВЫБРАТЬ
		//|	ВложенныйЗапрос.Реализация,
		//|	ВложенныйЗапрос.СуммаЗадолженности,
		//|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты
		//|ИЗ
		//|	(ВЫБРАТЬ
		//|		Реализации.Реализация КАК Реализация,
		//|		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности,
		//|		Реализации.СрокОплаты КАК СрокОплаты
		//|	ИЗ
		//|		(ВЫБРАТЬ
		//|			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
		//|			РеализацияТоваровУслуг.Ссылка КАК Реализация,
		//|			ВЫБОР
		//|				КОГДА РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты ЕСТЬ NULL 
		//|					ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, СтавкиИЛимиты.Отсрочка)
		//|				ИНАЧЕ ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты)
		//|			КОНЕЦ КАК СрокОплаты
		//|		ИЗ
		//|			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|					СвязкаСРеализацией.Ссылка КАК Ссылка,
		//|					ЕСТЬNULL(КредитныеСтавкиИЛимиты.Ставка, 0) КАК Ставка,
		//|					ЕСТЬNULL(КредитныеСтавкиИЛимиты.Лимит, 0) КАК Лимит,
		//|					ЕСТЬNULL(КредитныеСтавкиИЛимиты.Отсрочка, 0) КАК Отсрочка
		//|				ИЗ
		//|					(ВЫБРАТЬ
		//|						РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		//|						МАКСИМУМ(КредитныеСтавкиИЛимиты.Период) КАК Период
		//|					ИЗ
		//|						Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		//|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеСтавкиИЛимиты КАК КредитныеСтавкиИЛимиты
		//|							ПО РеализацияТоваровУслуг.Контрагент = КредитныеСтавкиИЛимиты.Контрагент
		//|								И РеализацияТоваровУслуг.Дата >= КредитныеСтавкиИЛимиты.Период
		//|					ГДЕ
		//|						КредитныеСтавкиИЛимиты.Контрагент = &Контрагент
		//|						И РеализацияТоваровУслуг.Проведен = ИСТИНА
		//|						И РеализацияТоваровУслуг.Контрагент = &Контрагент
		//|						И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		//|					
		//|					СГРУППИРОВАТЬ ПО
		//|						РеализацияТоваровУслуг.Ссылка) КАК СвязкаСРеализацией
		//|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КредитныеСтавкиИЛимиты КАК КредитныеСтавкиИЛимиты
		//|						ПО СвязкаСРеализацией.Период = КредитныеСтавкиИЛимиты.Период
		//|				ГДЕ
		//|					КредитныеСтавкиИЛимиты.Контрагент = &Контрагент) КАК СтавкиИЛимиты
		//|				ПО РеализацияТоваровУслуг.Ссылка = СтавкиИЛимиты.Ссылка
		//|		ГДЕ
		//|			РеализацияТоваровУслуг.Проведен = ИСТИНА
		//|			И РеализацияТоваровУслуг.Организация = &Организация
		//|			И РеализацияТоваровУслуг.Контрагент = &Контрагент
		//|			И ВЫБОР
		//|					КОГДА РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты ЕСТЬ NULL 
		//|						ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, СтавкиИЛимиты.Отсрочка) < &НаДату
		//|					ИНАЧЕ ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты) < &НаДату
		//|				КОНЕЦ
		//|			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		//|			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
		//|		
		//|		СГРУППИРОВАТЬ ПО
		//|			РеализацияТоваровУслуг.Ссылка,
		//|			ВЫБОР
		//|				КОГДА РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты ЕСТЬ NULL 
		//|					ТОГДА ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, СтавкиИЛимиты.Отсрочка)
		//|				ИНАЧЕ ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.ЗаказПокупателя.КоличествоДнейОтсрочкиОплаты)
		//|			КОНЕЦ) КАК Реализации
		//|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		//|				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
		//|			ИЗ
		//|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
		//|						&НаДату,
		//|						Организация = &Организация
		//|							И Контрагент = &Контрагент
		//|							И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ВзаиморасчетыСКонтрагентамиОстатки
		//|			ГДЕ
		//|				ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0
		//|				И ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
		//|			
		//|			СГРУППИРОВАТЬ ПО
		//|				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
		//|			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
		//|	
		//|	СГРУППИРОВАТЬ ПО
		//|		Реализации.Реализация,
		//|		Реализации.СрокОплаты) КАК ВложенныйЗапрос
		//|ГДЕ
		//|	ВложенныйЗапрос.СуммаЗадолженности > 0
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	СрокОплаты";
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВложенныйЗапрос.Реализация,
		               |	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
		               |	СУММА(ВложенныйЗапрос.СуммаЗадолженности) КАК СуммаЗадолженности
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		Реализации.Реализация КАК Реализация,
		               |		Реализации.СрокОплаты КАК СрокОплаты,
		               |		СУММА(ЕСТЬNULL(-ОстаткиВзаимоРасчетов.СуммаВзаиморасчетовОстаток, 0)) КАК СуммаЗадолженности
		               |	ИЗ
		               |		(ВЫБРАТЬ
		               |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) КАК СрокОплаты,
		               |			СУММА(РеализацияТоваровУслуг.СуммаДокумента) КАК СуммаДокумента,
		               |			РеализацияТоваровУслуг.Ссылка КАК Реализация
		               |		ИЗ
		               |			Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		               |		ГДЕ
		               |			РеализацияТоваровУслуг.Проведен = ИСТИНА
		               |			И РеализацияТоваровУслуг.Организация = &Организация
		               |			И РеализацияТоваровУслуг.Контрагент = &Контрагент
		               |			И ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты) < &НаДату
		               |			И РеализацияТоваровУслуг.ДоговорКонтрагента = &ДоговорКонтрагента
		               |			И РеализацияТоваровУслуг.Ссылка <> &ИсключаемаяРеализация
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			РеализацияТоваровУслуг.Ссылка,
		               |			ДОБАВИТЬКДАТЕ(РеализацияТоваровУслуг.Дата, ДЕНЬ, РеализацияТоваровУслуг.КоличествоДнейОтсрочкиОплаты)) КАК Реализации
		               |			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
		               |				СУММА(ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетовОстаток
		               |			ИЗ
		               |				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НаДату, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
		               |			ГДЕ
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка <> &ИсключаемаяРеализация
		               |			
		               |			СГРУППИРОВАТЬ ПО
		               |				ВзаиморасчетыСКонтрагентамиОстатки.Сделка) КАК ОстаткиВзаимоРасчетов
		               |			ПО (ОстаткиВзаимоРасчетов.Сделка = Реализации.Реализация)
		               |	
		               |	СГРУППИРОВАТЬ ПО
		               |		Реализации.СрокОплаты,
		               |		Реализации.Реализация) КАК ВложенныйЗапрос
		               |ГДЕ
		               |	ВложенныйЗапрос.СуммаЗадолженности <> 0
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВложенныйЗапрос.Реализация,
		               |	ВложенныйЗапрос.СрокОплаты
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	СрокОплаты";
		
		//Запрос.УстановитьПараметр("ВидРасчетов", Перечисления.ВидыВзаимоРасчетов.ПоДоговору );
		Запрос.УстановитьПараметр("Организация", Организация );
		Запрос.УстановитьПараметр("Контрагент", Контрагент );
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("НаДату",  КонецДня(НаДату));
		//Запрос.УстановитьПараметр("ИсключаемыйЗаказ" , ИсключаемыйЗаказ);
		Запрос.УстановитьПараметр("ИсключаемаяРеализация" , ИсключаемаяРеализация);
		
		//Пока Выборка.Следующий() Цикл
		//	//РезультирующаяСтрока = "Истек скрок оплаты по заказу: " + строка(Выборка.ЗаказПокупателя) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
		//	РезультирующаяСтрока = "Истек скрок оплаты по реализации: " + строка(Выборка.Реализация) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
		//	Возврат  РезультирующаяСтрока;
		//КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ОстатокСвободныхСредств = СуммаЗадолженности;
	СтопГасить = Ложь;
	МожноПроводить = Ложь;
	Если Выборка.Количество() > 0 тогда
		
		
		НовыйДокументКоректировкиДолга = Документы.КорректировкаДолга.СоздатьДокумент();
		НовыйДокументКоректировкиДолга.Организация = Организация;
		НовыйДокументКоректировкиДолга.Дата = НаДату;
		НовыйДокументКоректировкиДолга.Контрагент = Контрагент;
		НовыйДокументКоректировкиДолга.Комментарий = "Документ создан автоматически";
		НовыйДокументКоректировкиДолга.Подразделение = Подразделение;
		НовыйДокументКоректировкиДолга.ВалютаДокумента = ДоговорКонтрагента.Валюта;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.СуммаЗадолженности < 0 тогда
				Если  ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером тогда
					ТЗЗадолженности = РегистрыНакопления.ТоварыНаКомиссии.Остатки(НаДату, Новый Структура("ДокументРеализации", Выборка.Реализация), "ДокументРеализации", "Количество");	
					Если ТЗЗадолженности.Количество() = 0 тогда
						
						НоваяСтрокаУМеньшенияДолга = НовыйДокументКоректировкиДолга.УменьшениеДолга.Добавить();
						НоваяСтрокаУМеньшенияДолга.Договор = ДоговорКонтрагента;
						НоваяСтрокаУМеньшенияДолга.Заказ = Выборка.Реализация;
						Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
							НоваяСтрокаУМеньшенияДолга.Сумма = Выборка.СуммаЗадолженности;
						Иначе
							НоваяСтрокаУМеньшенияДолга.Сумма = ОстатокСвободныхСредств;
						КонецЕсли;
						НоваяСтрокаУвеличенияДолга = НовыйДокументКоректировкиДолга.УвеличениеДолга.Добавить();
						НоваяСтрокаУвеличенияДолга.Договор = ДоговорКонтрагента;
						Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
							НоваяСтрокаУвеличенияДолга.Сумма = Выборка.СуммаЗадолженности;
						Иначе
							НоваяСтрокаУвеличенияДолга.Сумма = ОстатокСвободныхСредств;
						КонецЕсли;
						МожноПроводить = Истина;
						ОстатокСвободныхСредств = ОстатокСвободныхСредств - Выборка.СуммаЗадолженности;
					КонецЕсли;	
				Иначе
					НоваяСтрокаУМеньшенияДолга = НовыйДокументКоректировкиДолга.УменьшениеДолга.Добавить();
					НоваяСтрокаУМеньшенияДолга.Договор = ДоговорКонтрагента;
					НоваяСтрокаУМеньшенияДолга.Заказ = Выборка.Реализация;
					Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
						НоваяСтрокаУМеньшенияДолга.Сумма = Выборка.СуммаЗадолженности;
					Иначе
						НоваяСтрокаУМеньшенияДолга.Сумма = ОстатокСвободныхСредств;
					КонецЕсли;
					НоваяСтрокаУвеличенияДолга = НовыйДокументКоректировкиДолга.УвеличениеДолга.Добавить();
					НоваяСтрокаУвеличенияДолга.Договор = ДоговорКонтрагента;
					Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
						НоваяСтрокаУвеличенияДолга.Сумма = Выборка.СуммаЗадолженности;
					Иначе
						НоваяСтрокаУвеличенияДолга.Сумма = ОстатокСвободныхСредств;
					КонецЕсли;
					МожноПроводить = Истина;
					
					ОстатокСвободныхСредств = ОстатокСвободныхСредств - Выборка.СуммаЗадолженности;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОстатокСвободныхСредств > 0 тогда
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			Если Выборка.СуммаЗадолженности > 0 тогда
			Если Не СтопГасить тогда
				Если  ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером тогда
					ТЗЗадолженности = РегистрыНакопления.ТоварыНаКомиссии.Остатки(НаДату, Новый Структура("ДокументРеализации", Выборка.Реализация), "ДокументРеализации", "Количество");	
					Если ТЗЗадолженности.Количество() = 0 тогда
						
						НоваяСтрокаУМеньшенияДолга = НовыйДокументКоректировкиДолга.УменьшениеДолга.Добавить();
						НоваяСтрокаУМеньшенияДолга.Договор = ДоговорКонтрагента;
						НоваяСтрокаУМеньшенияДолга.Заказ = Выборка.Реализация;
						Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
							НоваяСтрокаУМеньшенияДолга.Сумма = Выборка.СуммаЗадолженности;
						Иначе
							НоваяСтрокаУМеньшенияДолга.Сумма = ОстатокСвободныхСредств;
							СтопГасить = Истина;
						КонецЕсли;
						НоваяСтрокаУвеличенияДолга = НовыйДокументКоректировкиДолга.УвеличениеДолга.Добавить();
						НоваяСтрокаУвеличенияДолга.Договор = ДоговорКонтрагента;
						Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
							НоваяСтрокаУвеличенияДолга.Сумма = Выборка.СуммаЗадолженности;
						Иначе
							НоваяСтрокаУвеличенияДолга.Сумма = ОстатокСвободныхСредств;
							СтопГасить = Истина;
						КонецЕсли;
						МожноПроводить = Истина;
						
						ОстатокСвободныхСредств = ОстатокСвободныхСредств - Выборка.СуммаЗадолженности;
					КонецЕсли;	
				Иначе
					НоваяСтрокаУМеньшенияДолга = НовыйДокументКоректировкиДолга.УменьшениеДолга.Добавить();
					НоваяСтрокаУМеньшенияДолга.Договор = ДоговорКонтрагента;
					НоваяСтрокаУМеньшенияДолга.Заказ = Выборка.Реализация;
					Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
						НоваяСтрокаУМеньшенияДолга.Сумма = Выборка.СуммаЗадолженности;
					Иначе
						НоваяСтрокаУМеньшенияДолга.Сумма = ОстатокСвободныхСредств;
						СтопГасить = Истина;
					КонецЕсли;
					НоваяСтрокаУвеличенияДолга = НовыйДокументКоректировкиДолга.УвеличениеДолга.Добавить();
					НоваяСтрокаУвеличенияДолга.Договор = ДоговорКонтрагента;
					Если ОстатокСвободныхСредств - Выборка.СуммаЗадолженности > 0 тогда
						НоваяСтрокаУвеличенияДолга.Сумма = Выборка.СуммаЗадолженности;
					Иначе
						НоваяСтрокаУвеличенияДолга.Сумма = ОстатокСвободныхСредств;
						СтопГасить = Истина;
					КонецЕсли;
					МожноПроводить = Истина;
					
					ОстатокСвободныхСредств = ОстатокСвободныхСредств - Выборка.СуммаЗадолженности;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
			КонецЕсли;
			//РезультирующаяСтрока = "Истек скрок оплаты по заказу: " + строка(Выборка.ЗаказПокупателя) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
			//РезультирующаяСтрока = "Истек скрок оплаты по реализации: " + строка(Выборка.Реализация) + " , срок оплаты был " + Строка(Выборка.СрокОплаты) + " , сумма задолженности составляет " +Строка(Выборка.СуммаЗадолженности)+ " " + Строка(ВалютаУпр);
			//Возврат  РезультирующаяСтрока;
		КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если МожноПроводить тогда
		НовыйДокументКоректировкиДолга.Записать(РежимЗаписиДокумента.Проведение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Создан документ "+Строка(НовыйДокументКоректировкиДолга)+"'"), );
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПроверитьПравоНаРедактирование(Пользователь, Ответственный) Экспорт
	Если МожноИзменятьЧужиеДокументы() Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Право", Истина);
		СтруктураПараметров.Вставить("МассивМенеджеров", "");
		Возврат СтруктураПараметров;
	КонецЕсли; 
	
	ПравоНаРедактирование = ПроверитьГруппуПользователя(Пользователь, Ответственный);
	Возврат ПравоНаРедактирование;
КонецФункции

Функция МожноИзменятьЧужиеДокументы() Экспорт
	возврат РольДоступна("ПравоИзменятьЧужиеДокументы")
КонецФункции

Функция ПроверитьГруппуПользователя(Пользователь, Ответственный)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыМенеджеровСоставГруппы2.Менеджер КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыМенеджеров.СоставГруппы КАК ГруппыМенеджеровСоставГруппы1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыМенеджеров.СоставГруппы КАК ГруппыМенеджеровСоставГруппы2
	|		ПО ГруппыМенеджеровСоставГруппы1.Ссылка = ГруппыМенеджеровСоставГруппы2.Ссылка
	|ГДЕ
	|	ГруппыМенеджеровСоставГруппы1.Менеджер = &Менеджер";
	Запрос.УстановитьПараметр("Менеджер", Ответственный);
	
	СтруктураПараметров = Новый Структура();
	
	ТаблицаМенеджеров = Запрос.Выполнить().Выгрузить();
	Если Не ТаблицаМенеджеров.Количество() = 0 Тогда
		НайденныеСтроки = ТаблицаМенеджеров.НайтиСтроки(Новый Структура("Пользователь", Пользователь));
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			СтруктураПараметров.Вставить("Право", Истина);
			СтруктураПараметров.Вставить("МассивМенеджеров", ТаблицаМенеджеров.ВыгрузитьКолонку("Пользователь"));
			Возврат СтруктураПараметров;
		Иначе
			СтруктураПараметров.Вставить("Право", Ложь);
			Возврат СтруктураПараметров;
		КонецЕсли;
	Иначе
		СтруктураПараметров.Вставить("Право", Ложь);
		МассивМенеджеров = Новый Массив;
		МассивМенеджеров.Добавить(Справочники.Пользователи.ПустаяСсылка());
		МассивМенеджеров.Добавить(Пользователь);
		СтруктураПараметров.Вставить("МассивМенеджеров", МассивМенеджеров);
		Возврат СтруктураПараметров;
	КонецЕсли; 
КонецФункции

Процедура ПечатьСертификатов(ТабличныйДокумент, МассивНомеровСчетФактур, ТаблицаТовары, ПустоОднако = Истина) Экспорт 
	
	КорневойКаталог = ОбщийМодуль_Каштан.ПолучитьПодразделениеТекущегоПользователя().КаталогСертификатов;
	Если не ЗначениеЗаполнено(КорневойКаталог) тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У подразделения пользователя не указан каталог сертификатов", );
		возврат;
	КонецЕсли;
	
	ПустоОднако = Истина;
	
	Макет = ПолучитьОбщийМакет("МакетСканыСертификатов");
	НомераДокументовРеализации = "";
	Для Каждого ЭлМассива из МассивНомеровСчетФактур Цикл
		НомераДокументовРеализации = НомераДокументовРеализации +Строка(ЭлМассива)+ ",";
	КонецЦикла;	
	НомераДокументовРеализации = лев(НомераДокументовРеализации,СтрДлина(НомераДокументовРеализации)-1);
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") Тогда
		Товары = ТаблицаТовары.Скопировать();
	Иначе	
		Товары = ТаблицаТовары.Выгрузить();
	КонецЕсли;
	Товары.Свернуть("Номенклатура, СерияНоменклатуры");
	
	Товары.Колонки.Добавить("Путь");
	Товары.Колонки.Добавить("СтрокаНаименования");	
	Для Каждого СтрокаТовары из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры) тогда
			Если ЗначениеЗаполнено(СтрокаТовары.СерияНоменклатуры.СканСертификата) тогда
				СтрокаТовары.Путь = КорневойКаталог + "\"+ СокрЛП(СтрокаТовары.СерияНоменклатуры.СканСертификата);
				СтрокаТовары.СтрокаНаименования = Строка(СтрокаТовары.Номенклатура) +" / "+ Строка(СтрокаТовары.Номенклатура.Производитель)+" / "+Строка(СтрокаТовары.СерияНоменклатуры)
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	БуфТовары = Товары.Скопировать();
	БуфТовары.Очистить();
	Для Каждого Стр Из Товары Цикл
		Если ЗначениеЗаполнено(Стр.Путь) Тогда
			НС = БуфТовары.НайтиСтроки(Новый Структура("Путь",Стр.Путь));
			Если НС.Количество() = 0 Тогда
				НовСтр = БуфТовары.Добавить();
				НовСтр.Путь = Стр.Путь;
				НовСтр.СтрокаНаименования = Стр.СтрокаНаименования;
			Иначе
				НС[0].СтрокаНаименования = НС[0].СтрокаНаименования + Символы.ПС + Стр.СтрокаНаименования;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	БуфТовары.Свернуть("СтрокаНаименования, Путь");
	БуфТовары.Сортировать("СтрокаНаименования");
	
	КоличествоВыведенныхСертификатов = 0;
	
	Для	 Каждого СтрокаТовары из БуфТовары Цикл
		
		ПустоОднако = Ложь;
		
		Если КоличествоВыведенныхСертификатов = 0 тогда
			Попытка
				Карт1=Новый Картинка(СтрокаТовары.Путь);
				//Карт1.
				ЗаголовокСкана1 = СтрокаТовары.СтрокаНаименования;
				КоличествоВыведенныхСертификатов = 1;
			исключение
			КонецПопытки;
		ИначеЕсли КоличествоВыведенныхСертификатов = 1 тогда
			Карт2=Новый Картинка(СтрокаТовары.Путь);
			ЗаголовокСкана2 = СтрокаТовары.СтрокаНаименования;
			
			КоличествоВыведенныхСертификатов = 2;
			
			Область = Макет.ПолучитьОбласть("ОбластьКартинки");
			Область.Параметры.НомераДокументовРеализации = НомераДокументовРеализации;
			Область.Параметры.ЗаголовокСкана1 = ЗаголовокСкана1;
			Область.Параметры.ЗаголовокСкана2 = ЗаголовокСкана2;
			Область.Рисунки.Скан1.Картинка = Карт1;
			Область.Рисунки.Скан2.Картинка = Карт2; 
			ТабличныйДокумент.Вывести(Область);
			КоличествоВыведенныхСертификатов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоВыведенныхСертификатов = 1 тогда
		Область = Макет.ПолучитьОбласть("ОбластьКартинки");
		Область.Параметры.НомераДокументовРеализации = НомераДокументовРеализации;
		Область.Параметры.ЗаголовокСкана1 = ЗаголовокСкана1;
		Область.Рисунки.Скан1.Картинка = Карт1;
		ТабличныйДокумент.Вывести(Область);
		КоличествоВыведенныхСертификатов = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодпискаНаСобытие1ОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	//Попытка
	//	Для каждого стр из Источник.Товары Цикл
	//		Если стр.Номенклатура.Услуга Тогда 
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Услуга не может быть заполнена в таблице товаров'"), Источник, "Товары["+Строка(стр.НомерСтроки-1)+"].Номенклатура",,Отказ);
	//		КонецЕсли;
	//	КонецЦикла;
	//Исключение
	//КонецПопытки;
	//
	//Если Источник.метаданные() = Метаданные.Документы.ПоступлениеТоваровУслуг или Источник.метаданные() = Метаданные.Документы.ПоступлениеДопРасходов тогда
	//	Если (Источник.метаданные() <> Метаданные.Документы.ПоступлениеДопРасходов) И Источник.ДокументСогласован тогда
	//		Для каждого стр из Источник.Товары Цикл
	//			Если стр.Количество > 0 и стр.Номенклатура.СерийныйТовар и не ЗначениеЗаполнено(стр.СерияНоменклатуры) Тогда 
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка ""Серия номенклатуры"" в строке "+Строка(стр.НомерСтроки)+" списка ""Товары""'"), Источник, "Товары["+Строка(стр.НомерСтроки-1)+"].СерияНоменклатуры",,Отказ);
	//			КонецЕсли;
	//		КонецЦикла;
	//	КонецЕсли;
	//Иначе	
	//	Попытка
	//		Для каждого стр из Источник.Товары Цикл
	//			Если стр.Количество > 0 и стр.Номенклатура.СерийныйТовар и не ЗначениеЗаполнено(стр.СерияНоменклатуры) Тогда 
	//				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка ""Серия номенклатуры"" в строке "+Строка(стр.НомерСтроки)+" списка ""Товары""'"), Источник, "Товары["+Строка(стр.НомерСтроки-1)+"].СерияНоменклатуры",,Отказ);
	//			КонецЕсли;
	//		КонецЦикла;
	//	Исключение
	//		Попытка
	//			Для каждого стр из Источник.Товары Цикл
	//				Если стр.Номенклатура.СерийныйТовар и не ЗначениеЗаполнено(стр.СерияНоменклатуры) Тогда 
	//					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка ""Серия номенклатуры"" в строке "+Строка(стр.НомерСтроки)+" списка ""Товары""'"), Источник, "Товары["+Строка(стр.НомерСтроки-1)+"].СерияНоменклатуры",,Отказ);
	//				КонецЕсли;
	//			КонецЦикла;
	//		Исключение
	//		КонецПопытки;
	//	КонецПопытки;
	//КонецЕсли;
КонецПроцедуры

Процедура ЗапретРедактированияДокументовНаДатуЗапретаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.Дата <=  Константы.ДатаЗапретаРедактирования.Получить() тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ЗапретПерепроведенияУдаленияЕслиЕстьСвязанныеПроведенныеДокументыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//Если Источник.Проведен тогда
	//	//Если Источник.метаданные() = Метаданные.Документы.ПоступлениеТоваровУслуг тогда
	//	//	Если не Источник.ДокументСогласован тогда
	//	//		Возврат
	//	//	КонецЕсли;
	//	//КонецЕсли;
	//	
	//	Если ТипЗнч(Источник.Ссылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//		Если Источник.ПечатьПодтверждена Тогда
	//			Возврат;	
	//		КонецЕсли;	
	//	КонецЕсли;	

	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	СвязанныеДокументы.Ссылка
	//		|ИЗ
	//		|	КритерийОтбора.СвязанныеДокументы(&Значение) КАК СвязанныеДокументы
	//		|ГДЕ
	//		|	СвязанныеДокументы.Ссылка.Проведен = ИСТИНА
	//		|	И (НЕ СвязанныеДокументы.Ссылка ССЫЛКА Документ.КоректировкаЗаказаПокупателя)
	//		|	И (НЕ СвязанныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаДолга)
	//		|	И (НЕ СвязанныеДокументы.Ссылка ССЫЛКА Документ.КорректировкаЗаказаПоставщику)";

	//	Запрос.УстановитьПараметр("Значение", Источник.Ссылка);

	//	Результат = Запрос.Выполнить();

	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	//	Если ВыборкаДетальныеЗаписи.Следующий() тогда
	//		Сообщить("Действие отменено. Есть связанные проведенные документы.");  
	//		Отказ = Истина;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры


 Процедура УстановитьПК(ПК) Экспорт
ПараметрыСеанса.ПК=ПК;	
КонецПроцедуры

