////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ РАБОТЫ С ФАЙЛАМИ
// 

// Освобождает файл
// Параметры:
// ДанныеФайла - структура, содержащая сведения о Файле
// 	см. функцию ПолучитьДанныеФайла()
Процедура ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры	

// Занимает файл на редактирование (checkout)
Функция ЗанятьФайл(ДанныеФайла, СтрокаОшибки = "", УникальныйИдентификатор = Неопределено) Экспорт

	Если Не РаботаСФайламиПереопределяемый.ВозможноЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	ФайлОбъект.Редактирует = ОбщегоНазначения.ТекущийПользователь();
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);

	НавигационнаяСсылкаТекущейВерсии = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	ДанныеФайла = ПолучитьДанныеФайла(
		ДанныеФайла.Ссылка, ДанныеФайла.Версия);
		
	ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = НавигационнаяСсылкаТекущейВерсии;
	ДанныеФайла.РабочийКаталогВладельца = РабочийКаталогВладельца;
	
	Возврат Истина;
	
КонецФункции // ЗанятьФайл()

// Переносит Файл в другую папку
Процедура ПеренестиФайл(ДанныеФайла, Папка) Экспорт 
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Заблокировать();
	ФайлОбъект.ВладелецФайла = Папка;
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Создает карточку Файла в БД
Функция СоздатьФайл(Знач Владелец, Знач Комментарий, Знач ИмяБезРасширения, 
	Знач Расширение, Знач ХранитьВерсии, Знач АдресВременногоХранилищаТекста,
	Пользователь = Неопределено) Экспорт
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = ИмяБезРасширения;
	Файл.ПолноеНаименование = ИмяБезРасширения;
	
	Если Пользователь = Неопределено Тогда
		Файл.Автор = ОбщегоНазначения.ТекущийПользователь();
	Иначе	
		Файл.Автор = Пользователь;
	КонецЕсли;	
	
	Файл.ДатаСоздания = ТекущаяДата();
	Файл.Описание = Комментарий;
	Файл.ИндексКартинки = РаботаСФайламиКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = ХранитьВерсии;
	
	Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции // СоздатьФайл()

// Функция предназначена для преобразования расширения файла в следующий
// вид: без точки и в нижнем регистре
// 
// Параметры:
//  стрРасширение - Строка. Расширение для преобразования
// Возвращаемое значение:
//  Преобразованная строка
//
Функция РасширениеБезТочки(стрРасширение) Экспорт
	Расширение = НРег(СокрЛП(стрРасширение));
	Если Сред(Расширение, 1, 1) = "." Тогда
		Расширение = Сред(Расширение, 2);
	КонецЕсли;
	Возврат Расширение;
КонецФункции // РасширениеБезТочки()

// Создает версию сохраняемого файла для сохранения в карточке Файла
// и подставляет ссылку на версию в карточку Файла
Процедура СоздатьВерсиюИОбновитьВерсиюВФайле(
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	ДокСсылка, 
	ИмяБезРасширения, 
	Размер, 
	Расширение, 
	АдресВременногоХранилищаФайла, 
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент = Ложь,
	Пользователь = Неопределено) Экспорт
	
	ВерсияСсылка = СоздатьВерсию(
		ВремяИзменения, 
		ВремяИзмененияУниверсальное,
		ДокСсылка, 
		ИмяБезРасширения, 
		Размер, 
		Расширение, 
		АдресВременногоХранилищаФайла, 
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент,
		Неопределено, // СсылкаНаВерсиюИсточник = 
		Неопределено, // НоваяВерсияДатаСоздания =  
		Пользователь,
		Неопределено, // НоваяВерсияКомментарий
		Неопределено // НоваяВерсияНомерВерсии
		);

	ОбновитьВерсиюВФайле(ДокСсылка, ВерсияСсылка, АдресВременногоХранилищаТекста);
	
КонецПроцедуры // СоздатьВерсиюИОбновитьВерсиюВФайле()


// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
				   |ИЗ
				   |	Справочник.ВерсииФайлов КАК Версии
				   |ГДЕ
				   |	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции // НайтиМаксимальныйНомерВерсии

// Возвращает полный путь тома - в зависимости от ОС
Функция ПолныйПутьТома(СсылкаНаТом) Экспорт
	
	ТипПлатформыСервера = РаботаСФайламиПовтИсп.ТипПлатформыСервера();
	
	Если ТипПлатформыСервера = ТипПлатформы.Windows_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		Возврат СсылкаНаТом.ПолныйПутьWindows;
	Иначе	
		Возврат СсылкаНаТом.ПолныйПутьLinux;
	КонецЕсли;
	
КонецФункции

// Добавляет файл в один из томов (где есть свободное место)
Процедура ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, ВремяИзменения, 
	НомерВерсии, ИмяБезРасширения, Расширение, РазмерФайла) Экспорт
	
	ПутьКТому = "";
	СсылкаНаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
	Выборка = Справочники.ТомаХраненияФайлов.Выбрать(,,, "ПорядокЗаполнения Возр");
	
	НайденТом = Ложь;
	ФайлУспешноДобавлен = Ложь;
	
	ОписаниеВсехОшибок = ""; // здесь соберем ошибки со всех томов
	
	Пока Выборка.Следующий() Цикл
		СсылкаНаТом = Выборка.ПолучитьОбъект();
		НайденТом = Истина;
		
		ПутьКТому = ПолныйПутьТома(СсылкаНаТом);
		// Добавляем слэш в конце, если его нет
		Если Прав(ПутьКТому,1) <> "\" Тогда
			ПутьКТому = ПутьКТому + "\";
		КонецЕсли;
		
		// Имя файла для хранения на диске формировать следующим образом
		// - имя файла.номер версии.расширение файла
		ИмяФайла = ИмяБезРасширения + "." + НомерВерсии + "." + Расширение;
		
		Попытка
			
			// Если МаксимальныйРазмер = 0 - нет ограничения на размер файлов на томе
			Если СсылкаНаТом.МаксимальныйРазмер <> 0 Тогда
				ТекущийРазмерВБайтах = РаботаСФайлами.ПодсчитатьРазмерФайловНаТоме(СсылкаНаТом.Ссылка); 
				НовыйРазмерВБайтах = ТекущийРазмерВБайтах + РазмерФайла;
				НовыйРазмер = НовыйРазмерВБайтах / (1024 * 1024);
				
				Если НовыйРазмер > СсылкаНаТом.МаксимальныйРазмер Тогда
					СтрокаОшибки 
						= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Превышен максимальный размер тома (%1 Мб)!'"),
						СсылкаНаТом.МаксимальныйРазмер);
					ВызватьИсключение(СтрокаОшибки);
				КонецЕсли;		
			КонецЕсли;
			
			Дата = ТекущаяДата();
			ПутьДня = Формат(Дата, "ДФ=ггггММдд") + "\";
			ПутьКТому = ПутьКТому + ПутьДня;
			
			ИмяФайлаСПутем = ФайловыеФункцииКлиентСервер.ПолучитьУникальноеИмяСПутем(ПутьКТому, ИмяФайла);
			ПолноеИмяФайлаСПутем = ПутьКТому + ИмяФайлаСПутем;
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные.Записать(ПолноеИмяФайлаСПутем);
			Иначе // считаем, что иначе это путь к файлу на диске
				КопироватьФайл(ДвоичныеДанные, ПолноеИмяФайлаСПутем);
			КонецЕсли;
			
			// Установим время изменения файла таким, как оно стоит в текущей версии
			ФайлНаДиске = Новый Файл(ПолноеИмяФайлаСПутем);
			ФайлНаДиске.УстановитьВремяИзменения(ВремяИзменения);
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
			
			ПутьКФайлу = ПутьДня + ИмяФайлаСПутем;
			ФайлУспешноДобавлен = Истина;
			Прервать; // закончили - выйдем из цикла
		Исключение
			Если ОписаниеВсехОшибок <> "" Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС + Символы.ПС;
			КонецЕсли;
			
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + НСтр("ru = 'Ошибка при добавлении файла на том: '");
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + СсылкаНаТом;
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + " (" + ПутьКТому + "): ";
			ОписаниеВсехОшибок = ОписаниеВсехОшибок + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СсылкаНаТом.ПолныйПутьLinux = СсылкаНаТом.ПолныйПутьWindows Тогда
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + Символы.ПС;
				ОписаниеВсехОшибок = ОписаниеВсехОшибок + НСтр("ru = 'Настройте полный путь к тому.'");
			КонецЕсли;	
			// надо переходить к следующему тому
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НайденТом = Ложь Тогда
		ВызватьИсключение(НСтр("ru = 'Нет ни одного тома для размещения файла!'"));
	КонецЕсли;
	
	Если ФайлУспешноДобавлен = Ложь Тогда
		// запись в журнал регистрации для администратора
		// здесь выдадим ошибки со всех томов
		СообщениеОбОшибке = НСтр("ru = 'Не удалось добавить файл ни на один из томов! Список ошибок: '") + Символы.ПС + Символы.ПС + ОписаниеВсехОшибок;
		ЗаписьЖурналаРегистрации("Добавление файла", УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		
		// здесь сообщение пользователю
		СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Не удалось добавить файл: ""%1.%2"". Обратитесь к администратору системы.'"),
				 ИмяБезРасширения, Расширение);
		ВызватьИсключение(СтрокаИсключения);
	КонецЕсли;

КонецПроцедуры // ДобавитьНаДиск

// Возвращает максимальный размер файла
Функция ПолучитьМаксимальныйРазмерФайла() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат МаксимальныйРазмерФайла;
КонецФункции

// Возвращает ЗапретЗагрузкиФайловПоРасширению
Функция ПолучитьЗапретЗагрузкиФайловПоРасширению() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЗапретЗагрузкиФайловПоРасширению = Константы.ЗапретЗагрузкиФайловПоРасширению.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ЗапретЗагрузкиФайловПоРасширению;
КонецФункции

// Возвращает СписокЗапрещенныхРасширений
Функция ПолучитьСписокЗапрещенныхРасширений() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СписокЗапрещенныхРасширений;
КонецФункции

// Создает версию сохраняемого файла для сохранения в карточке Файла
Функция СоздатьВерсию(
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	ДокСсылка, 
	ИмяБезРасширения, 
	Размер, 
	Расширение, 
	АдресВременногоХранилищаФайла, 
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент = Ложь,
	СсылкаНаВерсиюИсточник = Неопределено,
	НоваяВерсияДатаСоздания = Неопределено,
	НоваяВерсияАвтор = Неопределено,
	НоваяВерсияКомментарий = Неопределено,
	НоваяВерсияНомерВерсии = Неопределено) Экспорт
	
	Перем СсылкаНаТом;
	
	УстановитьПривилегированныйРежим(Истина);

	ЗапретЗагрузкиФайловПоРасширению = ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = Расширение;
	Если Не РаботаСФайламиКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла);
	КонецЕсли;	
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Если НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ДокСсылка) + 1;
	Иначе
		Версия.НомерВерсии = НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ДокСсылка;
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	
	Версия.Комментарий = НоваяВерсияКомментарий;
	
	Если НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = ОбщегоНазначения.ТекущийПользователь();
	Иначе
		Версия.Автор = НоваяВерсияАвтор;
	КонецЕсли;	
	
	Если НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДата();
	Иначе
		Версия.ДатаСоздания = НоваяВерсияДатаСоздания;
	КонецЕсли;	
	
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Размер = Размер;
	Версия.Расширение = РасширениеБезТочки(Расширение);
	
	ТипХраненияФайлов = Константы.ТипХраненияФайлов.Получить();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;

	Если СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона
		
		ТипХраненияФайловШаблона = СсылкаНаВерсиюИсточник.ТипХраненияФайла;
		
		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			//  и шаблон, и новый Файл - в базе
			
			// При создании Файла из шаблона хранилище значения копируется напрямую
			Версия.ФайлХранилище = АдресВременногоХранилищаФайла;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  и шаблон, и новый Файл - на диске - просто копируем файл
			
			Если НЕ СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ПолныйПутьТома(СсылкаНаВерсиюИсточник.Том) + СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				
				ПутьКФайлу = "";
				
				// добавить в один из томов (где есть свободное место)
				ДобавитьНаДиск(ПолныйПутьФайлаШаблона, ПутьКФайлу, СсылкаНаТом, ВремяИзменения, Версия.НомерВерсии, ИмяБезРасширения, Расширение, Версия.Размер);
				Версия.ПутьКФайлу = ПутьКФайлу;
				Версия.Том = СсылкаНаТом.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// шаблон в базе, новый Файл - на диске
			
			ДвоичныеДанные = АдресВременногоХранилищаФайла.Получить(); // в этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом
			
			ПутьКФайлу = "";
			
			// добавить в один из томов (где есть свободное место)
			ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, ВремяИзменения, Версия.НомерВерсии, ИмяБезРасширения, Расширение, Версия.Размер);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// шаблон на диске, новый Файл - в базе
			
			Если НЕ СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ПолныйПутьТома(СсылкаНаВерсиюИсточник.Том) + СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
				Версия.ФайлХранилище = Новый ХранилищеЗначения(ДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;
	Иначе // создание объекта Файл на основе выбранного файла с диска
		
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			Версия.ФайлХранилище = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
				
			Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
				ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
				Версия.Размер = ДвоичныеДанныеФайла.Размер();
				
				МаксРазмерФайла = ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
				
				Если Версия.Размер > МаксРазмерФайла Тогда
					ВызватьИсключение
						   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
							 ИмяБезРасширения, 
							 ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")), 
							 ?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0")));
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе // хранение на диске
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
			
			Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
				Версия.Размер = ДвоичныеДанные.Размер();
				
				МаксРазмерФайла = ПолучитьМаксимальныйРазмерФайла();
				РазмерВМб = Версия.Размер / (1024 * 1024);
				РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
				
				Если Версия.Размер > МаксРазмерФайла Тогда
					ВызватьИсключение
						   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
							 ИмяБезРасширения, 
							 ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")), 
							 ?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0")));
				КонецЕсли;
			КонецЕсли;
			
			ПутьКФайлу = "";
			
			// добавить в один из томов (где есть свободное место)
			ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, ВремяИзменения, Версия.НомерВерсии, ИмяБезРасширения, Расширение, Версия.Размер);
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли; // хранение на диске			
			
	КонецЕсли;	
	
	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;

	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Версия.ТекстХранилище = АдресВременногоХранилищаТекста;
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	КонецЕсли;
		
	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
		Версия.Размер = ДвоичныеДанныеФайла.Размер();
	КонецЕсли;

	Версия.Записать();
	
	Возврат Версия.Ссылка;
КонецФункции // СоздатьВерсию()

// Подставляет ссылку на версию в карточку Файла
Процедура ОбновитьВерсиюВФайле(ФайлСсылка, Версия, Знач АдресВременногоХранилищаТекста,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		ФайлОбъект.ТекстХранилище = АдресВременногоХранилищаТекста;
	Иначе
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьВерсиюВФайле()

// Обновляет текстовую порцию из файла в карточке файла
Процедура ОбновитьТекстВФайле(ФайлСсылка, Знач АдресВременногоХранилищаТекста, УникальныйИдентификатор = Неопределено)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры // ОбновитьТекстВФайле()

// Обновление или создание версии Файла и возврат ссылки на обновленную версию
Функция ОбновитьВерсию(
	Файл, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла,
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	ТекстНеИзвлеченНаКлиенте,
	УникальныйИдентификатор = Неопределено) 
	
	Перем СсылкаНаТом;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретЗагрузкиФайловПоРасширению = ПолучитьЗапретЗагрузкиФайловПоРасширению();
	СписокЗапрещенныхРасширений = ПолучитьСписокЗапрещенныхРасширений();
	РасширениеФайла = Расширение;
	Если Не РаботаСФайламиКлиентСервер.РасширениеФайлаРазрешеноДляЗагрузки(ЗапретЗагрузкиФайловПоРасширению, СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"),
				 РасширениеФайла);
	КонецЕсли;	
	
	СтарыйТипХранения = Неопределено;
	ВерсияЗаблокирована = Ложь;

	Если СоздаватьВерсию Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = Файл.ТекущаяВерсия;
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(Файл) + 1;
	Иначе	
		Версия = Файл.ТекущаяВерсия.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Версия.Ссылка, , УникальныйИдентификатор);
		ВерсияЗаблокирована = Истина;
		
		// удалим файл с диска - мы заместим его новым
		Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ Версия.Том.Пустая() Тогда
				ПолныйПуть = ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
				Попытка
					ФайлНаДиске = Новый Файл(ПолныйПуть);
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ПолныйПуть);
					
					ПутьСПодкаталогом = Файл.Путь;
					МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
					Если МассивФайловВКаталоге.Количество() = 0 Тогда
						УдалитьФайлы(ПутьСПодкаталогом);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.Владелец = Файл.Ссылка;
	Версия.Автор = ОбщегоНазначения.ТекущийПользователь();
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	Версия.ДатаСоздания = ТекущаяДата();
	Версия.Размер = Размер;
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Комментарий = Комментарий;
	
	Версия.Расширение = РасширениеБезТочки(Расширение);
	
	ТипХраненияФайлов = Константы.ТипХраненияФайлов.Получить();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		Версия.ФайлХранилище = Новый ХранилищеЗначения(
			ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
			
		Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
			ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			МаксРазмерФайла = ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			
			Если Версия.Размер > МаксРазмерФайла Тогда
				ВызватьИсключение
					   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 ИмяБезРасширения, 
						 ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")), 
						 ?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0")));
			КонецЕсли;
			
		КонецЕсли;
			
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
		
		Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			
			МаксРазмерФайла = ПолучитьМаксимальныйРазмерФайла();
			РазмерВМб = Версия.Размер / (1024 * 1024);
			РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
			
			Если Версия.Размер > МаксРазмерФайла Тогда
				ВызватьИсключение
					   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла (%3 Мб).'"),
						 ИмяБезРасширения, 
						 ?(РазмерВМб >= 1, Формат(РазмерВМб, "ЧДЦ=0"), Формат(РазмерВМб, "ЧДЦ=1; ЧН=0")), 
						 ?(РазмерВМбМакс >= 1, Формат(РазмерВМбМакс, "ЧДЦ=0"), Формат(РазмерВМбМакс, "ЧДЦ=1; ЧН=0")));
			КонецЕсли;
			
		КонецЕсли;
		
		ПутьКФайлу = "";
		
		// добавить в один из томов (где есть свободное место)
		ДобавитьНаДиск(ДвоичныеДанные, ПутьКФайлу, СсылкаНаТом, ВремяИзменения, Версия.НомерВерсии, ИмяБезРасширения, Версия.Расширение, Версия.Размер);
		Версия.ПутьКФайлу = ПутьКФайлу;
		Версия.Том = СсылкаНаТом.Ссылка;
		Версия.ФайлХранилище = Новый ХранилищеЗначения(""); // очистим ХранилищеЗначения
	КонецЕсли; // хранение на диске			
	
	Если НЕ ТекстНеИзвлеченНаКлиенте Тогда		
		ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
		Если ИзвлекатьТекстыФайловНаСервере = Ложь Тогда
			Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		Иначе
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		КонецЕсли;
	Иначе		
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;

	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		ДвоичныеДанныеФайла = Версия.ФайлХранилище.Получить();
		Версия.Размер = ДвоичныеДанныеФайла.Размер();
	КонецЕсли;
	
	Версия.Записать();
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификатор);		
	КонецЕсли;
	
	НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(Файл);
	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	
	Возврат Версия.Ссылка;
	
КонецФункции // ОбновитьВерсию

// Обновляет или создает версию Файла и снимает заем
Процедура ОпубликоватьИОсвободитьФайл(
	ДанныеФайла, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	ТекстНеИзвлеченНаКлиенте,
	ВРабочемКаталогеВладельца,
	НеМенятьЗаписьВРабочемКаталоге,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ПолучитьДанныеФайла(ДанныеФайла.Ссылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
	
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		НоваяВерсия = ОбновитьВерсию(
			ДанныеФайла.Ссылка, 
			СоздаватьВерсию, 
			АдресВременногоХранилищаФайла, 
			Комментарий, 
			ВремяИзменения, 
			ВремяИзмененияУниверсальное,
			Размер, 
			ИмяБезРасширения, 
			Расширение, 
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор);

		Если СоздаватьВерсию Тогда
			ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		Иначе
			ОбновитьТекстВФайле(ДанныеФайла.Ссылка, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		КонецЕсли;
		ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
		
		Если НЕ ЭтоВебКлиент И Не НеМенятьЗаписьВРабочемКаталоге Тогда
			ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
			УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
				ПредыдущаяВерсия, 
				НоваяВерсия, 
				ПолныйПутьКФайлу, 
				ИмяКаталога,
				ДанныеФайла.РабочийКаталогВладельца <> "");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
	     ОтменитьТранзакцию();
	     ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры // ОпубликоватьИОсвободитьФайл()

// Получает данные файла, затем обновляет или создает версию Файла и снимает заем
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер)
Процедура ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл(
	ОбъектСсылка, 
	ДанныеФайла,
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	ТекстНеИзвлеченНаКлиенте,
	УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(ОбъектСсылка);
	
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
	
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		НоваяВерсия = ОбновитьВерсию(
			ДанныеФайла.Ссылка, 
			СоздаватьВерсию, 
			АдресВременногоХранилищаФайла, 
			Комментарий, 
			ВремяИзменения, 
			ВремяИзмененияУниверсальное,
			Размер, 
			ИмяБезРасширения, 
			Расширение, 
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор);

		Если СоздаватьВерсию Тогда
			ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		Иначе
			ОбновитьТекстВФайле(ДанныеФайла.Ссылка, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		КонецЕсли;
		ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
		
		Если НЕ ЭтоВебКлиент Тогда
			ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
			УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
				ПредыдущаяВерсия, 
				НоваяВерсия, 
				ПолныйПутьКФайлу, 
				ИмяКаталога,
				ДанныеФайла.РабочийКаталогВладельца <> "");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
	     ОтменитьТранзакцию();
	     ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл()

// Процедура предназначена для опубликования файла без его освобождения
Процедура ОпубликоватьФайл(
	Файл, 
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ОтносительныйПутьКФайлу, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	ТекстНеИзвлеченНаКлиенте,
	ВРабочемКаталогеВладельца,
	НеМенятьЗаписьВРабочемКаталоге,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ПолучитьДанныеФайла(Файл);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
	
		СтараяВерсия = Файл.ТекущаяВерсия;
		
		Версия = ОбновитьВерсию(
			Файл, 
			СоздаватьВерсию, 
			АдресВременногоХранилищаФайла, 
			Комментарий, 
			ВремяИзменения, 
			ВремяИзмененияУниверсальное,
			Размер, 
			ИмяБезРасширения, 
			Расширение, 
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор);

		Если СоздаватьВерсию Тогда
			ОбновитьВерсиюВФайле(Файл, Версия, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		Иначе
			ОбновитьТекстВФайле(Файл, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
		КонецЕсли;
		
		Если НЕ ЭтоВебКлиент И Не НеМенятьЗаписьВРабочемКаталоге Тогда
			УдалитьИзРегистра(СтараяВерсия);
			НаЧтение = Ложь; 
			ЗаписатьИмяФайлаСПутемВРегистр(Версия, ОтносительныйПутьКФайлу, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
	     ОтменитьТранзакцию();
	     ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // ОпубликоватьФайл()

// получает РедактируетТекущийПользователь - в привилегированном режиме
Функция ПолучитьРедактируетТекущийПользователь(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Файлы.Редактирует КАК Редактирует
	               |ИЗ
	               |	Справочник.Файлы КАК Файлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	               |		ПО (ИСТИНА)
	               |ГДЕ
	               |	ВерсииФайлов.Ссылка = &Версия
	               |	И Файлы.Ссылка = ВерсииФайлов.Владелец";
				   
	Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РедактируетТекущийПользователь = (Выборка.Редактирует = ОбщегоНазначения.ТекущийПользователь());
		Возврат РедактируетТекущийПользователь;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции	

// Функция возвращает структуру, содержащую различные сведения о Файле и версии
Функция ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;

	Если ВерсияСсылка = Справочники.ВерсииФайлов.ПустаяСсылка() Тогда
		ВерсияСсылка = Неопределено;
	КонецЕсли;
	
	Если ВерсияСсылка = Неопределено Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	Файлы.Ссылка КАК Ссылка,
		               |	Файлы.Код КАК Код,
		               |	Файлы.Редактирует КАК Редактирует,
		               |	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		               |	Файлы.ВладелецФайла КАК ВладелецФайла,
		               |	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		               |	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		               |	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		               |	ВерсииФайлов.Расширение КАК Расширение,
		               |	ВерсииФайлов.Размер КАК Размер,
		               |	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		               |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		               |	ВерсииФайлов.Том КАК Том,
		               |	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		               |	ВерсииФайлов.Автор КАК Автор,
		               |	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
		               |ИЗ
		               |	Справочник.Файлы КАК Файлы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		               |		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;

		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Если ФайлСсылка <> Неопределено Тогда 
			Запрос.Текст = "ВЫБРАТЬ
			               |	Файлы.Ссылка КАК Ссылка,
						   |	Файлы.Код КАК Код,
			               |	Файлы.Редактирует КАК Редактирует,
			               |	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
			               |	Файлы.ВладелецФайла КАК ВладелецФайла,
			               |	Файлы.ХранитьВерсии КАК ХранитьВерсии,
						   |    Файлы.ПометкаУдаления КАК ПометкаУдаления,
			               |	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
			               |	ВерсииФайлов.Расширение КАК Расширение,
			               |	ВерсииФайлов.Размер КАК Размер,
						   |	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
						   |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
						   |	ВерсииФайлов.Том КАК Том,
			               |	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
						   |	ВерсииФайлов.Автор КАК Автор,
			               |	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
			               |ИЗ
			               |	Справочник.Файлы КАК Файлы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	Файлы.Ссылка = &Файл
			               |	И ВерсииФайлов.Ссылка = &Версия";
						   
			Запрос.Параметры.Вставить("Файл", ФайлСсылка);
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		Иначе
			Запрос.Текст = "ВЫБРАТЬ
			               |	Файлы.Ссылка КАК Ссылка,
						   |	Файлы.Код КАК Код,
			               |	Файлы.Редактирует КАК Редактирует,
			               |	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
			               |	Файлы.ВладелецФайла КАК ВладелецФайла,
			               |	Файлы.ХранитьВерсии КАК ХранитьВерсии,
						   |    Файлы.ПометкаУдаления КАК ПометкаУдаления,
			               |	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
			               |	ВерсииФайлов.Расширение КАК Расширение,
			               |	ВерсииФайлов.Размер КАК Размер,
						   |	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
						   |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
						   |	ВерсииФайлов.Том КАК Том,
			               |	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
						   |	ВерсииФайлов.Автор КАК Автор,
			               |	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
			               |ИЗ
			               |	Справочник.Файлы КАК Файлы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			               |		ПО (ИСТИНА)
			               |ГДЕ
			               |	ВерсииФайлов.Ссылка = &Версия
			               |	И Файлы.Ссылка = ВерсииФайлов.Владелец";
						   
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		КонецЕсли;	
		
	КонецЕсли;	
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("КодФайла", Выборка.Код);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;	

		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", ПолучитьНавигационнуюСсылку(ДанныеФайла.ТекущаяВерсия, "ФайлХранилище"));
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("НомерВерсии", Выборка.НомерВерсии);
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		ДанныеФайла.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ДанныеФайла.Вставить("АвторТекущейВерсии", Выборка.Автор);
		
		НаЧтение = ДанныеФайла.Редактирует <> ОбщегоНазначения.ТекущийПользователь();
		ДанныеФайла.Вставить("НаЧтение", НаЧтение);
		
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ИмяКаталога = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
		Если ИмяКаталога = Неопределено Тогда
			ИмяКаталога = "";
		КонецЕсли;	

		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(Выборка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;	

		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		ДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", "");
		
		РедактируетТекущийПользователь = (ДанныеФайла.Редактирует = ОбщегоНазначения.ТекущийПользователь());
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
		
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		Если Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "Извлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
			СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
		КонецЕсли;	
		ДанныеФайла.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
		
		МассивДанныеФайла.Добавить(ДанныеФайла); 
		
	КонецЦикла;
	
	// если был передан массив - возвращаем массив
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;

	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

// Получает строку из временного хранилища (передача с клиента на сервер 
//делается через временное хранилище)
Функция ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста)
	Если ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Возврат "";
 	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ПолучитьИзВременногоХранилища(АдресВременногоХранилищаТекста).Записать(ИмяВременногоФайла);

	ТекстовыйФайл = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Текст = ТекстовыйФайл.Прочитать();
	ТекстовыйФайл.Закрыть();
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Текст;
КонецФункции

// Создает карточку Файла в БД вместе с версией
Функция СоздатьФайлСВерсией(
	ВладелецФайла,
	ИмяБезРасширения,
	РасширениеБезТочки,
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер,
	АдресВременногоХранилищаФайла,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	Пользователь = Неопределено,
	Комментарий = "") Экспорт

	НачатьТранзакцию();
	Попытка

		// Создадим карточку Файла в БД
		Док = СоздатьФайл(
			ВладелецФайла,
			Комментарий,
			ИмяБезРасширения,
			РасширениеБезТочки,
			Истина,
			АдресВременногоХранилищаТекста,
			Пользователь);
		
		// Создадим версию сохраняемого файла для сохранения в карточке Файла
		Версия = СоздатьВерсию(
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			Док,
			ИмяБезРасширения,
			Размер,
			РасширениеБезТочки,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			Неопределено, // СсылкаНаВерсиюИсточник
			Неопределено, // НоваяВерсияДатаСоздания
			Пользователь);

		// Подставим ссылку на версию в карточку Файла
		ОбновитьВерсиюВФайле(Док, Версия, АдресВременногоХранилищаТекста);

		ЗафиксироватьТранзакцию();
	Исключение
	     ОтменитьТранзакцию();
	     ВызватьИсключение;
	КонецПопытки;

	Возврат Док;
КонецФункции

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ПолучитьДанныеФайла и ЗанятьФайл в одну функцию
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()


// получает ДанныеФайла и делает заем для массива файлов. При ошибке продолжает работу
//  в МассивДанныхФайла возвращает только успешно занятые файлы
Процедура ПолучитьДанныеИЗанятьМассивФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		ДанныеФайла = ПолучитьДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);

		СтрокаОшибки = "";
		Если РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			
			Если ДанныеФайла.Редактирует.Пустая() Тогда
				Если ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
					МассивДанныхФайла.Добавить(ДанныеФайла);
				КонецЕсли;	
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

// получает ДанныеФайла для подчиненных файлов и помещает в МассивДанныхФайла
Процедура ПолучитьДанныеМассиваФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		ДанныеФайла = ПолучитьДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// получает ДанныеФайла для файлов и помещает в МассивДанныхФайла
Процедура ПолучитьДанныеДляМассиваФайлов(Знач МассивФайлов, МассивДанныхФайла) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ПолучитьДанныеФайла(Файл, Неопределено);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры	


// Получает данные файла для открытия и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ПолучитьДанныеФайлаДляОткрытия и ЗанятьФайл в одну функцию
Функция ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, 
	УникальныйИдентификатор = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, Неопределено, УникальныйИдентификатор, РабочийКаталогВладельца);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					| Файл: ""%1.%2""'"),
					ВерсияСсылка.ПолноеНаименование,
					ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		Адрес = ПолучитьНавигационнуюСсылку(ВерсияСсылка, "ФайлХранилище");
	КонецЕсли;
	
	Возврат Адрес;
КонецФункции // ПолучитьНавигационнуюСсылкуДляОткрытия()

// Возвращает имя с расширением- если расширение пусто - только имя
Функция ПолучитьИмяСРасширением(ПолноеНаименование, Расширение) 
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
КонецФункции

// делает ПолучитьДанныеФайла и вычисляет РабочийКаталогВладельца
Функция ПолучитьДанныеФайлаИРабочийКаталог(ФайлСсылка, ВерсияСсылка = Неопределено, 
	РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = ПолучитьРабочийКаталог(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		
		ИмяФайлаСПутемВРабочемКаталоге = "";
		ИмяКаталога = ""; // путь к локал кеш здесь не используется
		ВРабочемКаталогеНаЧтение = Истина; // не используется 
		ВРабочемКаталогеВладельца = Истина;
		
		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ФайлСсылка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;	
		
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции // ПолучитьДанныеФайлаИРабочийКаталог()


// Формирует текст ошибки для помещения в журнал регистрации
Функция СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибкеФункции, ФайлСсылка) Экспорт
	СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеФункции);
	СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС + Нстр("ru = 'Ссылка на файл: '");
	Если ФайлСсылка <> Неопределено Тогда
		СообщениеОбОшибке = СообщениеОбОшибке + ПолучитьНавигационнуюСсылку(ФайлСсылка);
	КонецЕсли;
	Возврат СообщениеОбОшибке;
КонецФункции // ПолучитьДанныеФайлаИРабочийКаталог()

// делает ПолучитьДанныеФайла + ПоместитьВоВременноеХранилище (если файл хранится на диске)
Функция ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = ПолучитьРабочийКаталог(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ПолучитьИмяСРасширением(ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
					   |	ВерсииФайлов.Том КАК Том
					   |ИЗ
					   |	Справочник.ВерсииФайлов КАК ВерсииФайлов
					   |ГДЕ
					   |	ВерсииФайлов.Ссылка = &Версия";
					   
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = ""; 
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ФайлСсылка);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ФайлСсылка, СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					| Файл: ""%1.%2""'"),
					ДанныеФайла.ПолноеНаименованиеВерсии,
					ДанныеФайла.Расширение);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции // ПолучитьДанныеФайлаДляОткрытия()


// Освобождение Файла с получением данных
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(
		ФайлСсылка);
		
	ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);	
КонецПроцедуры	

// получает ДанныеФайла и делает освобождение для массива файлов. При ошибке продолжает работу
//  в МассивДанныхФайла возвращает только успешно освобожденные файлы
Процедура ПолучитьДанныеИОсвободитьМассивФайлов(МассивОтмеченныхПодчиненных, МассивДанныхФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	Для Каждого СтруктураПодчиненного Из МассивОтмеченныхПодчиненных Цикл
		
		ДанныеФайла = ПолучитьДанныеФайла(СтруктураПодчиненного.ПодчиненныйФайл, Неопределено);

		Если Не ДанныеФайла.Редактирует.Пустая() Тогда
			ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);	
			МассивДанныхФайла.Добавить(ДанныеФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	


// Процедура предназначена для опубликования файла без его освобождения
Процедура ПолучитьДанныеФайлаИОпубликоватьФайл(
	Файл, 
	ДанныеФайла,
	СоздаватьВерсию, 
	АдресВременногоХранилищаФайла, 
	Комментарий, 
	ВремяИзменения, 
	ВремяИзмененияУниверсальное,
	Размер, 
	ИмяБезРасширения, 
	Расширение, 
	ОтносительныйПутьКФайлу, 
	ПолныйПутьКФайлу,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	ТекстНеИзвлеченНаКлиенте,
	ВРабочемКаталогеВладельца,
	УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(
		Файл);
		
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;	
		
	НеМенятьЗаписьВРабочемКаталоге = Ложь;

	ОпубликоватьФайл(
		Файл, 
		СоздаватьВерсию,
		АдресВременногоХранилищаФайла,
		Комментарий,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Размер,
		ИмяБезРасширения,
		Расширение,
		ОтносительныйПутьКФайлу,
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент,
		ТекстНеИзвлеченНаКлиенте,
		ВРабочемКаталогеВладельца,
		НеМенятьЗаписьВРабочемКаталоге,
		УникальныйИдентификатор);
КонецПроцедуры	

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
Функция ПолучитьРабочийКаталог(СсылкаПапки) Экспорт
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат "";
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		Если Прав(РабочийКаталог,1) <> "\" Тогда
			РабочийКаталог = РабочийКаталог + "\";
		КонецЕсли;
	КонецЕсли;
	
	Возврат РабочийКаталог;
КонецФункции	

// Сохраняет в регистре сведений рабочий каталог папки
Процедура СохранитьРабочийКаталог(СсылкаПапки, РабочийКаталогВладельца) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(ОбщегоНазначения.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = ОбщегоНазначения.ТекущийПользователь();
	НоваяЗапись.Путь = РабочийКаталогВладельца;

	НаборЗаписей.Записать();
КонецПроцедуры


// Очищает в регистре сведений рабочий каталог папки
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(ОбщегоНазначения.ТекущийПользователь());
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
	
	// для дочерних папок очищаем рабочие каталоги
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПапкиФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Находит запись в регистре сведений ФайлыВРабочемКаталоге по пути файла на диске (относительному)
Функция НайтиВРегистреПоПути(Имяфайла, Версия, ДатаПомещения, Владелец, НомерВерсии, ВРегистреНаЧтение, ВРегистреКодФайла, ВРегистреПапка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Версия = Новый ("СправочникСсылка.ВерсииФайлов");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле 
	// Версия и Размер и ДатаПомещенияВРабочийКаталог
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Имяфайла", Имяфайла);
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	ЗапросВРегистр.Текст = "ВЫБРАТЬ
	                       |	ФайлыВРабочемКаталоге.Версия КАК Версия,
	                       |	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
						   |    ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталоге.Путь = &Имяфайла
	                       |	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Версия = Выборка.Версия;
		ДатаПомещения = Выборка.ДатаПомещенияВРабочийКаталог;
		
		Владелец = Версия.Владелец;
		НомерВерсии = Версия.НомерВерсии;
		ВРегистреНаЧтение = Выборка.НаЧтение;
		ВРегистреКодФайла = Версия.Владелец.Код;
		ВРегистреПапка = Владелец.ВладелецФайла;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает с сервера на клиент идентификатор текущего пользователя
Функция ПараметрыСеансаИдентификаторТекущегоПользователя() Экспорт
	Возврат ОбщегоНазначения.ТекущийПользователь().УникальныйИдентификатор();
КонецФункции

// Передает с клиента на сервер для записи массив настроек 
//(массив структур с полями Объект Настройка Значение)
Процедура ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур) Экспорт
	Для Каждого Элемент Из МассивСтруктур Цикл
		ХранилищеОбщихНастроек.Сохранить(Элемент.Объект, Элемент.Настройка, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

// Передает с клиента на сервер для записи массив настроек 
//(массив структур с полями Объект Настройка Значение)
// и параметр сеанса ПутьКРабочемуКаталогуПользователя
Процедура ХранилищеОбщихНастроекСохранитьМассивИПараметрСеансаРабочийКаталог(МассивСтруктур, ПутьКЛокальномуКэшуФайлов) Экспорт
	ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	УстановитьПараметрСеансаПутьКРабочемуКаталогуПользователя(ПутьКЛокальномуКэшуФайлов);
КонецПроцедуры

// Передает с клиента на сервер для записи настройку
Процедура ХранилищеОбщихНастроекСохранить(Объект, Настройка, Значение) Экспорт
	ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение);
КонецПроцедуры

// Передает с клиента на сервер для записи
Функция ХранилищеОбщихНастроекЗагрузить(Объект, Настройка) Экспорт
	Возврат ХранилищеОбщихНастроек.Загрузить(Объект, Настройка);
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге, и статус - на чтение или на редактирование)
Функция ПолучитьИмяФайлаСПутемИзРегистра(Версия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Версия.Ссылка);
	СтруктураОтбора.Вставить("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ИмяФайлаСПутем <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге)
Функция ПолучитьИмяФайлаИзРегистра(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Ссылка);
	СтруктураОтбора.Вставить("Пользователь", ОбщегоНазначения.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	
	Возврат ИмяФайлаСПутем;
КонецФункции

Процедура ЗаписатьИмяФайлаСПутемВРегистр(ТекущаяВерсия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(ОбщегоНазначения.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДата();
	НоваяЗапись.Пользователь = ОбщегоНазначения.ТекущийПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УдалитьИзРегистра(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(ОбщегоНазначения.ТекущийПользователь());
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУдалить = Новый Массив;
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();

	// для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст = "ВЫБРАТЬ 
	                       |	ФайлыВРабочемКаталоге.Версия КАК Версия,
	                       |	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	                       |ИЗ
	                       |	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	                       |ГДЕ
	                       |	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
						   |И   ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = Ложь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			Если Выборка.Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Выборка.Версия);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Версия из СписокУдалить Цикл
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(СтараяВерсия, НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, ВРабочемКаталогеВладельца)
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
КонецПроцедуры

Процедура ЗанестиИнформациюФайлаВРегистр(Версия, ПолныйПуть, ИмяКаталога, НаЧтение, РазмерФайла, ВРабочемКаталогеВладельца)  Экспорт
	ИмяФайлаСПутем = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		Если Найти(ПолныйПуть, ИмяКаталога) = 1 Тогда
			ИмяФайлаСПутем = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(ОбщегоНазначения.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе 
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДата();
	НоваяЗапись.Пользователь = ОбщегоНазначения.ТекущийПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;

	НаборЗаписей.Записать();
КонецПроцедуры

// Возвращает массив файлов в регистре сведений ФайлыВРабочемКаталоге
Функция СписокФайловВРегистре() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокФайлов = Новый Массив;
	ТекущийПользователь = ОбщегоНазначения.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	
	ЗапросВРегистр.Текст = 
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|   ФайлыВРабочемКаталоге.Путь КАК Путь
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|И	ВРабочемКаталогеВладельца = Ложь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Версия = Выборка.Версия;
			
			Запись = Новый Структура;
			Запись.Вставить("ДатаМодификацииУниверсальная", Версия.ДатаМодификацииУниверсальная);
			Запись.Вставить("ПолноеНаименование", Версия.ПолноеНаименование);
			Запись.Вставить("ИндексКартинки", Версия.ИндексКартинки);
			Запись.Вставить("Размер", Выборка.Размер);
			Запись.Вставить("Ссылка", Версия.Ссылка);
			Запись.Вставить("Редактирует", Версия.Владелец.Редактирует);
			Запись.Вставить("НаЧтение", Выборка.НаЧтение);
			Запись.Вставить("ЧастичныйПуть", Выборка.Путь);
			
			СписокФайлов.Добавить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокФайлов;
КонецФункции	

Функция СправочникиПапкиСоздатьЭлемент(Имя, Родитель, Пользователь = Неопределено) Экспорт
	Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	Папка.Наименование = Имя;
	Папка.Родитель = Родитель;
	Папка.ДатаСоздания = ТекущаяДата();
	
	Если Пользователь = Неопределено Тогда
		Папка.Ответственный = ОбщегоНазначения.ТекущийПользователь();
	Иначе	
		Папка.Ответственный = Пользователь;
	КонецЕсли;	
	
	Папка.Записать();
	Возврат Папка.Ссылка;
КонецФункции

// Формирует отчет для файлов с ошибками
Функция ИмпортФайловСформироватьОтчет(МассивИменФайловСОшибками) Экспорт
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Справочники.Файлы.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = "Файлы с ошибками:";
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = ТабМакет.ПолучитьОбласть("Строка");

	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		ОбластьСтрока.Параметры.Название = Выборка.ИмяФайла;
		ОбластьСтрока.Параметры.Ошибка = Выборка.Ошибка;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла; 	
	
	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(ТабДок);

	Возврат Отчет;
КонецФункции

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка из МассивСтруктур Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Путь, Размер, Версия, ДатаПомещенияВРабочийКаталог");
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;			
	
	МассивСтруктур = МассивСтруктурВозврат;	
КонецПроцедуры // СортироватьМассивСтруктур()

// Возвращает настройку - Спрашивать режим редактирования при открытии файла
Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ХранилищеОбщихНастроек.Загрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции	
	
// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение
Функция ДействиеПоДвойномуЩелчкуМыши()
	КакОткрывать = ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено Или КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат "ОткрыватьФайл";
	Иначе
		Возврат "ОткрыватьКарточку";
	КонецЕсли;
КонецФункции

// Считаем из настроек СпособСравненияВерсийФайлов
Функция СпособСравненияВерсийФайлов()
	СпособСравнения = ХранилищеОбщихНастроекЗагрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
	
	Если СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord Тогда
		Возврат "MicrosoftOfficeWord";
	ИначеЕсли СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.OpenOfficeOrgWriter Тогда
		Возврат "OpenOfficeOrgWriter";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца
Функция КоличествоЗанятыхФайлов(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Редактирует = &Редактирует
		|	И Файлы.ВладелецФайла = &Владелец";

	Запрос.УстановитьПараметр("Редактирует", ОбщегоНазначения.ТекущийПользователь());
	Запрос.УстановитьПараметр("Владелец", ВладелецФайла);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Количество;
	
	Возврат Результат;
КонецФункции

// Получает значение настройки  ПоказыватьКолонкуРазмер
Функция ПолучитьПоказыватьКолонкуРазмер() Экспорт
	ПоказыватьКолонкуРазмер = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	Возврат ПоказыватьКолонкуРазмер;
КонецФункции	
	
// Возвращает структуру, содержащую различные персональные настройки
// по работе с файлами
Функция ПолучитьПерсональныеНастройкиРаботыСФайламиСервер() Экспорт
	Настройки = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши());
	
	Настройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла());
	
	Настройки.Вставить("СпособСравненияВерсийФайлов", СпособСравненияВерсийФайлов());
	
	МаксимальныйРазмерЛокальногоКэшаФайлов = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов");
	Если МаксимальныйРазмерЛокальногоКэшаФайлов = Неопределено Тогда
		МаксимальныйРазмерЛокальногоКэшаФайлов = 100*1024*1024; // 100 мб		
		ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерЛокальногоКэшаФайлов", МаксимальныйРазмерЛокальногоКэшаФайлов);

	ПутьКЛокальномуКэшуФайлов = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
	Настройки.Вставить("ПутьКЛокальномуКэшуФайлов", ПутьКЛокальномуКэшуФайлов);
	
	УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования");
	Настройки.Вставить("УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования);
	
	ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов");
	Если ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Неопределено Тогда
		ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Ложь;
	КонецЕсли;
	Настройки.Вставить("ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов);
	
	Настройки.Вставить("ЭтоПолноправныйПользовательИБ", Пользователи.ЭтоПолноправныйПользовательИБ());
	
	ИзвлекатьТекстыФайловНаСервере = Константы.ИзвлекатьТекстыФайловНаСервере.Получить();
	
	Настройки.Вставить("ИзвлекатьТекстыФайловНаСервере", ИзвлекатьТекстыФайловНаСервере);
	
	МаксимальныйРазмерФайла = Константы.МаксимальныйРазмерФайла.Получить();
	Если МаксимальныйРазмерФайла = Неопределено ИЛИ МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 50*1024*1024; // 50 мб		
		Константы.МаксимальныйРазмерФайла.Установить(МаксимальныйРазмерФайла);
	КонецЕсли;
	Настройки.Вставить("МаксимальныйРазмерФайла", МаксимальныйРазмерФайла);
	
	ЗапретЗагрузкиФайловПоРасширению = Константы.ЗапретЗагрузкиФайловПоРасширению.Получить();
	Если ЗапретЗагрузкиФайловПоРасширению = Неопределено Тогда
		ЗапретЗагрузкиФайловПоРасширению = Ложь;
		Константы.ЗапретЗагрузкиФайловПоРасширению.Установить(ЗапретЗагрузкиФайловПоРасширению);
	КонецЕсли;
	Настройки.Вставить("ЗапретЗагрузкиФайловПоРасширению", ЗапретЗагрузкиФайловПоРасширению);
	
	СписокЗапрещенныхРасширений = Константы.СписокЗапрещенныхРасширений.Получить();
	Если СписокЗапрещенныхРасширений = Неопределено ИЛИ СписокЗапрещенныхРасширений = "" Тогда
		СписокЗапрещенныхРасширений = "COM EXE BAT CMD VBS VBE JS JSE WSF WSH SCR";
		Константы.СписокЗапрещенныхРасширений.Установить(СписокЗапрещенныхРасширений);
	КонецЕсли;
	Настройки.Вставить("СписокЗапрещенныхРасширений", СписокЗапрещенныхРасширений);
	
	ТипХраненияФайлов = Константы.ТипХраненияФайлов.Получить();
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ПустаяСсылка() Тогда
		ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		Константы.ТипХраненияФайлов.Установить(ТипХраненияФайлов);
	КонецЕсли;
	ФайлыХранятсяНаДиске = Ложь;
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		ФайлыХранятсяНаДиске = Истина;
	КонецЕсли;
	Настройки.Вставить("ФайлыХранятсяНаДиске", ФайлыХранятсяНаДиске);
	
	ОткрыватьНачалоРаботы = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ОткрыватьНачалоРаботыПриЗапуске");
    Если ОткрыватьНачалоРаботы = Неопределено Тогда
		ОткрыватьНачалоРаботы = Истина;
 	КонецЕсли;
	Настройки.Вставить("ОткрыватьНачалоРаботы", ОткрыватьНачалоРаботы);
	
	Настройки.Вставить("ТекущийПользователь", ОбщегоНазначения.ТекущийПользователь());	
	
	Настройки.Вставить("ИмяКонфигурации", Метаданные.Имя);

	ПоказыватьПодсказкиПриРедактированииФайлов = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов");
	Если ПоказыватьПодсказкиПриРедактированииФайлов = Неопределено Тогда
		ПоказыватьПодсказкиПриРедактированииФайлов = Истина;
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);

	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = РаботаСФайлами.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;	
	Настройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
	Возврат Настройки; 
КонецФункции

// Функция меняет ВладелецФайла объектам типа Справочник.Файл, вернет Истина при успехе
Функция УстановитьВладельцаФайла(МассивСсылокНаФайлы, НовыйВладелецФайла) Экспорт
	Если МассивСсылокНаФайлы.Количество() = 0 Или Не ЗначениеЗаполнено(НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивСсылокНаФайлы.Количество() > 0 И (МассивСсылокНаФайлы[0].ВладелецФайла = НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.ВладелецФайла = НовыйВладелецФайла;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции


// вернет Истина если есть зацикливание (если одну из папок переносим в ее же дочернюю папку)
Функция ЕстьЗацикливание(Знач МассивСсылокНаФайлы, НовыйРодитель)
	
	Если МассивСсылокНаФайлы.Найти(НовыйРодитель) <> Неопределено Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Родитель = НовыйРодитель.Родитель;
	Если Родитель.Пустая() Тогда // дошли до корня
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, Родитель) = Истина Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция меняет свойство Родитель объектам типа Справочник.ПапкиФайла, вернет Истина при успехе, 
// в переменной НайденоЗацикливание вернет Истина, если одну из папок переносим в ее же дочернюю папку
Функция СменитьРодителяПапок(МассивСсылокНаФайлы, НовыйРодитель, НайденоЗацикливание) Экспорт
	НайденоЗацикливание = Ложь;
	
	Если МассивСсылокНаФайлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивСсылокНаФайлы.Количество() = 1 И (МассивСсылокНаФайлы[0].Родитель = НовыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, НовыйРодитель) Тогда
		НайденоЗацикливание = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.Родитель = НовыйРодитель;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// вернет Истина, если в указанном элементе справочника ПапкиФайлов есть дочерний элемент с таким именем
Функция ЕстьПапкаСТакимИменем(ИмяФайла, Родитель, ПерваяПапкаСТакимЖеИменем) Экспорт
	
	ПерваяПапкаСТакимЖеИменем = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", Имяфайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                     |	ПапкиФайлов.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.ПапкиФайлов КАК ПапкиФайлов
	                     |ГДЕ
	                     |	ПапкиФайлов.Наименование = &Наименование
	                     |	И ПапкиФайлов.Родитель = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
		ПерваяПапкаСТакимЖеИменем = ВыборкаЗапроса[0].Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
КонецФункции

// вернет Истина, если в указанном элементе справочника ПапкиФайлов есть файл с таким именем
Функция ЕстьФайлСТакимИменем(ИмяФайла, Родитель) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", Имяфайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                     |	Файлы.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.Файлы КАК Файлы
	                     |ГДЕ
	                     |	Файлы.ПолноеНаименование = &Наименование
	                     |	И Файлы.ВладелецФайла = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Возврат Ложь;
КонецФункции

// в справочнике ВерсииФайлов из данных в Код(Строка) заполняет НомерВерсии(Число)
Процедура ЗаполнитьНомерВерсииИзКодаСправочника() Экспорт
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.ВерсииФайлов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			
			// коррекция ситуации, допустимой ранее, но недопустимой сейчас - активная версия помечена на удаление, а владелец - нет
			Если Объект.ПометкаУдаления = Истина И Объект.Владелец.ПометкаУдаления = Ложь И Объект.Владелец.ТекущаяВерсия = Объект.Ссылка Тогда
				Объект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			Объект.НомерВерсии = Число(Объект.Код);
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры	

// в справочнике ВерсииФайлов заполняет ТипХраненияФайла значением ВБазе
Процедура ЗаполнитьТипХраненияФайлаВБазе() Экспорт
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.ВерсииФайлов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры	

// для справочника ВерсииФайлов переименует файл на диске, если ТипХраненияФайла = ВТомахНаДиске
Процедура ПереименоватьФайлВерсииНаДиске(Версия, СтароеНаименование, НовоеНаименование) Экспорт
	
	Если НЕ Версия.Том.Пустая() Тогда
		Попытка
			ВерсияОбъект = Версия.ПолучитьОбъект();
			ВерсияОбъект.Заблокировать();
			
			СтарыйПолныйПуть = ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
			
			ФайлНаДиске = Новый Файл(СтарыйПолныйПуть);
			ПолныйПуть = ФайлНаДиске.Путь;
			ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения;
			Расширение = ФайлНаДиске.Расширение;
			НовоеИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, СтароеНаименование, НовоеНаименование);
			
			НовыйПолныйПуть = ПолныйПуть + НовоеИмяБезРасширения + Расширение;
			НовыйЧастичныйПуть = Прав(НовыйПолныйПуть, СтрДлина(НовыйПолныйПуть) - ПолныйПутьТома(Версия.Том));
		
			ПереместитьФайл(СтарыйПолныйПуть, НовыйПолныйПуть);
			ВерсияОбъект.ПутьКФайлу = НовыйЧастичныйПуть;
			ВерсияОбъект.Записать();
			ВерсияОбъект.Разблокировать();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры	

// в справочнике ВерсииФайлов и Файлы ИндексКартинки увеличивает в 2 раза
Процедура СменитьИндексПиктограммы() Экспорт
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.ВерсииФайлов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ИндексКартинки = РаботаСФайламиКлиентСервер.ПолучитьИндексПиктограммыФайла(Объект.Расширение);
			Объект.Записать();
		КонецЦикла;
		
		Выборка = Справочники.Файлы.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ИндексКартинки = Объект.ТекущаяВерсия.ИндексКартинки;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры	

// возвращает список занятых файлов
Функция ПолучитьЗанятыеФайлы(ВладелецФайла = Неопределено, Редактирует = Неопределено) Экспорт
	
	Список = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Представление КАК Представление
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Если Редактирует <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.Редактирует = &Редактирует ";
		Запрос.УстановитьПараметр("Редактирует", Редактирует);
	КонецЕсли;
	
	Если ВладелецФайла <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.ВладелецФайла = &ВладелецФайла ";
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;	
	
	Возврат Список;
	
КонецФункции

// помечает \ снимает пометку удаления у приложенных файлов
Процедура ПометитьНаУдалениеПриложенныеФайлы(ВладелецФайла, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПометкаУдаления И Не Выборка.Редактирует.Пустая() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален, т.к. содержит файл ""%2"", занятый для редактирования.'"),
				Строка(ВладелецФайла),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры	

// получает данные для переноса файла из одного списка приложенных файлов в другой
Функция ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлМассив, ВладелецФайла) Экспорт

	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Соответствие;
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если ТаблРезультат.Найти(ФайлСсылка, "Ссылка") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Пропустить");
		ИначеЕсли ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Обновить");
		Иначе 	
			Результат.Вставить(ФайлСсылка, "Скопировать");
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

// копирует файлы при переносе из одного списка приложенных файлов в другой
Функция СкопироватьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Источник = ФайлСсылка;
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		ПриемникОбъект = ИсточникОбъект.Скопировать();
		ПриемникОбъект.ВладелецФайла = ВладелецФайла;
		ПриемникОбъект.Записать();
		
		Приемник = ПриемникОбъект.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			Версия = РаботаСФайлами.СоздатьВерсию(
			ТекущаяДата(),
			УниверсальноеВремя(ТекущаяДата()),
			Приемник,
			Приемник.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			Источник.ТекущаяВерсия.ФайлХранилище,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);
			
			РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// обновляет версии одноименныз файлов при переносе из одного списка приложенных файлов в другой
Функция ОбновитьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		НайденнаяСтрока = ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование");
		
		Источник = ФайлСсылка;
		Приемник = НайденнаяСтрока.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			Версия = РаботаСФайлами.СоздатьВерсию(
			ТекущаяДата(),
			УниверсальноеВремя(ТекущаяДата()),
			Приемник,
			Приемник.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			Источник.ТекущаяВерсия.ФайлХранилище,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);
			
			РаботаСФайлами.ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Приемник;
	
КонецФункции

// заполняет условное оформление списка файлов
Процедура ЗаполнитьУсловноеОформлениеСпискаФайлов(Список) Экспорт
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = ОбщегоНазначения.ТекущийПользователь();
КонецПроцедуры	

// Возвращает с сервера на клиент идентификатор текущего пользователя
Функция ПараметрыСеансаПутьКРабочемуКаталогуПользователя() Экспорт
	УстановитьПривилегированныйРежим(Истина);   
	Возврат ПараметрыСеанса.ПутьКРабочемуКаталогуПользователя;
КонецФункции

// Сохраняет путь к рабочему каталогу пользователя в настройках и параметре сеанса
Процедура УстановитьПараметрСеансаПутьКРабочемуКаталогуПользователя(ИмяКаталога) Экспорт
	УстановитьПривилегированныйРежим(Истина);   
	ПараметрыСеанса.ПутьКРабочемуКаталогуПользователя = ИмяКаталога;
КонецПроцедуры	

// Сохраняет путь к рабочему каталогу пользователя в настройках и параметре сеанса
Процедура СохранитьПутьКРабочемуКаталогуПользователя(ИмяКаталога) Экспорт
	ХранилищеОбщихНастроекСохранить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяКаталога);	
	УстановитьПараметрСеансаПутьКРабочемуКаталогуПользователя(ИмяКаталога);
КонецПроцедуры	

// Выполняет установку параметра сеанса "ПутьКРабочемуКаталогуПользователя" при начале работы системы
//
// Параметры
//  ИмяПараметра  			- Строка - имя устанавливаемого параметра
//  УстановленныеПараметры  - Массив - массив, в котором собираются 
//                 имена установленных параметров сеанса
//
Процедура НачальнаяУстановкаПараметраСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт

	Если ИмяПараметра <> "ПутьКРабочемуКаталогуПользователя" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);   
	
	Если ИмяПараметра = "ПутьКРабочемуКаталогуПользователя" Тогда
		ПараметрыСеанса.ПутьКРабочемуКаталогуПользователя = "";
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры // ()

// Возвращает объект, для которого проверяется право доступа - для Файл это ПапкиФайлов (реквизит ВладелецФайла)
Функция ПолучитьОбъектДоступа(Объект) Экспорт
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Объект.ВладелецФайла;
	КонецЕсли;	
	
	Возврат Неопределено;
КонецФункции	

// Возвращает номер по нарастанию. Предыдущее значение берется из регистра сведений НомераСканированныхФайлов
Функция ПолучитьНовыйНомерДляСканирования(Владелец) Экспорт
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераСканированныхФайлов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
	
		// Получить структуру с данными ресурсов записи
		СтруктураРесурсов = РегистрыСведений.НомераСканированныхФайлов.Получить(СтруктураОтбора);
		   
		// Получить максимальный номер из регистра
		Номер = СтруктураРесурсов.Номер;
		Номер = Номер + 1; // увеличим на 1
		
		
		// запишем новый номер в регистр
		НаборЗаписей = РегистрыСведений.НомераСканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);

		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;

		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
		Возврат Номер;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	
	Возврат 0;
КонецФункции	

// Очищает настройки форм ФормаНового
Процедура ОчиститьНастройкиФормНовогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Очистка настроек окна ФормаНового
	ХранилищеСистемныхНастроек.Удалить("Справочник.Файлы.Форма.ФормаНового/НастройкиОкна", "", Неопределено);
	
КонецПроцедуры	

// Вернет размер файлов на томе - в байтах
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	               |ИЗ
	               |	Справочник.ВерсииФайлов КАК Версии
	               |ГДЕ
	               |	Версии.Том = &Том";
	
	Запрос.Параметры.Вставить("Том", СсылкаТома);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.РазмерФайлов);
	КонецЕсли;
	
	Возврат 0;
КонецФункции	

// Преобразует параметры сканера в виде чисел  - в перечисления
Процедура ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
	Разрешение, Цветность, Поворот, РазмерБумаги) Экспорт
	
	Если РазрешениеЧисло = 200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi200;
	ИначеЕсли РазрешениеЧисло = 300 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi300;
	ИначеЕсли РазрешениеЧисло = 600 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi600;
	ИначеЕсли РазрешениеЧисло = 1200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi1200;
	КонецЕсли;
	
	Если ЦветностьЧисло = 0 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Монохромное;
	ИначеЕсли ЦветностьЧисло = 1 Тогда
		Цветность = Перечисления.ЦветностиИзображения.ГрадацииСерого;
	ИначеЕсли ЦветностьЧисло = 2 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Цветное;
	КонецЕсли;
	
	Если ПоворотЧисло = 0 Тогда
		Поворот = Перечисления.ПоворотИзображения.НетПоворота;
	ИначеЕсли ПоворотЧисло = 90 Тогда
		Поворот = Перечисления.ПоворотИзображения.ВправоНа90;
	ИначеЕсли ПоворотЧисло = 180 Тогда
		Поворот = Перечисления.ПоворотИзображения.ВправоНа180;
	ИначеЕсли ПоворотЧисло = 270 Тогда
		Поворот = Перечисления.ПоворотИзображения.ВлевоНа90;
	КонецЕсли;
	
	Если РазмерБумагиЧисло = 0 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.НеЗадано;
	ИначеЕсли РазмерБумагиЧисло = 11 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A3;
	ИначеЕсли РазмерБумагиЧисло = 1 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A4;
	ИначеЕсли РазмерБумагиЧисло = 5 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A5;
	ИначеЕсли РазмерБумагиЧисло = 6 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B4;
	ИначеЕсли РазмерБумагиЧисло = 2 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B5;
	ИначеЕсли РазмерБумагиЧисло = 7 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B6;
	ИначеЕсли РазмерБумагиЧисло = 14 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C4;
	ИначеЕсли РазмерБумагиЧисло = 15 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C5;
	ИначеЕсли РазмерБумагиЧисло = 16 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C6;
	ИначеЕсли РазмерБумагиЧисло = 3 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLetter;
	ИначеЕсли РазмерБумагиЧисло = 4 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLegal;
	ИначеЕсли РазмерБумагиЧисло = 10 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USExecutive;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует число в перечисление и сохраняет в настройках
Процедура ПреобразоватьИСохранитьПараметрыСканера(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, 
		РазмерБумагиЧисло, ИдентификаторКлиента) Экспорт
	Перем Разрешение;
	Перем Цветность;
	Перем Поворот;
	Перем РазмерБумаги;
	
	ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
		Разрешение, Цветность, Поворот, РазмерБумаги);
	ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/Разрешение", ИдентификаторКлиента, Разрешение);
	ХранилищеОбщихНастроек.Сохранить("НастройкиСканирования/Цветность", ИдентификаторКлиента, Цветность);
КонецПроцедуры	

// Вызывается при обновлении на 1.0.6.3 - заполняет пути ТомаХраненияФайлов
Процедура ЗаполнитьПутиТома() Экспорт
	
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.ТомаХраненияФайлов.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.ПолныйПутьLinux = Объект.ПолныйПутьWindows;
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Переносит настройку (копирует в новое место, в старом удаляет)
Процедура ПеренестиНастройку(Объект, Настройка, ИмяТекущее, ИмяУстанавливаемое) 
	
	Значение = ХранилищеОбщихНастроек.Загрузить(Объект, Настройка, , ИмяТекущее);
	
	Если Значение <> Неопределено Тогда
		ХранилищеОбщихНастроек.Сохранить(Объект, Настройка, Значение, , ИмяУстанавливаемое);
		ХранилищеОбщихНастроек.Удалить(Объект, Настройка, ИмяТекущее);
	КонецЕсли;
КонецПроцедуры
	
// При переименовании пользователя переносит его настройки - РабочийКаталог, ДействиеПоДвойномуЩелчкуМыши и пр
Процедура ПеренестиНастройкиПриСменеИмениПользователи(знач ИмяТекущее, знач ИмяУстанавливаемое) Экспорт
	
	ПеренестиНастройку("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов", ИмяТекущее, ИмяУстанавливаемое); // путь к раб каталогу тоже переносим - чтобы файлы не потерялись
	ПеренестиНастройку("ЛокальныйКэшФайлов", "МаксимальныйРазмерЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ЛокальныйКэшФайлов", "ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ОткрыватьНачалоРаботыПриЗапуске", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляСохранитьКак", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("ИмяПапкиВыгрузки", "ИмяПапкиВыгрузки", ИмяТекущее, ИмяУстанавливаемое);
	
	ПеренестиНастройку("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", ИмяТекущее, ИмяУстанавливаемое);
	ПеренестиНастройку("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", ИмяТекущее, ИмяУстанавливаемое);
	
КонецПроцедуры

// Обработчик события ПриЗаписи. Определен для объектов (кроме Документ), владельцев Файла.
Процедура УстановитьПометкуУдаленияФайловПередЗаписью(Источник, Отказ) Экспорт
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриЗаписи. Определен для объектов типа Документ, владельцев Файла.
Процедура УстановитьПометкуУдаленияФайловДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Источник.ПометкаУдаления <> Источник.Ссылка.ПометкаУдаления Тогда 
		ПометитьНаУдалениеПриложенныеФайлы(Источник.Ссылка, Источник.ПометкаУдаления);
	КонецЕсли;
КонецПроцедуры

// получает первые 100 версий файлов, у которых еще не извлечен текст 
Функция ПолучитьМассивВерсийДляИзвлеченияТекста() Экспорт
	
	МассивВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 			
	 "ВЫБРАТЬ ПЕРВЫЕ 100
	 |	ВерсииФайлов.Ссылка КАК Ссылка,
	 |	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
	 |ИЗ
	 |	Справочник.ВерсииФайлов КАК ВерсииФайлов
	 |ГДЕ
	 |	(ВерсииФайлов.СтатусИзвлеченияТекста = &Статус
	 |			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	
	Результат = Запрос.Выполнить();
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		ВерсияСсылка = Строка.Ссылка;
		МассивВерсий.Добавить(ВерсияСсылка);
	КонецЦикла;
	
	Возврат МассивВерсий;
	
КонецФункции

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста
Процедура ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста) Экспорт
	
	ФайлЗаблокирован = Ложь;
	Файл = ВерсияСсылка.Владелец;
	
	Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ФайлЗаблокирован = Истина;
		Исключение
			Возврат; // ничего не сообщаем
		КонецПопытки;
		
	КонецЕсли;
	
	Текст = "";
	
	ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
	
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка

		ВерсияОбъект.Записать();

		Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ВерсияОбъект.ТекстХранилище;
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// получает массив ссылок всех файлов в папке (если Рекурсивно, то и в подпапках тоже)
Функция ПолучитьВсеФайлыВПапке(Папка, Рекурсивно) Экспорт
	
	МассивФайлов = Новый Массив;
	
	ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов);
	
	Если Рекурсивно Тогда
		
		МассивПапок = Новый Массив;
		
		ЗапросВПапки = Новый Запрос;
		ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
		ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                     |	ПапкиФайлов.Ссылка КАК Ссылка
		                     |ИЗ
		                     |	Справочник.ПапкиФайлов КАК ПапкиФайлов
		                     |ГДЕ
		                     |	ПапкиФайлов.Родитель В ИЕРАРХИИ(&Родитель)";
		
		Результат = ЗапросВПапки.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПапок.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Для Каждого Подпапка Из МассивПапок Цикл
			ПолучитьВсеФайлыВОднойПапке(Подпапка, МассивФайлов);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат МассивФайлов;
КонецФункции	

// получает массив ссылок всех файлов в папке
Процедура ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
	ЗапросВПапки.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						 |	Файлы.Ссылка КАК Ссылка
						 |ИЗ
						 |	Справочник.Файлы КАК Файлы
						 |ГДЕ
						 |	Файлы.ВладелецФайла = &Родитель";
	
	Результат = ЗапросВПапки.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры


// получает ДанныеФайла и НавигационнуюСсылкуВерсии
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсии(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	НавигационнаяСсылкаВерсии = РаботаСФайлами.ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы);

	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
КонецФункции

// Получает данные файла для открытия и читает их Общих настроек ПапкаДляСохранитьКак
Функция ПолучитьДанныеФайлаДляСохранения(ФайлСсылка, ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы, РабочийКаталогВладельца);
	
	ПапкаДляСохранитьКак = ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);

	Возврат ДанныеФайла;
КонецФункции // ПолучитьДанныеФайлаИЗанятьФайл()

// в справочнике Файлы перезаписывает все элементы
Процедура ПерезаписатьВсеФайлы() Экспорт
	НачатьТранзакцию();
	Попытка
		Выборка = Справочники.Файлы.Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.ПолучитьОбъект();
			Объект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры	




// делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
Функция ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				ЗаписьЖурналаРегистрации("Открытие файла", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ВерсияСсылка.Владелец, СообщениеОбОшибке);
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка открытия файла - файл не найден на сервере. Возможно он удален антивирусной программой. Обратитесь к администратору.
					| Файл: ""%1.%2""'"),
					ВерсияСсылка.ПолноеНаименование,
					ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ДвоичныеДанные = ВерсияСсылка.ФайлХранилище.Получить();
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Адрес;
КонецФункции // ПолучитьНавигационнуюСсылкуДляОткрытия()

// получает ДанныеФайла и НавигационнуюСсылкуВерсии, предварительно поместив файл версии во временное хранилище
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВоВременномХранилище(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;	
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);

	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
КонецФункции
