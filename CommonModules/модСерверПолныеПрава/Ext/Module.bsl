
//----------------------- ПОВТОРНОЕ ПОЛУЧЕНИЕ ШК НОМЕРА_РО С ДЕЛЬФИ -------------//

Функция ПолучитьШК_Дельфи(СчетФ,Орг) Экспорт
	
//	//---------------------- АСКЛЕПИЙ ------------------------//
//Если Орг="Асклепий" Тогда	
//	Парам=Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
//	Парам.СтрокаСоединения="DRIVER={SQL Server};SERVER=SRVGLOB;UID=askabc;PWD=!QAZ2wsx;DATABASE=SergeliNew";
//	ВнешниеИсточникиДанных.SRVGLOB.УстановитьОбщиеПараметрыСоединения(Парам);
//	Если  ВнешниеИсточникиДанных.SRVGLOB.ПолучитьСостояние()=СостояниеВнешнегоИсточникаДанных.Отключен Тогда
//		ВнешниеИсточникиДанных.SRVGLOB.УстановитьСоединение();
//	КонецЕсли;
//	//Сообщить(ВнешниеИсточникиДанных.SRVGLOB.ПолучитьСостояние());
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	dbo_INVOICE.InvoiceId,
//	|	dbo_INVOICE.Number,
//	|	dbo_INVOICE.BarCode как ШК
//	|ИЗ
//	|	ВнешнийИсточникДанных.SRVGLOB.Таблица.dbo_INVOICE КАК dbo_INVOICE
//	|ГДЕ
//	|	dbo_INVOICE.Number = &СчетФ";
//	
//	Запрос.УстановитьПараметр("СчетФ", СчетФ);
//	
//	Результат = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Если СокрЛП(ВыборкаДетальныеЗаписи.ШК)<>"" Тогда
//			Возврат  ВыборкаДетальныеЗаписи.ШК;	
//		Иначе
//			Возврат  "Нет в Дельфи.(Асклепий)";	
//		КонецЕсли;
//		
//	КонецЦикла;
	
	//-----------------------------------------------------------------------//
	//Определяем Организацию
	Организация="";
	ВИ="";
	Если СтрДлина(СокрЛП(СчетФ))=5 Тогда // Это Асклепий
		Организация="АСК";
		ВИ="SRVGLOB";
	ИначеЕсли Найти(СчетФ,"опт")>0 Тогда // Это НФС_ОПТ
		Организация="НФС_ОПТ";
		ВИ="NFS_OPT"
	ИначеЕсли Найти(СчетФ,"апт")>0 Тогда // Это НФС_АПТ
		Организация="НФС_АПТ";
		ВИ="NFS_APT"
	КонецЕсли;
	 
	 Если Организация="" Тогда
		 Возврат "Неопределен(1)";
	 КонецЕсли;
	 
		 
	//--- ПОДКЛЮЧЕНИЕ ---------
	ПопыткаПодключение=ПодключитьВнешнийИсточник(Организация) ;
	Если ПопыткаПодключение<>СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		Возврат "Неопределен(2)";
	КонецЕсли;
	
	//----- ВЫБОРКА -------
	СчетФ=Лев(СчетФ,5);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_INVOICE.InvoiceId,
		|	dbo_INVOICE.Number,
		|	dbo_INVOICE.BarCode как ШК
		|ИЗ
		|	ВнешнийИсточникДанных."+ВИ+".Таблица.dbo_INVOICE КАК dbo_INVOICE
		|ГДЕ
		|	dbo_INVOICE.Number = &СчетФ";

	Запрос.УстановитьПараметр("СчетФ", СчетФ);


	Результат = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СокрЛП(ВыборкаДетальныеЗаписи.ШК)<>"" Тогда
			Возврат  ВыборкаДетальныеЗаписи.ШК;	
		Иначе
			Возврат  "Нет в Дельфи.";	
		КонецЕсли;
		
	КонецЦикла;

 	
	
КонецФункции

Функция ПолучитьШК_ДельфиПоНомеруРасходногоОрдера(НомерРасходногоОрдера,Орг) Экспорт
	
	
	//-----------------------------------------------------------------------//
	//Определяем Организацию
	Организация="";
	ВИ=""; //Внешний Источник
	Если Орг="Асклепий" Тогда // Это Асклепий
		Организация="АСК";
		ВИ="SRVGLOB";
		НомерРО=Число(СокрЛП(НомерРасходногоОрдера));
		
	ИначеЕсли Орг="НФС" Тогда  // Это НФС
		
		Если Найти(НомерРасходногоОрдера,"*")>0 Тогда  // Это НФС_АПТ
			Организация="НФС_АПТ";
			ВИ="NFS_APT";
			НомерРасходногоОрдера=СокрЛП(СтрЗаменить(НомерРасходногоОрдера,"*","")); // Убираем звездочку и пробелы
			НомерРасходногоОрдера=Сред(НомерРасходногоОрдера,4); // Берем Все кроме первых трех цифр
			НомерРО=Число(НомерРасходногоОрдера); // Преобразуем в число
		Иначе  // Это НФС_ОПТ
			Организация="НФС_ОПТ";
			ВИ="NFS_OPT" ;
			НомерРасходногоОрдера=СокрЛП(НомерРасходногоОрдера); // Убираем  пробелы
			НомерРасходногоОрдера=Сред(НомерРасходногоОрдера,4); // Берем Все кроме первых трех цифр
			НомерРО=Число(НомерРасходногоОрдера); // Преобразуем в число
       	КонецЕсли;
	Иначе
		
	КонецЕсли;
	 
	 Если Организация="" Тогда
		 Возврат "Неопределен(1)";
	 КонецЕсли;
	 
		 
	//--- ПОДКЛЮЧЕНИЕ ---------
	ПопыткаПодключение=ПодключитьВнешнийИсточник(Организация) ;
	Если ПопыткаПодключение<>СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		Возврат "Неопределен(2)";
	КонецЕсли;
	
	//----- ВЫБОРКА -------
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_INVOICE.InvoiceId,
		|	dbo_INVOICE.Number,
		|	dbo_INVOICE.BarCode как ШК
		|ИЗ
		|	ВнешнийИсточникДанных."+ВИ+".Таблица.dbo_INVOICE КАК dbo_INVOICE
		|ГДЕ
		|	dbo_INVOICE.InvoiceId = &НомерРО";

	Запрос.УстановитьПараметр("НомерРО", НомерРО);


	Результат = Запрос.Выполнить();
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если СокрЛП(ВыборкаДетальныеЗаписи.ШК)<>"" Тогда
			Возврат  ВыборкаДетальныеЗаписи.ШК;	
		Иначе
			Возврат  "Нет в Дельфи.";	
		КонецЕсли;
		
	КонецЦикла;

 	
	
КонецФункции



Функция ПолучитьДокументРО_ДельфиПоШК(ШК) Экспорт
	
			
	ШК=СокрЛП(ШК);
	
	//Проверка на длину ШК
	Если СтрДлина(ШК) <> 12 Тогда
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Длина ШК должна быть 12 символов");
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ШК=Лев(ШК,12);// Берем только 12 символов
	
	//Определяем Организацию
	Если Лев(ШК,4)="2042" Тогда //АСК
		Организация="АСК";
		ОрганизацияПоДокументу= "Асклепий";
		ВИ="SRVGLOB"; // Внешний Источник данных
	ИначеЕсли  Лев(ШК,4)="2040" Тогда //НФС_АПТ
		Организация="НФС_АПТ";
		ОрганизацияПоДокументу= "НФС";
		ВИ="NFS_APT";
     ИначеЕсли  Лев(ШК,4)="2041" Тогда //НФС_ОПТ
		Организация="НФС_ОПТ";
		ОрганизацияПоДокументу= "НФС";
		ВИ="NFS_OPT" ;
	Иначе
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Неизвестный тип Штрихкода.");
		Возврат РезультатПоиска;
	КонецЕсли;
	
	//--- ПОДКЛЮЧЕНИЕ ---------
	ПопыткаПодключение=ПодключитьВнешнийИсточник(Организация) ;
	Если ПопыткаПодключение<>СостояниеВнешнегоИсточникаДанных.Подключен Тогда
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Неудалось подключиться к серверу ДЕЛЬФИ.");
		Возврат РезультатПоиска;
	КонецЕсли;

	 //----- ВЫБОРКА -------
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_INVOICE.InvoiceId Как НомерРО,
		|	dbo_INVOICE.Number Как НомерСчетФ,
		|	dbo_INVOICE.Data Как ДатаДокумента,
		|	dbo_INVOICE.ClientId Как КодКонтрагента,
		|	dbo_INVOICE.Comment Как Комментарий,
		|	dbo_INVOICE.BarCode как ШК
		|ИЗ
		|	ВнешнийИсточникДанных."+ВИ+".Таблица.dbo_INVOICE КАК dbo_INVOICE
		|ГДЕ
		|	dbo_INVOICE.BarCode = &ШК";

	Запрос.УстановитьПараметр("ШК", ШК);


	Результат = Запрос.Выполнить();
		
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		ДатаДокумента=Выборка.ДатаДокумента;
		 
		//НомерРО= СтрЗаменить(НомерРО," ","");
		НомерСчетФ= Строка(Формат(Выборка.НомерСчетФ,"ЧГ=0"));
		//НомерСчетФ=СтрЗаменить(НомерСчетФ," ","");
		КодКонтрагента=Строка(Формат(Выборка.КодКонтрагента,"ЧГ=0"));
		Если  Организация="НФС_АПТ" Тогда
			НомерРО=Строка(Формат(Выборка.НомерРО,"ЧЦ=7; ЧВН=; ЧГ=0")); 
			НомерРО="40"+НомерРО + " *";
			НомерСчетФ=(НомерСчетФ)+" (апт)";
			КодКонтрагента ="НФС"+КодКонтрагента;
		ИначеЕсли  Организация="НФС_ОПТ" Тогда
			НомерРО=Строка(Формат(Выборка.НомерРО,"ЧЦ=7; ЧВН=; ЧГ=0")); 
			НомерРО="41"+НомерРО;
			НомерСчетФ=(НомерСчетФ)+" (опт)";
			КодКонтрагента ="НФС"+КодКонтрагента;
		Иначе
			НомерРО=Строка(Формат(Выборка.НомерРО,"ЧГ=0")); 
			КодКонтрагента ="АСК"+КодКонтрагента;
		КонецЕсли;
		
		Получатель=Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
		Комментарий=Выборка.Комментарий;
		
		//Сообщить(КодКонтрагента);
		//Сообщить(Получатель);
		
		РезультатТекст ="Документ Расходный ордер "+НомерРО+"(СФ - "+НомерСчетФ+")"+" от "+ДатаДокумента+" получен с ДЕЛЬФИ.";
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Найден",РезультатТекст,ДатаДокумента,НомерРО,НомерСчетФ,Получатель,Комментарий,ОрганизацияПоДокументу);
		Возврат РезультатПоиска;
	
			
	Иначе
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Документ в ДЕЛЬФИ не найден.");
		Возврат РезультатПоиска;

	КонецЕсли;

	
КонецФункции

 
Функция ПолучитьДокументРО_ДельфиПоШК_Вариант2(ШК) Экспорт
	
			
	ШК=СокрЛП(ШК);
	
	//Проверка на длину ШК
	Если СтрДлина(ШК) <> 12 Тогда
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Длина ШК должна быть 12 символов");
		Возврат РезультатПоиска;
	КонецЕсли;
	
	ШК=Лев(ШК,12);// Берем только 12 символов
	
	//Определяем Организацию
	Если Лев(ШК,4)="2042" Тогда //АСК
		Организация="АСК";
		ОрганизацияПоДокументу= "Асклепий";
		СтрокаСоединения=Константы.СтрокаСоединения_АСК_СОМ.Получить(); // 
	ИначеЕсли  Лев(ШК,4)="2040" Тогда //НФС_АПТ
		Организация="НФС_АПТ";
		ОрганизацияПоДокументу= "НФС";
		СтрокаСоединения=Константы.СтрокаСоединения_НФС_АПТ.Получить();
     ИначеЕсли  Лев(ШК,4)="2041" Тогда //НФС_ОПТ
		Организация="НФС_ОПТ";
		ОрганизацияПоДокументу= "НФС";
		СтрокаСоединения=Константы.СтрокаСоединения_НФС_ОПТ_СОМ.Получить();
	Иначе
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Неизвестный тип Штрихкода.");
		Возврат РезультатПоиска;
	КонецЕсли;
	
	//--- ПОДКЛЮЧЕНИЕ ---------
	objRecordset = ПолучитьОбъектПодключения(СтрокаСоединения);

	
	
	//----- ВЫБОРКА -------
	стрЗапрос = "EXEC bGetInvoiceByBarCode @BarCode='"+ШК+"'";

	objRecordset.Open(стрЗапрос);
	objRecordset.MoveFirst();
	
НомерРО=objRecordset.Fields("InvoiceId").Value;
ДатаДокумента=objRecordset.Fields("Data").Value;
НомерСчетФ=objRecordset.Fields("Number").Value;
КодКонтрагента=objRecordset.Fields("ClientId").Value;
Комментарий=objRecordset.Fields("Comment").Value;
КоличествоИтог=objRecordset.Fields("TotalKolich").Value;
КоличествоПозиций=objRecordset.Fields("CountKolich").Value;
СуммаПоДокументу=objRecordset.Fields("Summa").Value;
 
   
		//НомерРО= СтрЗаменить(НомерРО," ","");
		НомерСчетФ= Строка(Формат(НомерСчетФ,"ЧГ=0"));
		//НомерСчетФ=СтрЗаменить(НомерСчетФ," ","");
		КодКонтрагента=Строка(Формат(КодКонтрагента,"ЧГ=0"));
		Если  Организация="НФС_АПТ" Тогда
			НомерРО=Строка(Формат(НомерРО,"ЧЦ=7; ЧВН=; ЧГ=0")); 
			НомерРО="40"+НомерРО + " *";
			НомерСчетФ=(НомерСчетФ)+" (апт)";
			КодКонтрагента ="НФС"+КодКонтрагента;
		ИначеЕсли  Организация="НФС_ОПТ" Тогда
			НомерРО=Строка(Формат(НомерРО,"ЧЦ=7; ЧВН=; ЧГ=0")); 
			НомерРО="41"+НомерРО;
			НомерСчетФ=(НомерСчетФ)+" (опт)";
			КодКонтрагента ="НФС"+КодКонтрагента;
		Иначе
			НомерРО=Строка(Формат(НомерРО,"ЧГ=0")); 
			КодКонтрагента ="АСК"+КодКонтрагента;
		КонецЕсли;
		
		Получатель=Справочники.Контрагенты.НайтиПоКоду(КодКонтрагента);
		
		//Сообщить(КодКонтрагента);
		//Сообщить(Получатель);
		
		РезультатТекст ="Документ Расходный ордер "+НомерРО+"(СФ - "+НомерСчетФ+")"+" от "+ДатаДокумента+" получен с ДЕЛЬФИ.";
		РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Найден",РезультатТекст,ДатаДокумента,НомерРО,НомерСчетФ,
		Получатель,Комментарий,ОрганизацияПоДокументу,КоличествоИтог,КоличествоПозиций,СуммаПоДокументу);
		Возврат РезультатПоиска;
	
			
	Если  СтрДлина(НомерРО)=0 Тогда
	РезультатПоиска=СформироватьСтруктуруРезультатаПоиска("Ошибка","Документ в ДЕЛЬФИ не найден.");
		Возврат РезультатПоиска;
    КонецЕсли;

	
КонецФункции

Функция ПолучитьИсториюШК(НомерСФ,ДатаСФ,Организация) Экспорт
	
	ТЗисторияШК=Новый ТаблицаЗначений;
	ТЗисторияШК.Колонки.Добавить("ШК");
	ТЗисторияШК.Колонки.Добавить("Дата");
	
	
	НомерСФ=СокрЛП(НомерСФ);
	ДатаСчетФактуры=Строка(Формат(ДатаСФ,"ДФ=ггггММдд"));
	//Сообщить(ДатаСФ);	
	//Сообщить(ДатаСчетФактуры);	

	//Определяем Организацию
	Если Организация="АСК" Тогда //АСК
		СтрокаСоединения=Константы.СтрокаСоединения_АСК_СОМ.Получить(); // 
	ИначеЕсли  Организация="НФС_АПТ" Тогда //НФС_АПТ
		СтрокаСоединения=Константы.СтрокаСоединения_НФС_АПТ.Получить();
     ИначеЕсли Организация="НФС_ОПТ" Тогда //НФС_ОПТ
		СтрокаСоединения=Константы.СтрокаСоединения_НФС_ОПТ_СОМ.Получить();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
//Сообщить(СтрокаСоединения);	
//--- ПОДКЛЮЧЕНИЕ ---------
	objRecordset = ПолучитьОбъектПодключения(СтрокаСоединения);
	
	//----- ВЫБОРКА -------
	
	стрЗапрос = "EXEC bGetBarCodeHistory  @Number='"+НомерСФ+"' ,@Data ='"+ДатаСчетФактуры+"'";
   //Сообщить(стрЗапрос);
	objRecordset.Open(стрЗапрос);
	//objRecordset.MoveFirst();
	Если Число(objRecordset.State) <> 0 Тогда
		Если objRecordset.EOF = 0 Тогда
			objRecordset.MoveFirst();
		КонецЕсли;

	Пока objRecordset.EOF = 0 Цикл
		новаяСтрока=ТЗисторияШК.Добавить();
		новаяСтрока.ШК=objRecordset.Fields("BarCode").Value;
		новаяСтрока.Дата=objRecordset.Fields("Data").Value;
		objRecordset.MoveNext();
	КонецЦикла;
	
КонецЕсли;	
	
	objRecordset.Close();

	
	 Возврат ТЗисторияШК;
	
	
КонецФункции


Функция СформироватьСтруктуруРезультатаПоиска(Результат,РезультатТекст="",ДатаДокумента=Неопределено,
	НомерРО=Неопределено,НомерСчетФ=Неопределено,Получатель=Неопределено,
	Комментарий=Неопределено,ОрганизацияПоДокументу=Неопределено,
	КоличествоИтог=Неопределено,КоличествоПозиций=Неопределено,СуммаПоДокументу=Неопределено)
	
	РезультатПоиска=Новый Структура;
	
	РезультатПоиска.Вставить("Результат",Результат);
	РезультатПоиска.Вставить("РезультатТекст",РезультатТекст);
	РезультатПоиска.Вставить("ДатаДокумента",ДатаДокумента);
	РезультатПоиска.Вставить("НомерРО",НомерРО);
	РезультатПоиска.Вставить("НомерСчетФ",НомерСчетФ);
	РезультатПоиска.Вставить("Получатель",Получатель);
    РезультатПоиска.Вставить("Комментарий",Комментарий);
    РезультатПоиска.Вставить("ОрганизацияПоДокументу",ОрганизацияПоДокументу);
	РезультатПоиска.Вставить("КоличествоИтог",КоличествоИтог);
	РезультатПоиска.Вставить("КоличествоПозиций",КоличествоПозиций);
	РезультатПоиска.Вставить("СуммаПоДокументу",СуммаПоДокументу);

	Возврат  РезультатПоиска;

		
		

	
КонецФункции


Функция ПодключитьВнешнийИсточник(Организация)  Экспорт
	
	//Парам.СтрокаСоединения="DRIVER={SQL Server};SERVER=SRVGLOB;UID=askabc;PWD=!QAZ2wsx;DATABASE=SergeliNew";
	Парам=Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	Если Организация="АСК" Тогда
		Парам.СтрокаСоединения=Константы.СтрокаСоединения_SRVGLOB.Получить();
		ВнешИСТ=ВнешниеИсточникиДанных.SRVGLOB;
	ИначеЕсли  Организация="НФС_АПТ" Тогда
		Парам.СтрокаСоединения=Константы.СтрокаСоединения_НФС_ОПТ.Получить();
		ВнешИСТ=ВнешниеИсточникиДанных.NFS_OPT;
	ИначеЕсли  Организация="НФС_ОПТ" Тогда
		Парам.СтрокаСоединения=Константы.СтрокаСоединения_НФС_АПТ.Получить();
		ВнешИСТ=ВнешниеИсточникиДанных.NFS_APT;
	КонецЕсли;
	
	ВнешИСТ.УстановитьОбщиеПараметрыСоединения(Парам);
	Если  ВнешИСТ.ПолучитьСостояние()=СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		ВнешИСТ.УстановитьСоединение();
	КонецЕсли;
		
	Возврат ВнешИСТ.ПолучитьСостояние();		
	
		
КонецФункции


Функция ОбновитьШКдокумента_Дельфи(ДокБЯС) Экспорт // Для Сборки
	
	Док= ДокБЯС.ПолучитьОбъект();
	Для Каждого Стр из Док.ДокументыРасхода Цикл
					//ПолучитШК  Дельфи	
			Попытка
				//Стр.ШК=модСерверПолныеПрава.ПолучитьШК_Дельфи(СокрЛП(Стр.СчетФ),СокрЛП(Док.Организация));
				Стр.ШК=модСерверПолныеПрава.ПолучитьШК_ДельфиПоНомеруРасходногоОрдера(СокрЛП(Стр.ДокНомер),СокрЛП(Док.Организация));
 			Исключение
			КонецПопытки;
	КонецЦикла;
   Док.Записать(РежимЗаписиДокумента.Запись);
	
КонецФункции


//-------------ЖУРНАЛ ИЗМЕНЕНИЙ ДОК --------------------------------//


 Процедура ЗаписатьВЖурналИзмененийДокументов(Действие,докОбъект,Пользователь,Комментарий)  Экспорт
	
Попытка	
	  	
	НаборЗаписей = РегистрыСведений.ЖурналИзмененийДокументов.СоздатьНаборЗаписей(); 
	НоваяЗапись = НаборЗаписей.Добавить(); 
	//НоваяЗапись.СЧ = Константы.СчетчикЖурналаИзмененийДокументов.Получить();
	 НоваяЗапись.СЧ = Число(Формат(ПолучитьОперативнуюОтметкуВремени(),"ДФ=MMddHHmmss" ) );
	НоваяЗапись.ДВ = ТекущаяДата(); 
	НоваяЗапись.Действие = Действие; 
	НоваяЗапись.СсылкаНаОбъект = докОбъект.Ссылка; 
	НоваяЗапись.Пользователь =Пользователь; 
	
	НоваяЗапись.Комментарий = "№-"+докОбъект.Номер+" от "+докОбъект.Дата+"..."+Строка(докОбъект); 
	
	Если ТипЗнч(докОбъект)=Тип("ДокументОбъект.ПутевойЛист_2") Тогда
		НоваяЗапись.Комментарий=Комментарий+" ПУТЕВОЙ ЛИСТ ";
	КонецЕсли;
	Если ТипЗнч(докОбъект)=Тип("ДокументОбъект.ПогрузкаТоваровВАвтомобиль") Тогда
		НоваяЗапись.Комментарий="Погрузка Товаров В Автомобиль Ордер СФ-"+докОбъект.ДокументОснование.НомераСФ + " №-"+докОбъект.Номер+
		" от "+докОбъект.Дата;
	КонецЕсли;
	

	НаборЗаписей.Записать(Ложь); 
	
	//Константы.СчетчикЖурналаИзмененийДокументов.Установить(Константы.СчетчикЖурналаИзмененийДокументов.Получить()+1);
Исключение	
		Комментарий=Строка(ОписаниеОшибки())+ "-"+Строка(докОбъект);
		ЗаписьЖурналаРегистрации("ОШИБКА-ЗаписатьВЖурналИзмененийДокументов", 
		УровеньЖурналаРегистрации.Информация, , ,
		Комментарий);

КонецПопытки;

	
КонецПроцедуры



//------- РЕЕСТР --------------------//

 Функция  ЗагрузитьРеестрИзДельфи(НомерРеестра) Экспорт
	РезультатЗагрузки=Новый Структура;
	РезультатЗагрузки.Вставить("Реестр");
	РезультатЗагрузки.Вставить("СообщениеОшибки");
	
	//1.Соединяемся с ДЕЛЬФИ
	Парам=Новый ПараметрыСоединенияВнешнегоИсточникаДанных;
	//Парам.СтрокаСоединения="DRIVER={SQL Server};SERVER=SRVGLOB;UID=askabc;PWD=!QAZ2wsx;DATABASE=SergeliNew";
	Парам.СтрокаСоединения=Константы.СтрокаСоединения_TRANSRAS.Получить();
	ВнешниеИсточникиДанных.TRANSRAS.УстановитьОбщиеПараметрыСоединения(Парам);
	Если  ВнешниеИсточникиДанных.SRVGLOB.ПолучитьСостояние()=СостояниеВнешнегоИсточникаДанных.Отключен Тогда
		Попытка
		ВнешниеИсточникиДанных.SRVGLOB.УстановитьСоединение();
	Исключение
		РезультатЗагрузки.Реестр=Неопределено;
		РезультатЗагрузки.СообщениеОшибки="Ошибка соединения с Базой Дельфи. Попробуйте позже.";
		Возврат  РезультатЗагрузки;	

		КонецПопытки;
	КонецЕсли;

	//1. Ищем Реестр в Базе Дельфи
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_ROUTE.ID,
		|	dbo_ROUTE.DATA,
		|	dbo_ROUTE.ORG,
		|	dbo_ROUTE.SUMMA,
		|	dbo_ROUTE.SUMMAP,
		|	dbo_ROUTE.SUMMAN,
		|	dbo_ROUTE.CARMARK,
		|	dbo_ROUTE.CARNOMER,
		|	dbo_ROUTE.PRICEP,
		|	dbo_ROUTE.VODIT,
		|	dbo_ROUTE.PHONE,
		|	dbo_ROUTE.PURPOCE,
		|	dbo_ROUTE.TRANSORG
		|ИЗ
		|	ВнешнийИсточникДанных.TRANSRAS.Таблица.dbo_ROUTE КАК dbo_ROUTE
		|ГДЕ
		|	dbo_ROUTE.ID = &ID";

	Запрос.УстановитьПараметр("ID", Число(НомерРеестра));

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		 РезультатЗагрузки.Реестр=Неопределено;
		 РезультатЗагрузки.СообщениеОшибки="Реестр с таким номером-"+ НомерРеестра +" не найден.";
		Возврат  РезультатЗагрузки;	
	КонецЕсли;
	
	//3. Если Нашли - Загружаем Реестр
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
    ВыборкаДетальныеЗаписи.Следующий();
	//Ищем Док 
	ПоискРеестра=Документы.Реестр.НайтиПоНомеру(НомерРеестра);
	Если ЗначениеЗаполнено(ПоискРеестра) Тогда
		ДокРеестр=ПоискРеестра.ПолучитьОбъект();	
	Иначе
		ДокРеестр=Документы.Реестр.СоздатьДокумент();
		ДокРеестр.Номер=НомерРеестра;
	КонецЕсли;
	
	
	
	//3.1 Создаем Шапку Документа
	
	ДокРеестр.Дата=ВыборкаДетальныеЗаписи.DATA;
	ДокРеестр.ИдРеестра=НомерРеестра;
	ДокРеестр.МаркаМашины=ВыборкаДетальныеЗаписи.CARMARK;
	ДокРеестр.НомерМашины=ВыборкаДетальныеЗаписи.CARNOMER;
	ДокРеестр.Прицеп=ВыборкаДетальныеЗаписи.PRICEP;
	ДокРеестр.Водитель=ВыборкаДетальныеЗаписи.VODIT;
	ДокРеестр.Телефон=ВыборкаДетальныеЗаписи.PHONE;
	ДокРеестр.Комментарий=ВыборкаДетальныеЗаписи.PURPOCE;
	ДокРеестр.Сумма=ВыборкаДетальныеЗаписи.SUMMA;
 	ДокРеестр.Организация=Справочники.РеестрОрганизации.НайтиПоКоду(ВыборкаДетальныеЗаписи.ORG);
	ДокРеестр.Сформирован=Ложь;
	ДокРеестр.ДатаФормирования="";
	//3.2 Загружаем Таб часть СчетФактуры
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_INVOICE.ID,
		|	dbo_INVOICE.route,
		|	dbo_INVOICE.Invoiceid,
		|	dbo_INVOICE.city,
		|	dbo_INVOICE.org,
		|	dbo_INVOICE.NUmber,
		|	dbo_INVOICE.clientid,
		|	dbo_INVOICE.Name,
		|	dbo_INVOICE.Fiial,
		|	dbo_INVOICE.DATA,
		|	dbo_INVOICE.SUMMA,
		|	dbo_INVOICE.OBEM,
		|	dbo_INVOICE.MEST,
		|	dbo_INVOICE.PODDON
		|ИЗ
		|	ВнешнийИсточникДанных.TRANSRAS.Таблица.dbo_INVOICE КАК dbo_INVOICE
		|ГДЕ
		|	dbo_INVOICE.route = &route";

	Запрос.УстановитьПараметр("route", Число(НомерРеестра));
   
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		 РезультатЗагрузки.Реестр=Неопределено;
		 РезультатЗагрузки.СообщениеОшибки="Нет счет-фактур для реестра-"+ НомерРеестра;
		Возврат  РезультатЗагрузки;	
	КонецЕсли;
 
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
     //Очищаем ТЧ СчетФактуры
	 ДокРеестр.СчетФактуры.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Записываем ТЧ СчетФактуры
		новаяСтрока=ДокРеестр.СчетФактуры.Добавить();
		
		новаяСтрока.ИдРеестра=ВыборкаДетальныеЗаписи.route;
		новаяСтрока.ИДДокумента= ВыборкаДетальныеЗаписи.ID;
		новаяСтрока.НомерДокумента=ВыборкаДетальныеЗаписи.Invoiceid; //Номер Расходного Ордера
		новаяСтрока.НомерСчетФактуры=ВыборкаДетальныеЗаписи.NUmber; //Номер Счет Фактуры
		новаяСтрока.КоличествоМест=ВыборкаДетальныеЗаписи.MEST;
		новаяСтрока.Организация=Справочники.РеестрОрганизации.НайтиПоКоду(ВыборкаДетальныеЗаписи.org);
		новаяСтрока.ДатаДокумента=ВыборкаДетальныеЗаписи.DATA;
		новаяСтрока.СуммаДокумента=ВыборкаДетальныеЗаписи.SUMMA;
		новаяСтрока.Город=Справочники.Города.НайтиПоКоду(ВыборкаДетальныеЗаписи.city);
		новаяСтрока.Объем=ВыборкаДетальныеЗаписи.OBEM;
		новаяСтрока.Поддон=ВыборкаДетальныеЗаписи.PODDON;
		
		//Ищем Контрагент - Если не находим - Создаем нового
		КодКонтрагентаРеестра=новаяСтрока.Организация.ПрефиксДляКонтрагента+Формат(ВыборкаДетальныеЗаписи.clientid,"ЧГ=0");
		ПоискКонтрагента=Справочники.РеестрКонтрагенты.НайтиПоКоду(КодКонтрагентаРеестра);
		Если ЗначениеЗаполнено(ПоискКонтрагента) Тогда
			новаяСтрока.КонтрагентРеестра=ПоискКонтрагента;
		Иначе
			//Создаем нового клиента
			новыйКонтрагент=Справочники.РеестрКонтрагенты.СоздатьЭлемент();
			новыйКонтрагент.Код=КодКонтрагентаРеестра;
			новыйКонтрагент.Наименование=ВыборкаДетальныеЗаписи.Name;
			новыйКонтрагент.КодКонтрагента=ВыборкаДетальныеЗаписи.clientid;
            новыйКонтрагент.Записать();
			новаяСтрока.КонтрагентРеестра=новыйКонтрагент.Ссылка;	
			
		КонецЕсли;
	    //Ищем БЯС и привязываем К СчетФ.
		поискБЯС=НайтиБЯСпоНомеруРасходногоОрдера(новаяСтрока.НомерДокумента,новаяСтрока.Организация.Наименование);
		новаяСтрока.ДокБЯС=поискБЯС;
	КонецЦикла;

	 ДокРеестр.Записать(РежимЗаписиДокумента.Запись);
	 РезультатЗагрузки.Реестр=ДокРеестр.Ссылка;
	РезультатЗагрузки.СообщениеОшибки="";
	Возврат  РезультатЗагрузки;	
	
КонецФункции


 Функция НайтиБЯСпоНомеруРасходногоОрдера(НомерРасходногоОрдера,Организация) Экспорт
	 
	 НомерРО=Строка(Формат(НомерРасходногоОрдера,"ЧЦ=7; ЧДЦ=0; ЧВН=; ЧГ=0"));
	 	                                           
	 Если Организация="Асклепий" Тогда
		 ОРГ="Асклепий";
		 НомерРО=Строка(Формат(НомерРасходногоОрдера,"ЧДЦ=0; ЧГ=0"));
	ИначеЕсли   Организация="Асклепий_1000" Тогда   //Проект 1000
		 ОРГ="Асклепий";
		 НомерРО="48"+НомерРО;
	 ИначеЕсли  Организация="НФС" Тогда
		 ОРГ="НФС";
		 НомерРО="41"+НомерРО;
	 ИначеЕсли   Организация="OXYMED" Тогда
		  ОРГ="НФС";
		  НомерРО="40"+НомерРО+" *";
	 КонецЕсли;
	 
	 	  
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.НомерСтроки,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Док,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ШК,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Проверен,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий
		|ИЗ
		|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		|ГДЕ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер = &НомерРасходногоОрдера
		|			И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("НомерРасходногоОрдера", НомерРО);
		Запрос.УстановитьПараметр("Организация", ОРГ);	 
		
	  //Сообщить(НомерРО+"-"+ОРГ);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		 Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		 Возврат  Неопределено;	
	КонецЕсли;

	
КонецФункции


Функция НайтиБЯСпоСчетФактуре(НомерСчетФактуры,Орг=Неопределено) Экспорт
	
	Если Орг = Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.НомерСтроки,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Док,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ШК,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Проверен,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий
		|ИЗ
		|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		|ГДЕ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ = &СчетФ
		|
		|УПОРЯДОЧИТЬ ПО
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("СчетФ", НомерСчетФактуры);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		 Возврат  ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		 Возврат  Неопределено;	
	КонецЕсли;

	
КонецФункции

 Функция НайтиСчетФактуруПоШК(ШК)  Экспорт
	 
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка КАК БЯС,
	|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ
	|ИЗ
	|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
	|ГДЕ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.ШК = &ШК
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";	
	Запрос.УстановитьПараметр("ШК", ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.СчетФ);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	
КонецФункции
 Функция НайтиСчетФактуруПоКлиенту(Клиент)  Экспорт
	 
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка КАК БЯС,
	|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ
	|ИЗ
	|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
	|ГДЕ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель = &Получатель
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";	
	Запрос.УстановитьПараметр("Получатель", Клиент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.СчетФ);
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	
КонецФункции

//----------------АРМы------------------//
&НаСервере
Функция НайтиФизЛицоПоШк(ШКФизЛицо,Должность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", ШКФизЛицо);
	
	//Должности=Новый Массив;
	//Если Должность="Водитель" Тогда
	//	Должност=Справочники.Должности.Водитель;
	//	//Должности.Добавить(Справочники.Должности.Филиал);
	//ИначеЕсли Должность="РаботникОхраны" Тогда
	//	Должност=Справочники.Должности.РаботникОхраны;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Должность", Должност);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
КонецФункции

Функция НайтиДокБЯСпоШК(ШК)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка КАК БЯС
	|ИЗ
	|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
	|ГДЕ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.ШК = &ШК
	|	И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.ВходитВКомплект = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";	
	Запрос.УстановитьПараметр("ШК", ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БЯС;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	
КонецФункции
Функция НайтиДокБЯСпоКлиенту(Клиент,Док)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка КАК БЯС
	|ИЗ
	|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
	|ГДЕ
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.ВходитВКомплект = ЛОЖЬ
	|	И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель = &Получатель
	|	И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка <> &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Дата УБЫВ";	
	Запрос.УстановитьПараметр("Получатель", Клиент);
	Запрос.УстановитьПараметр("Ссылка", Док);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БЯС;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	
КонецФункции

Функция НайтиДокВозвратнаяСФпоШК(ШК)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратнаяСчетФактура.Ссылка КАК ВозвратнаяСФ
	|ИЗ
	|	Документ.ВозвратнаяСчетФактура КАК ВозвратнаяСчетФактура
	|ГДЕ
	|	ВозвратнаяСчетФактура.ШК = &ШК";	
	Запрос.УстановитьПараметр("ШК", ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВозвратнаяСФ;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
	
	
КонецФункции


Функция НайтиПутевойЛист(ВодительСсылка,ДатаПутевогоЛиста) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПутевойЛист.Ссылка
		|ИЗ
		|	Документ.ПутевойЛист КАК ПутевойЛист
		|ГДЕ
		|	ПутевойЛист.Водитель = &Водитель
		|	И ПутевойЛист.Дата = &Дата";

	Запрос.УстановитьПараметр("Водитель", ВодительСсылка);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ДатаПутевогоЛиста));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;	
	Иначе 
		Возврат Неопределено; 
	КонецЕсли;
	
КонецФункции


Функция НайтиПутевойЛист_2(ВодительСсылка,ДатаПутевогоЛиста,ШК=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПутевойЛист_2.Ссылка
		|ИЗ
		|	Документ.ПутевойЛист_2 КАК ПутевойЛист_2
		|ГДЕ
		|	ПутевойЛист_2.Водитель = &Водитель
		|	И ПутевойЛист_2.Дата МЕЖДУ &Дата1 И &Дата2";

	Запрос.УстановитьПараметр("Водитель", ВодительСсылка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаПутевогоЛиста));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаПутевогоЛиста));
		
	Результат = Запрос.Выполнить();
	ПутевойЛист_2=Неопределено;
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ШК=Неопределено Тогда
				ПутевойЛист_2=ВыборкаДетальныеЗаписи.Ссылка;
			Иначе// Ищем еще по ШК
				докБЯСпоШК=НайтиДокБЯСпоШК(ШК);
				Для Каждого стр Из ПутевойЛист_2.Данные Цикл
					докБЯС=стр.ДокументПрихода;
					Если докБЯСпоШК=докБЯС Тогда// Есть Такой БЯС в ПЛ
					КонецЕсли;
				КонецЦикла;
				//Возврат ПутевойЛист_2;	 
				//Если не нашли то
				//Возврат Неопределено;
			КонецЕсли; 
		//Иначе 
			//Возврат Неопределено; 
		//КонецЕсли;
	КонецЦикла;
	Возврат ПутевойЛист_2;
КонецФункции



Функция НайтиПогрузкаТоваровВАвтомобильПоШК(ШК)  Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПогрузкаТоваровВАвтомобиль.Ссылка
	|ИЗ
	|	Документ.ПогрузкаТоваровВАвтомобиль КАК ПогрузкаТоваровВАвтомобиль
	|ГДЕ
	|	ПогрузкаТоваровВАвтомобиль.ДокументыРасхода.ШК = &ШК";
	Запрос.УстановитьПараметр("ШК", ШК);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Неопределено;
	КонецЕсли; 
	
	
КонецФункции


Функция ПроверитьОстаткиПоКлиенту(Клиент) Экспорт
	//Док=Документы.БольшаяЯчеистаяСборка.НайтиПоНомеру(1);
	//Клиент=Док.Получатель;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток) КАК КоличествоКоробокОстаток,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.Получатель,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.НомераСФ,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.СписокМестХранений КАК СписокМестХранений
		|ИЗ
		|	РегистрНакопления.ЗонаОтгрузки.Остатки(, ) КАК ЗонаОтгрузкиОстатки
		|ГДЕ
		|	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0
		|	И ЗонаОтгрузкиОстатки.ДокументПрихода.Получатель = &Получатель
		|	И ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.Получатель,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.НомераСФ,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода.СписокМестХранений";

	Запрос.УстановитьПараметр("Получатель", Клиент);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	   //Сообщить("ПОДСКАЗКА");
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстСообщения="Товар Клиента - "+Клиент+ " найден - "+ВыборкаДетальныеЗаписи.СписокМестХранений+" коробок - "+ВыборкаДетальныеЗаписи.КоличествоКоробокОстаток;	
		Возврат ТекстСообщения;
	КонецЦикла;



КонецФункции



Функция СоздатьКомплектБЯС(масБЯС) Экспорт
	
	//Создаем комплект
	ДокКомплект=Документы.БольшаяЯчеистаяСборка.СоздатьДокумент();
	ДокКомплект.Номер="КТ"+(Формат(ПолучитьОперативнуюОтметкуВремени(),"ДФ=yyyyMMddhhmmss" ) );
	ДокКомплект.Дата=ТекущаяДата();                      
	ДокКомплект.ЭтоКомплект=Истина;
	ДокКомплект.НеПоказыватьВСписке=Истина;
	Для Каждого эл_масБЯС Из масБЯС Цикл
		докБЯСссылка=эл_масБЯС;
		новаяСтр=ДокКомплект.ДокументыКомплекта.Добавить();
		новаяСтр.ДокБЯС=докБЯСссылка;
	//Сообщить(докБЯСссылка);
	КонецЦикла;
	
	Попытка
		ДокКомплект.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Создан комплект - "+ДокКомплект);
		Возврат ДокКомплект;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

Функция РазобратьКомплектБЯС(ДокБЯС)  Экспорт
//Ищем БЯС

	ДокБЯСОбъект=ДокБяс.ПолучитьОбъект();
	масБЯС=Новый Массив;
	НачатьТранзакцию();
	Для Каждого стр_ДокументыКомплекта Из ДокБЯСОбъект.ДокументыКомплекта Цикл
		док_БЯС=стр_ДокументыКомплекта.ДокБЯС.ПолучитьОбъект();
		док_БЯС.ВходитВКомплект =Ложь;
		док_БЯС.КомплектБЯС ="";
		док_БЯС.Записать(РежимЗаписиДокумента.Проведение);
		масБЯС.Добавить(док_БЯС.Ссылка);
	КонецЦикла;
	ДокБЯСОбъект.ДокументыРасхода.Очистить();
	ДокБЯСОбъект.МестаОтгрузки.Очистить();
	ДокБЯСОбъект.ДокументыКомплекта.Очистить();
	ДокБЯСОбъект.ЭтоКомплект=Ложь;
	ДокБЯСОбъект.Коробки=0;
	ДокБЯСОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	ЗафиксироватьТранзакцию();
	 Сообщить("Комплект "+ДокБЯС+" очищен. Сам документ удалите вручную");
	Возврат масБЯС; // Масив Ссылок БЯС бывших в комплекте
		
 КонецФункции


Функция СкомплектоватьПутевойЛист(ПутевойЛист) Экспорт
	
	ПЛ=ПутевойЛист.ПолучитьОбъект();
	
	//************** Объединяем СФ По Клиентам - ДОП ******************//
	Если ПЛ.ГруппироватьКонтрагентов Тогда 
		
		// Формируем ТЗ
		ТЗкомплекты=Новый ТаблицаЗначений;
		ТЗкомплекты.Колонки.Добавить("ДокБЯС");
		
		масБЯСДляУдаления=Новый Массив;
      	
		ТЗклиенты=Новый ТаблицаЗначений;
		ТЗклиенты.Колонки.Добавить("Контрагент");
		ТЗклиенты.Колонки.Добавить("ДокБЯС");
		Для Каждого стр_Данные Из ПЛ.Данные Цикл
			новаяСтрТЗ=ТЗклиенты.Добавить();
			новаяСтрТЗ.Контрагент=стр_Данные.ДокументПрихода.Получатель;
			новаяСтрТЗ.ДокБяс=стр_Данные.ДокументПрихода;
		КонецЦикла;
		
		ТЗгрупировкаКлиентов=ТЗклиенты.Скопировать();
		ТЗгрупировкаКлиентов.Свернуть("Контрагент");
		Для Каждого стр_ТЗгрупировкаКлиентов Из ТЗгрупировкаКлиентов Цикл
			Клиент=стр_ТЗгрупировкаКлиентов.Контрагент;
			Отбор=Новый Структура;
			Отбор.Вставить("Контрагент",Клиент);
			масСтрок=ТЗклиенты.НайтиСтроки( Отбор);
			Если масСтрок.Количество()>1 Тогда // Группируем
				масБЯС=Новый Массив;
				Для Каждого эл_масСтрок Из масСтрок Цикл  //Создаем массив БЯС
					масБЯС.Добавить(эл_масСтрок.ДокБЯС);
					масБЯСДляУдаления.Добавить(эл_масСтрок.ДокБЯС);
				КонецЦикла;
				комплектБЯС=модСерверПолныеПрава.СоздатьКомплектБЯС(масБЯС);
				Если комплектБЯС=Неопределено Тогда
					Сообщить("Ошибка при создании комплекта для "+ Клиент);
					Продолжить;// Берем другого Клиента	
				КонецЕсли;
				
				//Добавляем Комплект 
				 новаяСтрокаТЗкомплекты=ТЗкомплекты.Добавить();
				 новаяСтрокаТЗкомплекты.ДокБЯС=комплектБЯС.Ссылка;
   				
			КонецЕсли;    			 // Группируем
			
		КонецЦикла;
		
		//Добавляем Комплекты  Если Есть
		Если ТЗкомплекты.Количество() >0 тогда
			//Удаляем Строки входящие в комплект
			Для Каждого эл_масСтрок Из масБЯСДляУдаления Цикл  
				//ПЛ=Документы.ПутевойЛист_2.НайтиПоНомеру(1).ПолучитьОбъект();
				//Сообщить(эл_масСтрок);
				найтиСтроку=ПЛ.Данные.Найти(эл_масСтрок,"ДокументПрихода");
				//Сообщить(найтиСтроку);
				Если ЗначениеЗаполнено(найтиСтроку) Тогда
					ПЛ.Данные.Удалить(найтиСтроку);
				КонецЕсли;
				
			КонецЦикла;

			Для Каждого стр_ТЗкомплекты Из ТЗкомплекты Цикл
				новаяСтрока=ПЛ.Данные.Добавить();
				новаяСтрока.ДокументПрихода=стр_ТЗкомплекты.ДокБЯС;
			КонецЦикла;
			ПЛ.Записать();	
		КонецЕсли;
		
		
	КонецЕсли;
	//*****************************************************************//
	
КонецФункции

Функция РазобратьКомплектыВПутевомЛисте(ПутевойЛист) Экспорт
	
	ПЛ=ПутевойЛист.ПолучитьОбъект();
	
	//*****************************************************************//
	//Ищем Комплекты
	масКомплектов=Новый Массив;
	масБЯСвКомплекте=Новый Массив;
	Для Каждого стр_ПЛданные Из ПЛ.Данные Цикл
		Если стр_ПЛданные.ДокументПрихода.ЭтоКомплект Тогда
			масБЯС= РазобратьКомплектБЯС(стр_ПЛданные.ДокументПрихода);
			Для Каждого эл_масБЯС Из масБЯС Цикл
				масБЯСвКомплекте.Добавить(эл_масБЯС);
			КонецЦикла;
				масКомплектов.Добавить(стр_ПЛданные.ДокументПрихода);
		КонецЕсли;
		 
	КонецЦикла;
	 //Удаляем Комплекты
	 Для Каждого эл_масКомплектов Из масКомплектов Цикл
			найтиСтроку=ПЛ.Данные.Найти(эл_масКомплектов,"ДокументПрихода");
				//Сообщить(найтиСтроку);
				Если ЗначениеЗаполнено(найтиСтроку) Тогда
					ПЛ.Данные.Удалить(найтиСтроку);
				КонецЕсли;
	 КонецЦикла;
	 
	//добавляем БЯС которые были в комплектах
	Для Каждого эл_масБЯСвКомплекте Из масБЯСвКомплекте Цикл
				новаяСтрока=ПЛ.Данные.Добавить();
				новаяСтрока.ДокументПрихода=эл_масБЯСвКомплекте;
	КонецЦикла;
			ПЛ.Записать();	 
	
КонецФункции

//----------------------------------------------

Функция СохранитьДокПогрузкаВАвто(Документ,Форма)  Экспорт
	
		
	
	Если Документ = Неопределено Тогда
		//Создаем Документ
		Документ=Документы.ПогрузкаТоваровВАвтомобиль.СоздатьДокумент();
		Документ.Дата =ТекущаяДата();
		Документ.Водитель=Форма.Водитель;
		Документ.РаботникОхраны=Форма.РаботникОхраны;
		Документ.Подразделение=Форма.БЯС.Организация;
		Документ.ПутевойЛист=Форма.ПутевойЛист;
		Документ.ДокументОснование=Форма.БЯС;
		Документ.Контрагент=Форма.БЯС.Получатель;
		Документ.КоличествоКоробок=Форма.КолКоробок;
		Документ.ДокументыРасхода.Загрузить(Форма.БЯС.ДокументыРасхода.Выгрузить());
		Документ.МестаОтгрузки.Загрузить(Форма.БЯС.МестаОтгрузки.Выгрузить());
						
	Иначе
		Документ=Документ.ПолучитьОбъект();
		Документ.Водитель=Форма.Водитель;
        Документ.ПутевойЛист=Форма.ПутевойЛист;
		//Документ.КоличествоКоробок=(КолКоробок+КолКоробокВАвто);
		//Сообщить(КолКоробок);
		Документ.КоличествоКоробок=Форма.КолКоробок;
	КонецЕсли;
	
		//-------- Установка ШКприемки ------------//
		 Попытка
		 	 Документ.ШКПриемки=Форма.ШК;
		 Исключение
		 КонецПопытки;
		   //-----------------------------//

		
	Документ.Записать(РежимЗаписиДокумента.Проведение);
	
	//Ставим Дату Конца Отгрузки в БЯС
	   //Попытка
		ДокБЯС=Форма.БЯС.ПолучитьОбъект();
		ДокБЯС.КонецОтгрузки=ТекущаяДата();
		ДокБЯС.ПогрузкаВАвто=Документ.Ссылка;	
		ДокБЯС.Записать(РежимЗаписиДокумента.Запись);
	//Исключение
	//КонецПопытки;
	
	Возврат Документ.Ссылка;

	КонецФункции
	
	
Функция СохранитьДокПогрузкаВАвто_АРМ_ПЛ(ШК,Форма,ДокБЯССсылка=Неопределено)  Экспорт
	
	    Если ШК<>Неопределено Тогда
		  ДокБЯС=модСерверПолныеПрава.НайтиДокБЯСпоШК(ШК);
	  Иначе
		  ДокБЯС=ДокБЯССсылка; //Прием всего ПЛ
	  	КонецЕсли;
	  
		  Документ=Документы.ПогрузкаТоваровВАвтомобиль.СоздатьДокумент();
		  Документ.Дата =ТекущаяДата();
		  Документ.Водитель=Форма.Водитель;
		  Документ.РаботникОхраны=Форма.РаботникОхраны;
		  Документ.Подразделение=ДокБЯС.Организация;
		  Документ.ПутевойЛист=Форма.ПутевойЛист;
		  Документ.ДокументОснование=ДокБЯС;
		  Документ.Контрагент=ДокБЯС.Получатель;
		 Если ШК<>Неопределено Тогда
			  Документ.КоличествоКоробок=Форма.КолКоробок;
			Иначе
			  Документ.КоличествоКоробок=ДокБЯС.Коробки;//Прием всего ПЛ
		КонецЕсли;
		  
		  //-------- Установка ШКприемки ------------//
		  //Попытка
		  //Если ШК<>Неопределено Тогда
			 Документ.ШКПриемки=Форма.ШКДокумент;
		  //Иначе
		  //	Документ.ШКПриемки="Прием Всего ПЛ";//Прием всего ПЛ
		  //КонецЕсли;
		  //  Исключение
		  //КонецПопытки;
		   //-----------------------------//
		  Документ.ДокументыРасхода.Загрузить(ДокБЯС.ДокументыРасхода.Выгрузить());
		  Документ.МестаОтгрузки.Загрузить(ДокБЯС.МестаОтгрузки.Выгрузить());
		  
		  Документ.Записать(РежимЗаписиДокумента.Проведение);
		  
		  //Ставим Дату Конца Отгрузки в БЯС
		  //Попытка
		  	ДокБЯС=ДокБЯС.ПолучитьОбъект();
		  	ДокБЯС.КонецОтгрузки=ТекущаяДата();
		  	ДокБЯС.ПогрузкаВАвто=Документ.Ссылка;	
		  	ДокБЯС.Записать(РежимЗаписиДокумента.Запись);
		  //Исключение
		  //КонецПопытки;
		  
	
	
	Возврат Документ.Ссылка;

	КонецФункции

	
Процедура РедактироватьПогрузкуВАвтоВБЯС(ДокПогрузка) Экспорт
		
	//Cсылки в БЯС
		Попытка
			ДокБЯС=ДокПогрузка.ДокументОснование.ПолучитьОбъект();
			Если Не ЗначениеЗаполнено(ДокБЯС.ПогрузкаВАвто) Тогда
			ДокБЯС.ПогрузкаВАвто=ДокПогрузка;
			ДокБЯС.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение
		КонецПопытки;
	
	КонецПроцедуры
	
	
Процедура ПолучитьСписокДляИнвентаризацииЗоныОтгрузкиСЕРВЕР(ТабДок,СписокОрганизаций,Организация) Экспорт
	
		
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗонаОтгрузкиОстатки.ДокументПрихода,
	             |	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки КАК НомерМестаОтгрузки,
	             |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток,
	             |	РАЗНОСТЬДАТ(ЗонаОтгрузкиОстатки.ДокументПрихода.НачалоОтгрузки, &ТекущаяДата, ЧАС) КАК ИнтервалПростоя,
	             |	ЗонаОтгрузкиОстатки.ДокументПрихода.ПутевойЛист КАК ПутевойЛист
	             |ИЗ
	             |	РегистрНакопления.ЗонаОтгрузки.Остатки(
	             |			,
	             |			НомерМестаОтгрузки.Палет = ЛОЖЬ
	             |				И ДокументПрихода.Организация В (&СписокОрганизаций)) КАК ЗонаОтгрузкиОстатки
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Наименование";
				 
	Запрос.УстановитьПараметр("СписокОрганизаций",СписокОрганизаций);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());

	Выборка=Запрос.Выполнить().Выбрать();
	
	Макет=Обработки.ЗонаОтгрузки.ПолучитьМакет("МакетИнвентаризацияЗоныОтгрузки");
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Организация=Организация;
	ОбластьШапка.Параметры.ДатаИнвентаризации=ТекущаяДата();

	ТабДок.Вывести(ОбластьШапка);
	
	ОбластьСтрока=Макет.ПолучитьОбласть("Стр");
	 перН=1;
	 Пока Выборка.Следующий() Цикл
		 //НомерПП	Орг	Получатель	НомераСФ	МестоОтгрузки	НачалоОтгрузки	НаОтгрузке		ЕстьПутевойЛист	Водитель
		 
		 ОбластьСтрока.Параметры.НомерПП=перН;
		 ОбластьСтрока.Параметры.Орг=Выборка.ДокументПрихода.Организация;
		 ОбластьСтрока.Параметры.Получатель=Выборка.ДокументПрихода.Получатель;
		 ОбластьСтрока.Параметры.НомераСФ=Выборка.ДокументПрихода.НомераСФ;
		 ОбластьСтрока.Параметры.МестоОтгрузки=Выборка.НомерМестаОтгрузки;
		 ОбластьСтрока.Параметры.НачалоОтгрузки=Выборка.ДокументПрихода.НачалоОтгрузки;
		 ОбластьСтрока.Параметры.НаОтгрузке=Выборка.ИнтервалПростоя;
		 ОбластьСтрока.Параметры.КоличествоКоробокОстаток=Выборка.КоличествоКоробокОстаток;

		 
		 Если ЗначениеЗаполнено( Выборка.ДокументПрихода.ПутевойЛист) Тогда
			 ОбластьСтрока.Параметры.ЕстьПутевойЛист="ПЛ";
			 ОбластьСтрока.Параметры.Водитель=Выборка.ДокументПрихода.ПутевойЛист.Водитель;
		 Иначе
			  ОбластьСтрока.Параметры.ЕстьПутевойЛист="";
			 	ОбластьСтрока.Параметры.Водитель="";
		 КонецЕсли;
		 
		 перН=перН+1;
		 ТабДок.Вывести(ОбластьСтрока);
	
	 КонецЦикла;
	 
	  
	 
КонецПроцедуры
	

//********************** ПОДКЛЮЧЕНИЕ К ДЕЛЬФИ *********************************//

Функция ПолучитьОбъектПодключения(СтрокаСоединения) Экспорт
	Попытка
		objConnection = Новый COMОбъект("ADODB.Connection");
		//objConnection.Open("Provider=SQLOLEDB.1;Password=z;Persist Security Info=True;User ID=sa;Initial Catalog=Kasatka;Data Source=192.168.95.168");
		objConnection.Open(СтрокаСоединения);
		objRecordset = Новый COMОбъект("ADODB.Recordset");
		objRecordset.ActiveConnection = objConnection;
	Исключение
		
	ВызватьИсключение "Неудалось подключится к серверу базы данных делфи";
	КонецПопытки;
	Возврат objRecordset;
КонецФункции


