
Процедура РегламентныеЗадания_ЧАС() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентныеЗадания.Ссылка
		|ИЗ
		|	Справочник.РегламентныеЗадания КАК РегламентныеЗадания
		|ГДЕ
		|	РегламентныеЗадания.ЗаданиеАктивно = ИСТИНА";

	ТЗзаданий = Запрос.Выполнить().Выгрузить();

	ОбработатьСписокРегламентныхЗаданий(ТЗзаданий,Ложь);

КонецПроцедуры

Процедура ОбработатьСписокРегламентныхЗаданий(ТЗзаданий,Отладка=Ложь)

	Для Каждого стр_ТЗзаданий Из ТЗзаданий Цикл
		//стр_ТЗзаданий=Справочники.РегламентныеЗадания.НайтиПоКоду(1);
		элСПР=стр_ТЗзаданий.Ссылка.ПолучитьОбъект();
		//Проверка Сообщения
		
		//Проверка на дату начала
		 Если ЗначениеЗаполнено(элСПР.ДатаНачала) Тогда
				Если элСПР.ДатаНачала>ТекущаяДата() Тогда // Еще Рано для выполнения
					Продолжить;
				КонецЕсли;
				
		 КонецЕсли;
		//------------------------
		
		//Проверка на Дату Окончания
		Если ЗначениеЗаполнено(элСПР.ДатаОкончания) Тогда
			Если элСПР.ДатаОкончания<=ТекущаяДата() Тогда
				
				ЗакрытьРегламентноеЗадание(элСПР.Ссылка,"ПоДатеОкончания");
				
				Если Отладка Тогда
					//++++++++++ ОТЛАДКА +++++++++++++++++++++//
					Комментарий	="Закрыто по ПоДатеОкончания";
					ЗаписьЖурналаРегистрации("ОТЛАДКА-РЕГЛАМЕНТНЫЕ ЗАДАНИЯ",УровеньЖурналаРегистрации.Информация, , ,Комментарий);
					//++++++++++++++++++++++++++++++++++++++++//
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка на Время начала
		Если элСПР.ЕжедневноеЗадание Тогда
			Если Число(Формат(ТекущаяДата(),"ДФ=HHmmss")) < Число(Формат(элСПР.ВремяНачала,"ДФ=HHmmss"))
				или Число(Формат(ТекущаяДата(),"ДФ=HHmmss")) > Число(Формат(элСПР.ВремяОкончания,"ДФ=HHmmss")) Тогда // Не Наше Время
				
				Если Отладка Тогда
					 //++++++++++ ОТЛАДКА +++++++++++++++++++++//
					 Комментарий	="ЕжедненоеЗадание - НЕ в ИНТЕРВАЛЕ - "+
					 	"ТекВремя-"+Строка(Формат(ТекущаяДата(),"ДФ=HHmmss")) +
						"ВремяНачала-"+Строка(Формат(элСПР.ВремяНачала,"ДФ=HHmmss"))+
						"ВремяОкончания-"+Строка(Формат(элСПР.ВремяОкончания,"ДФ=HHmmss"));
					 ЗаписьЖурналаРегистрации("ОТЛАДКА-РЕГЛАМЕНТНЫЕ ЗАДАНИЯ",УровеньЖурналаРегистрации.Информация, , ,Комментарий);
					 //++++++++++++++++++++++++++++++++++++++++//
				 КонецЕсли;

				  Продолжить;

			КонецЕсли;
			
		КонецЕсли;
		
		//Проверка на кол повторов
		Если  элСПР.КоличествоПовторов<>0 Тогда
			Если элСПР.КоличествоПовторов<=элСПР.КоличествоВыполненныхЗаданий Тогда 
				
				ЗакрытьРегламентноеЗадание(элСПР.Ссылка,"ПоКоличествуПовторов");
				 
				 Если Отладка Тогда
					 //++++++++++ ОТЛАДКА +++++++++++++++++++++//
					 Комментарий	="Закрыто по ПоКоличествуПовторов";
					 ЗаписьЖурналаРегистрации("ОТЛАДКА-РЕГЛАМЕНТНЫЕ ЗАДАНИЯ",УровеньЖурналаРегистрации.Информация, , ,Комментарий);
					 //++++++++++++++++++++++++++++++++++++++++//
				 КонецЕсли;
			 
				 Продолжить;
			КонецЕсли;
		КонецЕсли;
		
				
		
		
		// Проверка на Интервал
		Если Не ЗначениеЗаполнено(элСПР.ДатаПоследнегоВыполнения) Тогда  //Первое выполнение
			//Выполняем задание
			Если Отладка Тогда
				//++++++++++ ОТЛАДКА +++++++++++++++++++++//
				Комментарий	="Выполнение Задания-"+элСПР.Наименование;
				ЗаписьЖурналаРегистрации("ОТЛАДКА-РЕГЛАМЕНТНЫЕ ЗАДАНИЯ",УровеньЖурналаРегистрации.Информация, , ,Комментарий);
				//++++++++++++++++++++++++++++++++++++++++//
			КонецЕсли;

			ВыполнитьРегламентноеЗадание(элСПР.Ссылка);
			Продолжить;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(элСПР.ДатаПоследнегоВыполнения) Тогда
			Если (элСПР.ДатаПоследнегоВыполнения+элСПР.ИнтервалВыполнения)<=ТекущаяДата() Тогда
				//Выполняем задание
				Если Отладка Тогда
				//++++++++++ ОТЛАДКА +++++++++++++++++++++//
				Комментарий	="Выполнение Задания-"+элСПР.Наименование;
				ЗаписьЖурналаРегистрации("ОТЛАДКА-РЕГЛАМЕНТНЫЕ ЗАДАНИЯ",УровеньЖурналаРегистрации.Информация, , ,Комментарий);
				//++++++++++++++++++++++++++++++++++++++++//
				КонецЕсли;

				ВыполнитьРегламентноеЗадание(элСПР.Ссылка);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		

		
		
		
	КонецЦикла;
	
КонецПроцедуры


Процедура  ЗакрытьРегламентноеЗадание(элСправочника,ТипЗакрытия)
	
	//элСправочника=Справочники.РегламентныеЗадания.НайтиПоКоду(1);

	элСПР=элСправочника.ПолучитьОбъект();
	элСПР.ЗаданиеАктивно=Ложь;
	
	Если ТипЗакрытия="ПоДатеОкончания" Тогда
		элСПР.СистемныйКомментарий="ЗАКРЫТО! По ДатеОкончания";
	ИначеЕсли 	 ТипЗакрытия="ПоКоличествуПовторов" Тогда
		элСПР.СистемныйКомментарий="ЗАКРЫТО! По КоличествуПовторов";
	КонецЕсли;
	
	элСПР.Записать();

	
КонецПроцедуры

//************************ РЕГЛАМЕНТНЫЕ ЗАДАНИЯ **************************//

Процедура ВыполнитьРегламентноеЗадание(элСправочника) Экспорт
	
	//элСправочника=Справочники.РегламентныеЗадания.НайтиПоКоду(1);
	ИмяЗадания=элСправочника.Наименование;
	
	//-------------------- СПИСАНИЕ ТОВАРА С ЗОНЫ ОТГРУЗКИ ---------------//
	Если ИмяЗадания="СписаниеТовараСЗоныОтгрузки" Тогда
		СписаниеТовараСЗоныОтгрузки();
	КонецЕсли; 
	
	//----------------------ЗАГРУЗКА ПРОПУЩЕННЫХ РЕЕСТРОВ -----------------//
	Если ИмяЗадания="ЗагрузкаПропущенныхРеестров" Тогда
		ЗагрузкаПропущенныхРеестров();
	КонецЕсли;
	
	

	
//----------------------ВЫГРУЗКА СЧЕТ-ФАКТУР В ФАЙЛ ---------------------//
	Если ИмяЗадания="ВыгрузкаСчетФактурВФайл" Тогда
		ВыгрузкаСчетФактурВФайл();
	КонецЕсли;
	
	
	
//------------------------ КОНТРОЛЬ ЗОНЫ ОТГРУЗКИ -------------------//
     Если ИмяЗадания="КонтрольЗоныОтрузки" Тогда
		КонтрольЗоныОтгрузки();
	КонецЕсли;

//------------------------------------------------------------------//
	
//---------------------- ОЧИСТИТЬ ЗАПИСИ ЖУРНАОВ --------------------//
	Если ИмяЗадания="ОчиститьЗаписиЖурналов" Тогда
		ОчиститьЗаписиЖурналов();
	КонецЕсли;
	
	
	//---------------------- ТЕСТОВОЕ РЕГЛАМЕНТНОЕ ЗАДАНИЕ------------------//
	
	Если ИмяЗадания="ТестовоеРегламентноеЗадание" Тогда
		ТестовоеРегламентноеЗадание();
	КонецЕсли;
	
//---------------------- ТЕСТОВОЕ РЕГЛАМЕНТНОЕ ЗАДАНИЕ------------------//
	
	Если ИмяЗадания="ТестовоеРегламентноеЗаданиеЭЛЕКТРОННАЯПОЧТА" Тогда
		ТестовоеРегламентноеЗаданиеЭЛЕКТРОННАЯПОЧТА();
	КонецЕсли;
	
//----------------------------------------------------------------------//	
	// Модифицируем запись
	элСПР=элСправочника.ПолучитьОбъект();
	элСПР.ДатаПоследнегоВыполнения=ТекущаяДата();
	элСПР.КоличествоВыполненныхЗаданий=элСПР.КоличествоВыполненныхЗаданий+1;
	элСПР.Записать();
	
		
КонецПроцедуры



//**************************** ПРОЦЕДУРЫ РЕГЛАМЕНТНЫХ ЗАДАНИЙ ********************************//
Процедура СписаниеТовараСЗоныОтгрузки() Экспорт
	
	ПределОтгрузки70=ТекущаяДата()-(60*60*70);//70 часов
	ПределОтгрузки240=ТекущаяДата()-(60*60*240);//240 часов
	
	//----------------------------------------------------------//
	//1.Списание пропущенных Охраной
	//----------------------------------------------------------//
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	ЗонаОтгрузкиОстатки.ДокументПрихода,
				 |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток
				 |ИЗ
				 |	РегистрНакопления.ЗонаОтгрузки.Остатки КАК ЗонаОтгрузкиОстатки
				 |ГДЕ
				 |	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ
				 |	И ЗонаОтгрузкиОстатки.ДокументПрихода.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.ПутевойЛист_2.ПустаяСсылка)
				 |	И ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0";
	
	ТЗпропущенные=Запрос.Выполнить().Выгрузить();
	
	// Создаем документы Списания
	Для Каждого стр_ТЗпропущенные Из ТЗпропущенные Цикл
		//докСписания=Документы.СписаниеТовараСЗоныОтгрузки.СоздатьДокумент();
		//докСписания.Дата=ТекущаяДата();
		//докСписания.ДокументБЯС=стр_ТЗпропущенные.ДокументПрихода;
		////докСписания.КолКоробок=	стр_ТЗпропущенные.КоличествоКоробокОстаток;
		//докСписания.Комментарий="СПИСАНИЕ ПРОПУЩЕННЫХ ОХРАНОЙ";
		//докСписания.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
	//----------------------------------------------------------//
	//2. Списание САМОВЫВОЗА  (ЛЕЖИТ БОЛЕЕ 240 часов)
	//----------------------------------------------------------//
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	ЗонаОтгрузкиОстатки.ДокументПрихода,
				 |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток
				 |ИЗ
				 |	РегистрНакопления.ЗонаОтгрузки.Остатки КАК ЗонаОтгрузкиОстатки
				 |ГДЕ
				 |	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ
				 |	И ЗонаОтгрузкиОстатки.ДокументПрихода.Самовывоз = ИСТИНА
				 |	И ЗонаОтгрузкиОстатки.ДокументПрихода.НачалоОтгрузки <= &ПределОтгрузки
				 |	И ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0";
	
				 
	Запрос.УстановитьПараметр("ПределОтгрузки",ПределОтгрузки240);
	ТЗсамовывоз=Запрос.Выполнить().Выгрузить();
	
	// Создаем документы Списания
	Для Каждого стр_ТЗсамовывоз Из ТЗсамовывоз Цикл
		//докСписания=Документы.СписаниеТовараСЗоныОтгрузки.СоздатьДокумент();
		//докСписания.Дата=ТекущаяДата();
		//докСписания.ДокументБЯС=стр_ТЗсамовывоз.ДокументПрихода;
		////докСписания.КолКоробок=	стр_ТЗсамовывоз.КоличествоКоробокОстаток;
		//докСписания.Комментарий="СПИСАНИЕ САМОВЫВОЗА(БОЛЕЕ 240 часов)";
		//докСписания.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

	//----------------------------------------------------------//
	//3. Списание ОТРИЦАТЕЛЬНЫХ ОСТАТКОВ	
	//----------------------------------------------------------//
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	ЗонаОтгрузкиОстатки.ДокументПрихода,
				 |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток,
				 |	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки
				 |ИЗ
				 |	РегистрНакопления.ЗонаОтгрузки.Остатки КАК ЗонаОтгрузкиОстатки
				 |ГДЕ
				 |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток < 0";
	
				 
	ТЗотрицательные=Запрос.Выполнить().Выгрузить();
	
	// Создаем документы Списания
	Для Каждого стр_ТЗотрицательные Из ТЗотрицательные Цикл
		докСписания=Документы.СписаниеТовараСЗоныОтгрузки.СоздатьДокумент();
		докСписания.Дата=ТекущаяДата();
		докСписания.ДокументБЯС=стр_ТЗотрицательные.ДокументПрихода;
		докСписания.МестоОтгрузки=стр_ТЗотрицательные.НомерМестаОтгрузки;
		докСписания.КолКоробок=	стр_ТЗотрицательные.КоличествоКоробокОстаток;
		докСписания.Комментарий="СПИСАНИЕ ОТРИЦАТЕЛЬНЫХ ОСТАТКОВ.";
		докСписания.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;

	//----------------------------------------------------------//
	//4. Списание ТОВАРА  КОТОРЫЙ ЛЕЖИТ БОЛЕЕ 240 часов(10 дней)
	//----------------------------------------------------------//
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
				 |	ЗонаОтгрузкиОстатки.ДокументПрихода,
				 |	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток
				 |ИЗ
				 |	РегистрНакопления.ЗонаОтгрузки.Остатки КАК ЗонаОтгрузкиОстатки
				 |ГДЕ
				 |	ЗонаОтгрузкиОстатки.ДокументПрихода.НачалоОтгрузки <= &ПределОтгрузки
				 |	И ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0";
	
				 
	Запрос.УстановитьПараметр("ПределОтгрузки",ПределОтгрузки240);
	ТЗнеизвестныйтовар=Запрос.Выполнить().Выгрузить();
	
	// Создаем документы Списания
	Для Каждого стр_ТЗнеизвестныйтовар Из ТЗнеизвестныйтовар Цикл
		//докСписания=Документы.СписаниеТовараСЗоныОтгрузки.СоздатьДокумент();
		//докСписания.Дата=ТекущаяДата();
		//докСписания.ДокументБЯС=стр_ТЗнеизвестныйтовар.ДокументПрихода;
		//докСписания.Комментарий="СПИСАНИЕ НЕИЗВЕСТНОГО ТОВАРА(БОЛЕЕ 240 часов)";
		//докСписания.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;


	
	
КонецПроцедуры


Процедура ЗагрузкаПропущенныхРеестров() Экспорт
	
	День=60*60*24;
	ДатаН=НачалоДня(ТекущаяДата()-(30*День));
	ДатаК=НачалоДня(ТекущаяДата()-(5*День));
	
	//1 Получаем список реестров из ДЕЛЬФИ за последние 30 дней  исключая последние 5 дней
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	dbo_ROUTE.ID КАК НомерРеестра,
		|	dbo_ROUTE.DATA КАК ДатаРеестра
		|ИЗ
		|	ВнешнийИсточникДанных.TRANSRAS.Таблица.dbo_ROUTE КАК dbo_ROUTE
		|ГДЕ
		|	dbo_ROUTE.DATA >= &ДатаН
		|	И dbo_ROUTE.DATA <= &ДатаК";

	Запрос.УстановитьПараметр("ДатаК", ДатаК);
	Запрос.УстановитьПараметр("ДатаН", ДатаН);

	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТЗреестрыДЕЛЬФИ=Результат.Выгрузить();
	
	//2 Получаем такой же список из 1С
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реестр.Дата КАК ДатаРеестра,
		|	Реестр.ИдРеестра КАК НомерРеестра
		|ИЗ
		|	Документ.Реестр КАК Реестр
		|ГДЕ
		|	Реестр.Дата >= &ДатаН
		|	И Реестр.Дата <= &ДатаК";

	Запрос.УстановитьПараметр("ДатаК", ДатаК);
	Запрос.УстановитьПараметр("ДатаН", ДатаН);

	ТЗреестры1С=Запрос.Выполнить().Выгрузить();
	
	ТЗнезагруженные=Новый ТаблицаЗначений;
	ТЗнезагруженные.Колонки.Добавить("ДатаРеестра");
	ТЗнезагруженные.Колонки.Добавить("НомерРеестра");
	
	//3 Сравниваем
	Для Каждого стр Из ТЗреестрыДЕЛЬФИ Цикл
		найтиРеестр=ТЗреестры1С.Найти(стр.НомерРеестра,"НомерРеестра");
		Если Не ЗначениеЗаполнено(найтиРеестр) Тогда
			новаяСтр=ТЗнезагруженные.Добавить();
			новаяСтр.НомерРеестра=стр.НомерРеестра;
			новаяСтр.ДатаРеестра=стр.ДатаРеестра;
		КонецЕсли;
		
	КонецЦикла;
	
	//4 Недостающие загружаем и проводим
	Если ТЗнезагруженные.Количество()>0 Тогда
		Для Каждого стр из ТЗнезагруженные Цикл
		НомерРеестра=стр.НомерРеестра;
	РезультатЗагрузки=модСерверПолныеПрава.ЗагрузитьРеестрИзДельфи(НомерРеестра);
	Если РезультатЗагрузки.СообщениеОшибки="" Тогда
	Реестр = РезультатЗагрузки.Реестр.ПолучитьОбъект();
	Реестр.Комментарий=Реестр.Комментарий + " ==АВТОЗАГРУЗКА ПРОПУЩЕННЫХ РЕЕСТРОВ - "+ТекущаяДата()+" ==";
	Реестр.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	КонецЦикла;
		
	КонецЕсли;
	
	
	
КонецПроцедуры



Процедура ВыгрузкаСчетФактурВФайл(ДатаОстатковВЗонеОтгрузки = Неопределено) Экспорт
	
	Перем ТО_ИД;
	
	Кодировка           = КодировкаТекста.Системная;	
	ЛокальныйКаталог    = "C:\";
	СетевойКаталог      = "\\192.168.95.185\import\";
	ЛокальныйКаталогОБЛ = "C:\";
	СетевойКаталогОБЛ   = "\\192.168.95.185\import\regions";
	//ЛокальныйКаталог=Константы.ЛокальныйКаталогФайловВыгрузки.Получить();
	//СетевойКаталог =Константы.СетевойКаталогФайловВыгрузки.Получить();  "G:\"
	
	ДД = ТекущаяДата();
	Строкой_ДеньМесяцЧасМинута = "_"+Строка(День(ДД))+"_"+Строка(Месяц(ДД))+"_"+Строка(Час(ДД))+"_"+Строка(Минута(ДД)); 
	
	ИмяФайлаСчетФактур      = "docs.csv";
	ИмяФайлаАвтомобилей     = "cars.csv";
	ИмяФайлаВодителей       = "people.csv";
	ИмяФайлаСчетФактурОБЛ   = "docs_regions.csv";
	ИмяФайлаАвтомобилейОБЛ  = "cars_regions.csv";
	ИмяФайлаВодителейОБЛ    = "people_regions.csv";
	ИмяФайлаСчетФактурЛ     = "docs" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаАвтомобилейЛ    = "cars" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаВодителейЛ      = "people" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаСчетФактурОБЛЛ  = "docs_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаАвтомобилейОБЛЛ = "cars_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаВодителейОБЛЛ   = "people_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	//ИмяФайлаСчетФактур=Константы.ИмяФайлаВыгрузки_DOCS.Получить();
	//ИмяФайлаАвтомобилей=Константы.ИмяФайлаВыгрузки_CARS.Получить();
	//ИмяФайлаВодителей=Константы.ИмяФайлаВыгрузки_PEOPLE.Получить();
	
	// Переменные в которых хранится полные пути сохранения фала для каждого объекта сохранения.
	ЛокальныйПутьСчетФактур    = ЛокальныйКаталог + ИмяФайлаСчетФактурЛ;
	СетевойПутьСчетФактур      = СетевойКаталог + ИмяФайлаСчетФактур;
	ЛокальныйПутьСчетФактурОБЛ = ЛокальныйКаталогОБЛ + ИмяФайлаСчетФактурОБЛЛ;
	СетевойПутьСчетФактурОБЛ   = СетевойКаталогОБЛ + ИмяФайлаСчетФактурОБЛ;
	ЛокальныйПутьАвтомобилей   = ЛокальныйКаталог + ИмяФайлаАвтомобилейЛ;
	СетевойПутьАвтомобилей     = СетевойКаталог + ИмяФайлаАвтомобилей;
	ЛокальныйПутьВодителей     = ЛокальныйКаталог + ИмяФайлаВодителейЛ;
	СетевойПутьВодителей       = СетевойКаталог + ИмяФайлаВодителей;
	
	//----------------------------------------------------------//	
	//------------------ВЫГРУЗКА СЧЕТ ФАКТУР -------------------//	
	//----------------------------------------------------------//
	
	ОдинЧас      = 3600;
	ДатаОстатков = НачалоДня(ДД) + 7 * ОдинЧас;
	
	ДатаОстатковВЗонеОтгрузки = ?(ДатаОстатковВЗонеОтгрузки = Неопределено, ДатаОстатков, ДатаОстатковВЗонеОтгрузки);
		
	//-------------------- Список Счет-Фактур В Зоне Отгрузки -------//
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗонаОтгрузкиОстатки.ДокументПрихода КАК Ссылка,
	|	СУММА(ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток) КАК КоличествоКоробокОстаток
	|ИЗ
	|	РегистрНакопления.ЗонаОтгрузки.Остатки(&Период, ДокументПрихода.Самовывоз = ЛОЖЬ) КАК ЗонаОтгрузкиОстатки
	|ГДЕ
	|	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0
	|	И ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗонаОтгрузкиОстатки.ДокументПрихода";
	
	Запрос.УстановитьПараметр("Период", ДатаОстатковВЗонеОтгрузки);	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТК = Новый ТекстовыйДокумент;
	
	ТК.ДобавитьСтроку("UNISTRING;NUMBER_DOC;FROM_ID;TO_ID;DOC_DATE;"+
	"SUMMA;MASSA;OBEM;COMMENTS;QTY;DOCS_TYPE;INTERM_ID;"+
	"KOL_VO_PALLET;GRUZ_TYPE_ID;DELETED;TIME1;TIME2;AVAILABILITY_TIME;VARIABLE6");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокБЯС=ВыборкаДетальныеЗаписи.Ссылка;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер КАК Номер,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДатаДокумента КАК Дата,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Количество,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Сумма,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.КолПозиций,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель.Код КАК КонтрагентКод,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Организация,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Объем,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Вес,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.СписокМестХранений,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Коробки как Коробки 
		|ИЗ
		|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		|ГДЕ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДокБЯС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//------- TO_ID --------//
			
			ТО_ИД=Выборка.КонтрагентКод;
			
			ТекНомерДокумента = Выборка.Номер;
			
			найтиПризнакОКСИМЕД=Найти(ТекНомерДокумента,"*");
			Если найтиПризнакОКСИМЕД>0 или Лев(ТекНомерДокумента,3)="МТС" Тогда
				ТО_ИД="ОКСИ"+Сред(Выборка.КонтрагентКод,4);
			КонецЕсли;
			
			//найтиПризнакПРОЕКТ1000=Найти(Выборка.СчетФ,"*");
			//Если найтиПризнакПРОЕКТ1000>0 Тогда
			//	ТО_ИД="ПрТ"+Сред(Выборка.КонтрагентКод,9);
			//КонецЕсли;
			
			СФ = Выборка.СчетФ;
			
			Если Лев(ТекНомерДокумента,1)="Z"  тогда
				
				YY="Z" + Прав(ТекНомерДокумента,9);
				
				//Если СтрДлина(Выборка.СчетФ )>3 тогда
				//	СФ=Выборка.СчетФ;
				//	//СФ=Лев(Выборка.СчетФ,СтрДлина(Выборка.СчетФ)-4) + Прав(Выборка.СчетФ,3);
				//Иначе
				//	СФ=Выборка.СчетФ;
				//КонецЕсли;
			Иначе
				//СФ = Выборка.СчетФ;
				YY = ТекНомерДокумента;
			КонецЕсли;
			
			Если СФ="60868" тогда
				С=1;
			КонецЕсли;
			
			Стр=""+// Строка(ДокБЯС) +
			"'"+УбратьНенужныеСимволы(YY) +"';"+	//UNISTRING
			"'"+УбратьНенужныеСимволы(СФ) +"';"+	//NUMBER_DOC
			"'"+УбратьНенужныеСимволы(Выборка.Организация) +"';"+//FROM_ID
			"'"+УбратьНенужныеСимволы(ТО_ИД) +"';"+	//TO_ID
			"'"+Формат(ДД,"ДФ=dd.MM.yyyy") +"';"+	//DOC_DATE   Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy")
			""+Формат(Выборка.Сумма,"ЧДЦ=2; ЧГ=0") +";"+//SUMMA
			""+Формат(Выборка.Вес*1000,"ЧДЦ=3; ЧГ=0") +";"+//MASSA
			""+Формат(Выборка.Объем,"ЧДЦ=5; ЧГ=0") +";"+//OBEM
			"'"+УбратьНенужныеСимволы(Выборка.Комментарий) +"';"+	//COMMENTS
			""+Формат(Выборка.Коробки,"ЧДЦ=0; ЧГ=0") +";"+//QTY
			"1;"+//DOCS_TYPE
			"0;"+//INTERM_ID
			"0;"+//KOL_VO_PALLET
			"0;"+//GRUZ_TYPE_ID
			"0;"+//DELETED
			"'';"+//TIME1
			"'';"+//TIME2
			";"+//AVAILABILITY_TIME
			"'"+ УбратьНенужныеСимволы(Выборка.СписокМестХранений)+"';";//VARIABLE6
			
			
			ТК.ДобавитьСтроку(Стр);
			
		КонецЦикла; // По СчетФ
		
	КонецЦикла; // По БЯС
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьСчетФактур,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьСчетФактур,СетевойПутьСчетФактур);
	
	//-------------------- Список Счет-Фактур В область-------//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗонаОтгрузкиОбороты.ДокументПрихода КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ЗонаОтгрузки.Обороты(&Нач, &Кон, Регистратор, ) КАК ЗонаОтгрузкиОбороты
	|ГДЕ
	|	ЗонаОтгрузкиОбороты.КоличествоКоробокПриход > 0
	|	И ЗонаОтгрузкиОбороты.Регистратор.Направление.Код <> ""100""";
	
	Если ДеньНедели(ТекущаяДата())=1 тогда
		ВВ=2*(24*60*60);
	Иначе
		ВВ=(24*60*60);
	КонецЕсли;	
	
	//ВВ = 4*(24*60*60);
	
	Запрос.УстановитьПараметр("Нач",ДатаОстатков-ВВ);	
	Запрос.УстановитьПараметр("Кон",ТекущаяДата());	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТК=Новый ТекстовыйДокумент;
	
	ТК.ДобавитьСтроку("UNISTRING;NUMBER_DOC;FROM_ID;TO_ID;DOC_DATE;"+
	"SUMMA;MASSA;OBEM;COMMENTS;QTY;DOCS_TYPE;INTERM_ID;"+
	"KOL_VO_PALLET;GRUZ_TYPE_ID;DELETED;TIME1;TIME2;AVAILABILITY_TIME;VARIABLE6");
	
	СтрокаСообщенияВыгруженныхИД = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокБЯС=ВыборкаДетальныеЗаписи.Ссылка;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер КАК Номер,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДатаДокумента КАК Дата,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Количество,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Сумма,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.КолПозиций,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель.Код КАК КонтрагентКод,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Организация,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Объем,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Вес,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.СписокМестХранений,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Направление  как  Направление
		|ИЗ
		|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		|ГДЕ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка = &Ссылка
		|	И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Направление.Код <> ""100"""	;
		
		Запрос.УстановитьПараметр("Ссылка",ДокБЯС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//------- TO_ID --------//
			
			ТекКодКонтрагента = Выборка.КонтрагентКод;
			ТО_ИД = ТекКодКонтрагента;
			
			найтиПризнакОКСИМЕД=Найти(Выборка.Номер,"*");
			//Если найтиПризнакОКСИМЕД>0 Тогда
			//	Т="О";
			//Иначе
			//	
			//КонецЕсли;
			
			//Сообщить(Выборка.КонтрагентКод);
			СтрокаСообщенияВыгруженныхИД = СтрокаСообщенияВыгруженныхИД + Символы.ПС + ТекКодКонтрагента;
						
			Если  Лев(ТекКодКонтрагента,1) = "Н" Тогда 
				ТО_ИД= Выборка.Направление.КодДляКлиента + "N"+ Сред(ТекКодКонтрагента, 4);
			Иначе
				ТО_ИД= Выборка.Направление.КодДляКлиента + Лев(ТекКодКонтрагента,1)+ Сред(ТекКодКонтрагента,4);
			КонецЕсли;	
			
			//Сообщить(ТО_ИД);
			СтрокаСообщенияВыгруженныхИД = СтрокаСообщенияВыгруженныхИД + Символы.ПС + ТО_ИД;
						
			//найтиПризнакПРОЕКТ1000=Найти(Выборка.СчетФ,"*");
			//Если найтиПризнакПРОЕКТ1000>0 Тогда
			//	ТО_ИД="ПрТ"+Сред(Выборка.КонтрагентКод,9);
			//КонецЕсли;
			
			СФ=Выборка.СчетФ;
			
			Если Лев(Выборка.Номер,1)="Z"  тогда
				YY="Z" + Прав(Выборка.Номер,9);
				//Если СтрДлина(Выборка.СчетФ )>3 тогда
				//	СФ=Выборка.СчетФ;
				//	//СФ=Лев(Выборка.СчетФ,СтрДлина(Выборка.СчетФ)-4) + Прав(Выборка.СчетФ,3);
				//Иначе
				//	СФ=Выборка.СчетФ;
				//КонецЕсли;
			Иначе
				//СФ=Выборка.СчетФ;
				YY= Выборка.Номер;
			КонецЕсли;
			
			
			Стр=""+// Строка(ДокБЯС) +
			"'"+УбратьНенужныеСимволы(YY) +"';"+	//UNISTRING
			"'"+УбратьНенужныеСимволы(СФ) +"';"+	//NUMBER_DOC
			"'"+УбратьНенужныеСимволы(Выборка.Направление.КодДляКлиента) +"';"+//FROM_ID
			"'"+УбратьНенужныеСимволы(ТО_ИД) +"';"+	//TO_ID
			"'"+Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") +"';"+	//DOC_DATE   Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=dd.MM.yyyy")
			""+Формат(Выборка.Сумма,"ЧДЦ=2; ЧГ=0") +";"+//SUMMA
			""+Формат(Выборка.Вес*1000,"ЧДЦ=3; ЧГ=0") +";"+//MASSA
			""+Формат(Выборка.Объем,"ЧДЦ=5; ЧГ=0") +";"+//OBEM
			"'"+УбратьНенужныеСимволы(Выборка.Комментарий) +"';"+	//COMMENTS
			""+Формат(Выборка.Количество,"ЧДЦ=0; ЧГ=0") +";"+//QTY
			"1;"+//DOCS_TYPE
			"0;"+//INTERM_ID
			"0;"+//KOL_VO_PALLET
			"0;"+//GRUZ_TYPE_ID
			"0;"+//DELETED
			"'';"+//TIME1
			"'';"+//TIME2
			";"+//AVAILABILITY_TIME
			"'"+ УбратьНенужныеСимволы(Выборка.СписокМестХранений) +"';";//VARIABLE6
			
			ТК.ДобавитьСтроку(Стр);
			
		КонецЦикла; // По СчетФ
		
	КонецЦикла; // По БЯС
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьСчетФактурОБЛ,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьСчетФактурОБЛ,СетевойПутьСчетФактурОБЛ);
	
	//--------------------------------------------------------//
	//------------------------ CARS.CSV ----------------------//
	ТК.Очистить();
	//ТК.ДобавитьСтроку("UNISTRING;NAME;NNUMBER;MAXWEIGHT;"+
	//"MAXVOLUME;MAXPALLETE;CARUSED;GAS_ID;EXPENGAS0;EXPENGAS1;EXPENGAS01;EXPENGAS11;"+
	//"TRUCK_PAS;GRUZTYP_ID;START_WORK;FINISH_WORK;SPEED;SPEEDOUT;NAEMNIY;VODITEL_ID;"+
	//"EXPEDITOR_ID;ENTERPRISE_ID;TARIFH;USED_TARIF_KM0;TARIF_KM0;USED_TARIF_KM1;"+
	//"TARIF_KM1;DISPATCH_CENTER_ID;");
	
	ТК.ДобавитьСтроку("UNISTRING;NAME;NNUMBER;CARUSED;"+
	"TRUCK_PAS;VODITEL_ID;DISPATCH_CENTER_ID;");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Автомобили.Код,
	|	Автомобили.Наименование,
	|	Автомобили.ГосударственныйНомер,
	|	Автомобили.МаркаАвтомобиля,
	|	ФизическиеЛица.Код КАК ВодительКОд,
	|	ФизическиеЛица.Наименование КАК Водитель,
	|	ФизическиеЛица.Направление,
	|	ФизическиеЛица.Направление.IDMAPX как ДИСП
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Автомобиль = Автомобили.Ссылка)";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ПустаяССылка_Направление = Справочники.Направление.ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДИСП=ВыборкаДетальныеЗаписи.ДИСП;
		
		Если ВыборкаДетальныеЗаписи.Направление = ПустаяССылка_Направление тогда
			ДИСП="1";
		КонецЕсли;	
		
		Стр=""+
		"'"+ВыборкаДетальныеЗаписи.Код +"';"+	//UNISTRING
		"'"+ВыборкаДетальныеЗаписи.МаркаАвтомобиля +"';"+	//NAME
		"'"+ВыборкаДетальныеЗаписи.ГосударственныйНомер +"';"+	//NNUMBER
		//";"+//MAXWEIGHT
		//";"+//MAXVOLUME
		//";"+//MAXPALLETE
		"1;"+//CARUSED
		//";"+//GAS_ID
		//";"+//EXPENGAS0
		//";"+//EXPENGAS1
		//";"+//EXPENGAS01
		//";"+//EXPENGAS11
		"0;"+//TRUCK_PAS
		//";"+//GRUZTYP_ID
		//";"+//START_WORK
		//";"+//FINISH_WORK
		//";"+//SPEED
		//";"+//SPEEDOUT
		//";"+//NAEMNIY
		"'"+ВыборкаДетальныеЗаписи.ВодительКОд +"';"+//VODITEL_ID
		//";"+//EXPEDITOR_ID
		//";"+//ENTERPRISE_ID
		//";"+//TARIFH
		//";"+//USED_TARIF_KM0
		//";"+//TARIF_KM0
		//";"+//USED_TARIF_KM1
		//";"+//TARIF_KM1
		"'"+ДИСП +"';";//DISPATCH_CENTER_ID
		
		ТК.ДобавитьСтроку(Стр);
		
	КонецЦикла;
	
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьАвтомобилей,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьАвтомобилей,СетевойПутьАвтомобилей);
	
	//-------------------------------------------------------------//
	//---------------------- PEOPLE.CSV ---------------------------//
	//-------------------------------------------------------------//
	
	ТК.Очистить();
	ТК.ДобавитьСтроку("UNISTRING;NAME;PROF_ID;USE;PHONE;SMS_MESSAGE_TYPE_ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Код,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.Должность,
	|	ФизическиеЛица.Автомобиль
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Должность = &Должность";
	
	Запрос.УстановитьПараметр("Должность", Справочники.Должности.Водитель);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр=""+
		"'"+(ВыборкаДетальныеЗаписи.Код) + "';" +	//UNISTRING
		"'"+ВыборкаДетальныеЗаписи.Наименование + "';" +//NAME
		"2;"+			//PROF_ID
		"1;"+			//USE
		"'';"+			//PHONE
		"0;";			//SMS_MESSAGE_TYPE_ID
		
		ТК.ДобавитьСтроку(Стр);
	КонецЦикла;
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьВодителей,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьВодителей,СетевойПутьВодителей);
	
	Если ЗначениеЗаполнено(СтрокаСообщенияВыгруженныхИД) Тогда
		Сообщить(СтрокаСообщенияВыгруженныхИД);
	КонецЕсли;
	
	
	// Тестовая выгрузка версии 2, с участием контрагентов и адресов доставки.
	ВыгрузкаСчетФактурВФайлTEST(ДатаОстатковВЗонеОтгрузки);
	
КонецПроцедуры

Функция УбратьНенужныеСимволы(Знач ИсходнаяСтрока, СтрокаНеНужныхСимволов = """,;`'")
	
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Результат      = "";
	
	Для Сч = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		
		ТекСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если Найти(СтрокаНеНужныхСимволов, ТекСимвол)=0  Тогда
			Результат = Результат + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыгрузкаСчетФактурВФайлTEST(ДатаОстатковВЗонеОтгрузки = Неопределено) Экспорт
	
	Перем ТО_ИД;
	
	Кодировка           = КодировкаТекста.Системная;	
	ЛокальныйКаталог    = "C:\FilesSendedToMapx_Test\";
	СетевойКаталог      = "\\192.168.95.185\import\ForTestMapeks\";
	ЛокальныйКаталогОБЛ = "C:\FilesSendedToMapx_Test\";
	СетевойКаталогОБЛ   = "\\192.168.95.185\import\regions\ForTestMapeks\";
	
	ДД = ТекущаяДата();
	Строкой_ДеньМесяцЧасМинута = "_"+Строка(День(ДД))+"_"+Строка(Месяц(ДД))+"_"+Строка(Час(ДД))+"_"+Строка(Минута(ДД)); 
	
	ИмяФайлаСчетФактур      = "docs.csv";
	ИмяФайлаАвтомобилей     = "cars.csv";
	ИмяФайлаВодителей       = "people.csv";
	ИмяФайлаКлиентов        = "firms.csv";//
	ИмяФайлаКлиентовGPS     = "firms_gps.csv";//
	
	ИмяФайлаСчетФактурОБЛ   = "docs_regions.csv";
	ИмяФайлаАвтомобилейОБЛ  = "cars_regions.csv";
	ИмяФайлаВодителейОБЛ    = "people_regions.csv";
	ИмяФайлаКлиентовОБЛ     = "firms_regions.csv";//
	ИмяФайлаКлиентовОБЛGPS  = "firms_gps_regions.csv";//
	
	ИмяФайлаСчетФактурЛ     = "docs" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаАвтомобилейЛ    = "cars" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаВодителейЛ      = "people" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаКлиентовЛ       = "firms" + Строкой_ДеньМесяцЧасМинута + ".csv";//
	ИмяФайлаКлиентовЛGPS    = "firms_gps" + Строкой_ДеньМесяцЧасМинута + ".csv";//
	
	ИмяФайлаСчетФактурОБЛЛ  = "docs_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаАвтомобилейОБЛЛ = "cars_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаВодителейОБЛЛ   = "people_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ИмяФайлаКлиентовОБЛ_Л   = "firms_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";//
	ИмяФайлаКлиентовОБЛ_ЛGPS= "firms_gps_regions" + Строкой_ДеньМесяцЧасМинута + ".csv";//
	//ИмяФайлаСчетФактур=Константы.ИмяФайлаВыгрузки_DOCS.Получить();
	//ИмяФайлаАвтомобилей=Константы.ИмяФайлаВыгрузки_CARS.Получить();
	//ИмяФайлаВодителей=Константы.ИмяФайлаВыгрузки_PEOPLE.Получить();
	
	// Переменные в которых хранится полные пути сохранения фала для каждого объекта сохранения.
	ЛокальныйПутьСчетФактур    = ЛокальныйКаталог + ИмяФайлаСчетФактурЛ;
	СетевойПутьСчетФактур      = СетевойКаталог + ИмяФайлаСчетФактур;
	ЛокальныйПутьСчетФактурОБЛ = ЛокальныйКаталогОБЛ + ИмяФайлаСчетФактурОБЛЛ;
	СетевойПутьСчетФактурОБЛ   = СетевойКаталогОБЛ + ИмяФайлаСчетФактурОБЛ;
	ЛокальныйПутьАвтомобилей   = ЛокальныйКаталог + ИмяФайлаАвтомобилейЛ;
	СетевойПутьАвтомобилей     = СетевойКаталог + ИмяФайлаАвтомобилей;
	ЛокальныйПутьВодителей     = ЛокальныйКаталог + ИмяФайлаВодителейЛ;
	СетевойПутьВодителей       = СетевойКаталог + ИмяФайлаВодителей;
	//
	ЛокальныйПутьКлиентов      = ЛокальныйКаталог + ИмяФайлаКлиентовЛ;
	СетевойПутьКлиентов        = СетевойКаталог + ИмяФайлаКлиентов;
	
	ЛокальныйПутьКлиентовGPS   = ЛокальныйКаталог + ИмяФайлаКлиентовЛGPS;
	СетевойПутьКлиентовGPS     = СетевойКаталог + ИмяФайлаКлиентовGPS;
	
	ЛокальныйПутьКлиентовОБЛ   = ЛокальныйКаталогОБЛ + ИмяФайлаКлиентовОБЛ_Л;
	СетевойПутьКлиентовОБЛ     = СетевойКаталогОБЛ + ИмяФайлаКлиентовОБЛ;
	
	// для теста v2
	ИмяФайлаКлиентовОБЛ_v2      = "firms_regions_v2.csv";
	ИмяФайлаКлиентовОБЛ_Л_v2    = "firms_regions_v2" + Строкой_ДеньМесяцЧасМинута + ".csv";
	ЛокальныйПутьКлиентовОБЛ_v2 = ЛокальныйКаталогОБЛ + ИмяФайлаКлиентовОБЛ_Л_v2;
	СетевойПутьКлиентовОБЛ_v2   = СетевойКаталогОБЛ + ИмяФайлаКлиентовОБЛ_v2;
	// 
	
	ЛокальныйПутьКлиентовОБЛGPS= ЛокальныйКаталогОБЛ + ИмяФайлаКлиентовОБЛ_ЛGPS;
	СетевойПутьКлиентовОБЛGPS  = СетевойКаталогОБЛ + ИмяФайлаКлиентовОБЛGPS;
	
	// для формирования файла firms.
	МассивКлиентов_firms         = Новый Массив();
	МассивКлиентов_firms_regions = Новый Массив();
	// Для теста
	ТЗ_firms_gerions = Новый ТаблицаЗначений();
	ТЗ_firms_gerions.Колонки.Добавить("Клиент");
	ТЗ_firms_gerions.Колонки.Добавить("Контрагент");
	ТЗ_firms_gerions.Колонки.Добавить("ID");
	
	//----------------------------------------------------------//	
	//------------------ВЫГРУЗКА СЧЕТ ФАКТУР -------------------//	
	//----------------------------------------------------------//
	
	ОдинЧас = 3600;
	ДатаОстатков = НачалоДня(ДД) + 7 * ОдинЧас;
	ДатаОстатковВЗонеОтгрузки = ?(ДатаОстатковВЗонеОтгрузки = Неопределено, ДатаОстатков, ДатаОстатковВЗонеОтгрузки);
	
	//-------------------- Список Счет-Фактур В Зоне Отгрузки -------//
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗонаОтгрузкиОстатки.ДокументПрихода КАК Ссылка,
	|	СУММА(ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток) КАК КоличествоКоробокОстаток
	|ИЗ
	|	РегистрНакопления.ЗонаОтгрузки.Остатки(&Период, ДокументПрихода.Самовывоз = ЛОЖЬ) КАК ЗонаОтгрузкиОстатки
	|ГДЕ
	|	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток > 0
	|	И ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗонаОтгрузкиОстатки.ДокументПрихода";
	
	Запрос.УстановитьПараметр("Период", ДатаОстатковВЗонеОтгрузки);	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТК = Новый ТекстовыйДокумент;
	
	ТК.ДобавитьСтроку("UNISTRING;NUMBER_DOC;FROM_ID;TO_ID;DOC_DATE;"+
	"SUMMA;MASSA;OBEM;COMMENTS;QTY;DOCS_TYPE;INTERM_ID;"+
	"KOL_VO_PALLET;GRUZ_TYPE_ID;DELETED;TIME1;TIME2;AVAILABILITY_TIME;VARIABLE6");

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокБЯС=ВыборкаДетальныеЗаписи.Ссылка;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер КАК Номер,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.ДатаДокумента КАК Дата,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Количество,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Сумма,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.КолПозиций,
		|   БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель КАК Контрагент,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель.Код КАК КонтрагентКод,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Организация,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Объем,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Вес,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.СписокМестХранений,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Коробки КАК Коробки,
		|	БольшаяЯчеистаяСборкаДокументыРасхода.АдресДоставки
		|ИЗ
		|	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		|ГДЕ
		|	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДокБЯС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//------- TO_ID --------//
			
			ТекНомерДокумента = Выборка.Номер;
			ТекПолучатель     = Выборка.Контрагент;
			Если Выборка.АдресДоставки.Пустая() Тогда
				
				ТО_ИД=Выборка.КонтрагентКод;
				
				найтиПризнакОКСИМЕД=Найти(ТекНомерДокумента,"*");
				Если найтиПризнакОКСИМЕД>0 или Лев(ТекНомерДокумента,3)="МТС" Тогда
					ТО_ИД="ОКСИ"+Сред(Выборка.КонтрагентКод,4);
				КонецЕсли;
				
			Иначе
				
				ТекПолучатель = Выборка.АдресДоставки;
				
				ТО_ИД = СокрЛП(Выборка.АдресДоставки.Код);
				
			КонецЕсли;
			
			Если Лев(ТекНомерДокумента,1)="Z"  тогда
				YY="Z" + Прав(ТекНомерДокумента,9);
			Иначе
				YY = ТекНомерДокумента;
			КонецЕсли;
			
			Стр = "" +                         // Строка(ДокБЯС) +
			"'" + УбратьНенужныеСимволы(YY) + "';" +             // UNISTRING
			"'" + УбратьНенужныеСимволы(Выборка.СчетФ) + "';" +	 // NUMBER_DOC
			"'" + УбратьНенужныеСимволы(Выборка.Организация) + "';" + // FROM_ID
			"'" + УбратьНенужныеСимволы(ТО_ИД) + "';" +          // TO_ID
			"'" + Формат(ДД,"ДФ=dd.MM.yyyy") + "';" +            // DOC_DATE 
			""  + Формат(Выборка.Сумма,"ЧДЦ=2; ЧГ=0") + ";"+     // SUMMA
			""  + Формат(Выборка.Вес*1000,"ЧДЦ=3; ЧГ=0") + ";" + // MASSA
			""  + Формат(Выборка.Объем,"ЧДЦ=5; ЧГ=0") + ";" +    // OBEM
			"'" + УбратьНенужныеСимволы(Выборка.Комментарий) + "';" + //COMMENTS
			""  + Формат(Выборка.Коробки,"ЧДЦ=0; ЧГ=0") + ";" +  // QTY
			"1;"+ // DOCS_TYPE
			"0;" + // INTERM_ID
			"0;" + // KOL_VO_PALLET
			"0;" + // GRUZ_TYPE_ID
			"0;" + // DELETED
			"'';" + // TIME1
			"'';" + // TIME2
			";" + // AVAILABILITY_TIME
			"'" + УбратьНенужныеСимволы(Выборка.СписокМестХранений) + "';" ; // VARIABLE6
			
			Если МассивКлиентов_firms.Найти(ТекПолучатель) = Неопределено Тогда
				МассивКлиентов_firms.Добавить(ТекПолучатель);
			КонецЕсли;
			
			ТК.ДобавитьСтроку(Стр);
			
		КонецЦикла; // По СчетФ
		
	КонецЦикла; // По БЯС
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьСчетФактур,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьСчетФактур,СетевойПутьСчетФактур);
	
	//-------------------- Список Счет-Фактур В область-------//
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗонаОтгрузкиОбороты.ДокументПрихода КАК Ссылка
	|ИЗ
	|	РегистрНакопления.ЗонаОтгрузки.Обороты(&Нач, &Кон, Регистратор, ) КАК ЗонаОтгрузкиОбороты
	|ГДЕ
	|	ЗонаОтгрузкиОбороты.КоличествоКоробокПриход > 0
	|	И ЗонаОтгрузкиОбороты.Регистратор.Направление.Код <> ""100""";
	
	Если ДеньНедели(ТекущаяДата())=1 тогда
		ВВ=2*(24*60*60);
	Иначе
		ВВ=(24*60*60);
	КонецЕсли;	

	//ВВ = 4*(24*60*60);
	
	Запрос.УстановитьПараметр("Нач",ДатаОстатков-ВВ);	
	Запрос.УстановитьПараметр("Кон",ТекущаяДата());	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТК=Новый ТекстовыйДокумент;
	
	ТК.ДобавитьСтроку("UNISTRING;NUMBER_DOC;FROM_ID;TO_ID;DOC_DATE;"+
	"SUMMA;MASSA;OBEM;COMMENTS;QTY;DOCS_TYPE;INTERM_ID;"+
	"KOL_VO_PALLET;GRUZ_TYPE_ID;DELETED;TIME1;TIME2;AVAILABILITY_TIME;VARIABLE6");
	
	СтрокаСообщенияВыгруженныхИД = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДокБЯС=ВыборкаДетальныеЗаписи.Ссылка;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.СчетФ,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.ДокНомер КАК Номер,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Комментарий,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.ДатаДокумента КАК Дата,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Количество,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Сумма,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.КолПозиций,
					   |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель КАК Контрагент,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Получатель.Код КАК КонтрагентКод,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Организация,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Объем,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Вес,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.СписокМестХранений,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Направление КАК Направление,
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.АдресДоставки
		               |ИЗ
		               |	Документ.БольшаяЯчеистаяСборка.ДокументыРасхода КАК БольшаяЯчеистаяСборкаДокументыРасхода
		               |ГДЕ
		               |	БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка = &Ссылка
		               |	И БольшаяЯчеистаяСборкаДокументыРасхода.Ссылка.Направление.Код <> ""100"""	;
		
		Запрос.УстановитьПараметр("Ссылка",ДокБЯС);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			//------- TO_ID --------//
			
			ТекПолучатель = Выборка.Контрагент;
			Если Выборка.АдресДоставки.Пустая() Тогда
				
				ТекКодКонтрагента = Выборка.КонтрагентКод;
				ТО_ИД = ТекКодКонтрагента;
				
				найтиПризнакОКСИМЕД=Найти(Выборка.Номер,"*");
				СтрокаСообщенияВыгруженныхИД = СтрокаСообщенияВыгруженныхИД + Символы.ПС + ТекКодКонтрагента;
				
				Если  Лев(ТекКодКонтрагента,1) = "Н" Тогда 
					ТО_ИД= Выборка.Направление.КодДляКлиента + "N"+ Сред(ТекКодКонтрагента, 4);
				Иначе
					ТО_ИД= Выборка.Направление.КодДляКлиента + Лев(ТекКодКонтрагента,1)+ Сред(ТекКодКонтрагента,4);
				КонецЕсли;
				
			Иначе
				
				ТекПолучатель = Выборка.АдресДоставки;
				
				ТО_ИД = СокрЛП(Выборка.АдресДоставки.Код);
				
			КонецЕсли;
		
			Если Лев(Выборка.Номер,1)="Z"  тогда
				YY="Z" + Прав(Выборка.Номер,9);
			Иначе
				YY= Выборка.Номер;
			КонецЕсли;
			
			Стр = "" +                   // Строка(ДокБЯС)
			"'" + УбратьНенужныеСимволы(YY) + "';" +               // UNISTRING
			"'" + УбратьНенужныеСимволы(Выборка.СчетФ) + "';" +    // NUMBER_DOC
			"'" + УбратьНенужныеСимволы(Выборка.Направление.КодДляКлиента ) + "';" + //FROM_ID
			"'" + УбратьНенужныеСимволы(ТО_ИД) + "';" +            // TO_ID
			"'" + Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") + "';" +   // DOC_DATE
			""  + Формат(Выборка.Сумма,"ЧДЦ=2; ЧГ=0") + ";" +      // SUMMA
			""  + Формат(Выборка.Вес*1000,"ЧДЦ=3; ЧГ=0") + ";" +   //MASSA
			""  + Формат(Выборка.Объем,"ЧДЦ=5; ЧГ=0") + ";" +      // OBEM
			"'" + УбратьНенужныеСимволы(Выборка.Комментарий) + "';" + // COMMENTS
			""  + Формат(Выборка.Количество,"ЧДЦ=0; ЧГ=0") + ";" + // QTY
			"1;"+ // DOCS_TYPE
			"0;" + // INTERM_ID
			"0;" + // KOL_VO_PALLET
			"0;" + // GRUZ_TYPE_ID
			"0;" + // DELETED
			"'';" + // TIME1
			"'';" + // TIME2
			";" + // AVAILABILITY_TIME
			"'" + УбратьНенужныеСимволы(Выборка.СписокМестХранений) + "';"; // VARIABLE6
			
			ТК.ДобавитьСтроку(Стр);
			
			
			НС_frims = ТЗ_firms_gerions.Добавить();
			НС_frims.Клиент     = ТекПолучатель;
			НС_frims.Контрагент = Выборка.Контрагент;
			НС_frims.ID         = ТО_ИД;
			
			Если МассивКлиентов_firms_regions.Найти(ТекПолучатель) = Неопределено Тогда
				МассивКлиентов_firms_regions.Добавить(ТекПолучатель);
			КонецЕсли;
			
			
		КонецЦикла; // По СчетФ
		
	КонецЦикла; // По БЯС
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьСчетФактурОБЛ,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьСчетФактурОБЛ,СетевойПутьСчетФактурОБЛ);
	
	//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> КЛИЕНТЫ >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	
	//--------------------------------------------------------//
	//------------ Формируем файл firms ----------------------//
	
	ТК = Новый ТекстовыйДокумент;
	ТК.ДобавитьСтроку("UNISTRING;FULLNAME;NAME;ADRESS;COMMENTS;CLIENTS_TYPE_ID;DISPATCH_CENTER_ID;");
	
	ТК_gps = Новый ТекстовыйДокумент;
	ТК_gps.ДобавитьСтроку("UNISTRING;FULLNAME;NAME;ADRESS;GPS_X;GPS_Y;COMMENTS;CLIENTS_TYPE_ID;DISPATCH_CENTER_ID;");
	
	Для Каждого ЭлСтроки Из МассивКлиентов_firms Цикл

		NAME = СтрЗаменить(СокрЛ(ЭлСтроки.Наименование), "'", "");
		
		Если ТипЗнч(ЭлСтроки) = Тип("СправочникСсылка.АдресаДоставки") Тогда
			
//			ТекКонтрагент = ЭлСтроки.Контрагент;
			
			Стр = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" +          // UNISTRING
			"'" + NAME + "';" + // FULLNAME
			"'" + NAME + "';" + // NAME
			"'';" + // ADRESS
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
			
			// С GPS координатами
			Стр_gps = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + NAME + "';" +                // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'';" + // ADRESS
			""  + СокрЛ(ЭлСтроки.GPSX) + ";" + // GPS_X
			""  + СокрЛ(ЭлСтроки.GPSY) + ";" + // GPS_Y
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
		Иначе
			
			FULLNAME = СтрЗаменить(СокрЛ(ЭлСтроки.ПолноеНаименование),"'","");
			ADRESS   = СтрЗаменить(СокрЛ(ЭлСтроки.АдресНаКарте), "'", "");
			
			Стр = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + FULLNAME + "';" +            // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'" + ADRESS + "';" +              // ADRESS
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
			
			// С GPS координатами
			Стр_gps = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + FULLNAME + "';" +            // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'" + ADRESS + "';" +              // ADRESS
			""  + СокрЛ(ЭлСтроки.КорX) + ";" + // GPS_X
			""  + СокрЛ(ЭлСтроки.КорY) + ";" + // GPS_Y
			"'';" + // COMMENTS
			ЭлСтроки.Mapx_CLIENTS_TYPE_ID + ";" + // CLIENTS_TYPE_ID
			ЭлСтроки.Mapx_DISPATCH_CENTER_ID + ";";  // DISPATCH_CENTER_ID
			
		КонецЕсли;
		
		ТК.ДобавитьСтроку(Стр);
		ТК_gps.ДобавитьСтроку(Стр_gps);
		
	КонецЦикла;
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьКлиентов, Кодировка);
	ТК_gps.Записать(ЛокальныйПутьКлиентовGPS, Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьКлиентов, СетевойПутьКлиентов);
	КопироватьФайл(ЛокальныйПутьКлиентовGPS, СетевойПутьКлиентовGPS);

	
	//----------------------------------------------------------------//
	//------------ Формируем файл firms_regions ----------------------//
	
	ТК = Новый ТекстовыйДокумент;
	ТК.ДобавитьСтроку("UNISTRING;FULLNAME;NAME;ADRESS;COMMENTS;CLIENTS_TYPE_ID;DISPATCH_CENTER_ID;");
	
	ТК_gps = Новый ТекстовыйДокумент;
	ТК_gps.ДобавитьСтроку("UNISTRING;FULLNAME;NAME;ADRESS;GPS_X;GPS_Y;COMMENTS;CLIENTS_TYPE_ID;DISPATCH_CENTER_ID;");
	
	Для Каждого ЭлСтроки Из МассивКлиентов_firms_regions Цикл

		NAME = СтрЗаменить(СокрЛ(ЭлСтроки.Наименование), "'", "");
		
		Если ТипЗнч(ЭлСтроки) = Тип("СправочникСсылка.АдресаДоставки") Тогда
			
			Стр = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" +          // UNISTRING
			"'" + NAME + "';" + // FULLNAME
			"'" + NAME + "';" + // NAME
			"'';" + // ADRESS
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
			
			// С GPS координатами
			Стр_gps = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + NAME + "';" +                // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'';" + // ADRESS
			""  + СокрЛ(ЭлСтроки.GPSX) + ";" + // GPS_X
			""  + СокрЛ(ЭлСтроки.GPSY) + ";" + // GPS_Y
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
		Иначе
			
			FULLNAME = СтрЗаменить(СокрЛ(ЭлСтроки.ПолноеНаименование),"'","");
			ADRESS   = СтрЗаменить(СокрЛ(ЭлСтроки.АдресНаКарте), "'", "");
			
			Стр = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + FULLNAME + "';" +            // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'" + ADRESS + "';" +              // ADRESS
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
			
			// С GPS координатами
			Стр_gps = "" +
			"'" + СокрЛ(ЭлСтроки.Код) + "';" + // UNISTRING
			"'" + FULLNAME + "';" +            // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'" + ADRESS + "';" +              // ADRESS
			""  + СокрЛ(ЭлСтроки.КорX) + ";" + // GPS_X
			""  + СокрЛ(ЭлСтроки.КорY) + ";" + // GPS_Y
			"'';" + // COMMENTS
			"0;" + // CLIENTS_TYPE_ID
			"0;";  // DISPATCH_CENTER_ID
			
		КонецЕсли;
		
		ТК.ДобавитьСтроку(Стр);
		ТК_gps.ДобавитьСтроку(Стр_gps);
		
	КонецЦикла;
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьКлиентовОБЛ, Кодировка);
	ТК_gps.Записать(ЛокальныйПутьКлиентовОБЛGPS, Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьКлиентовОБЛ, СетевойПутьКлиентовОБЛ);
	КопироватьФайл(ЛокальныйПутьКлиентовОБЛGPS, СетевойПутьКлиентовОБЛGPS);
	
	
	// ТЕСТОВОЕ ФОМРИРОВАНИЕ ФАЙЛА FIRMS_REGIONS
	
	ТК_firms_test = Новый ТекстовыйДокумент;
	ТК_firms_test.ДобавитьСтроку("UNISTRING;FULLNAME;NAME;ADRESS;COMMENTS;CLIENTS_TYPE_ID;DISPATCH_CENTER_ID;");
	
	// ТЗ_firms_gerions: Клиент, Контрагент, ID.
	Для Каждого СтрКлиента Из ТЗ_firms_gerions Цикл
		
		ТекКлиент = СтрКлиента.Клиент;
		NAME      = СтрЗаменить(СокрЛ(ТекКлиент.Наименование), "'", "");
		
		Если ТипЗнч(ТекКлиент) = Тип("СправочникСсылка.АдресаДоставки") Тогда
			
			ТекКонтрагент = СтрКлиента.Контрагент;
			
			Стр = "" +
			"'" + СокрЛ(СтрКлиента.ID) + "';" +          // UNISTRING
			"'" + СтрЗаменить(СокрЛ(ТекКонтрагент.ПолноеНаименование),"'","") + "';" + // FULLNAME
			"'" + NAME + "';" + // NAME
			"'" + СтрЗаменить(СокрЛ(ТекКонтрагент.АдресНаКарте), "'", "") + "';" +     // ADRESS
			"'';" + // COMMENTS
			?(ТекКонтрагент.Mapx_CLIENTS_TYPE_ID = 0, 1, ТекКонтрагент.Mapx_CLIENTS_TYPE_ID) + ";" + // CLIENTS_TYPE_ID
			?(ТекКонтрагент.Mapx_DISPATCH_CENTER_ID = 0, 1, ТекКонтрагент.Mapx_DISPATCH_CENTER_ID) + ";";  // DISPATCH_CENTER_ID
			
			
		Иначе
			
			Стр = "" +
			"'" + СокрЛ(СтрКлиента.ID) + "';" + // UNISTRING
			"'" + СтрЗаменить(СокрЛ(ТекКлиент.ПолноеНаименование),"'","") + "';" + // FULLNAME
			"'" + NAME + "';" +                // NAME
			"'" + СтрЗаменить(СокрЛ(ТекКлиент.АдресНаКарте), "'", "") + "';" +     // ADRESS
			"'';" + // COMMENTS
			?(ТекКлиент.Mapx_CLIENTS_TYPE_ID = 0, 1, ТекКлиент.Mapx_CLIENTS_TYPE_ID) + ";" + // CLIENTS_TYPE_ID
			?(ТекКлиент.Mapx_DISPATCH_CENTER_ID = 0, 1, ТекКлиент.Mapx_DISPATCH_CENTER_ID) + ";";  // DISPATCH_CENTER_ID
			
			
		КонецЕсли;
		
		ТК_firms_test.ДобавитьСтроку(Стр);
				
	КонецЦикла;
	
	ТК_firms_test.Записать(ЛокальныйПутьКлиентовОБЛ_v2, Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьКлиентовОБЛ_v2, СетевойПутьКлиентовОБЛ_v2);

	
	/////////////////////////////////////////

	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< КЛИЕНТЫ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	
	//--------------------------------------------------------//
	//------------------------ CARS.CSV ----------------------//
	ТК.Очистить();
	
	ТК.ДобавитьСтроку("UNISTRING;NAME;NNUMBER;CARUSED;TRUCK_PAS;VODITEL_ID;DISPATCH_CENTER_ID;");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Автомобили.Код,
	|	Автомобили.Наименование,
	|	Автомобили.ГосударственныйНомер,
	|	Автомобили.МаркаАвтомобиля,
	|	ФизическиеЛица.Код КАК ВодительКОд,
	|	ФизическиеЛица.Наименование КАК Водитель,
	|	ФизическиеЛица.Направление,
	|	ФизическиеЛица.Направление.IDMAPX как ДИСП
	|ИЗ
	|	Справочник.Автомобили КАК Автомобили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Автомобиль = Автомобили.Ссылка)";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ПустаяССылка_Направление = Справочники.Направление.ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДИСП=ВыборкаДетальныеЗаписи.ДИСП;
		
		Если ВыборкаДетальныеЗаписи.Направление = ПустаяССылка_Направление тогда
			ДИСП="1";
		КонецЕсли;	
		
		Стр=""+
		"'"+ВыборкаДетальныеЗаписи.Код +"';"+	//UNISTRING
		"'"+ВыборкаДетальныеЗаписи.МаркаАвтомобиля +"';"+	//NAME
		"'"+ВыборкаДетальныеЗаписи.ГосударственныйНомер +"';"+	//NNUMBER
		//";"+//MAXWEIGHT
		//";"+//MAXVOLUME
		//";"+//MAXPALLETE
		"1;"+//CARUSED
		//";"+//GAS_ID
		//";"+//EXPENGAS0
		//";"+//EXPENGAS1
		//";"+//EXPENGAS01
		//";"+//EXPENGAS11
		"0;"+//TRUCK_PAS
		//";"+//GRUZTYP_ID
		//";"+//START_WORK
		//";"+//FINISH_WORK
		//";"+//SPEED
		//";"+//SPEEDOUT
		//";"+//NAEMNIY
		"'"+ВыборкаДетальныеЗаписи.ВодительКОд +"';"+//VODITEL_ID
		//";"+//EXPEDITOR_ID
		//";"+//ENTERPRISE_ID
		//";"+//TARIFH
		//";"+//USED_TARIF_KM0
		//";"+//TARIF_KM0
		//";"+//USED_TARIF_KM1
		//";"+//TARIF_KM1
		"'"+ДИСП +"';";//DISPATCH_CENTER_ID
		
		ТК.ДобавитьСтроку(Стр);
		
	КонецЦикла;
	
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьАвтомобилей,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьАвтомобилей,СетевойПутьАвтомобилей);
	
	//-------------------------------------------------------------//
	//---------------------- PEOPLE.CSV ---------------------------//
	//-------------------------------------------------------------//
	
	ТК.Очистить();
	ТК.ДобавитьСтроку("UNISTRING;NAME;PROF_ID;USE;PHONE;SMS_MESSAGE_TYPE_ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Код,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.Должность,
	|	ФизическиеЛица.Автомобиль
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Должность = &Должность";
	
	Запрос.УстановитьПараметр("Должность", Справочники.Должности.Водитель);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Стр=""+
		"'"+(ВыборкаДетальныеЗаписи.Код) + "';" +	//UNISTRING
		"'"+ВыборкаДетальныеЗаписи.Наименование + "';" +//NAME
		"2;"+			//PROF_ID
		"1;"+			//USE
		"'';"+			//PHONE
		"0;";			//SMS_MESSAGE_TYPE_ID
		
		ТК.ДобавитьСтроку(Стр);
	КонецЦикла;
	
	//-------------------Записываем в Файл -----------------------//
	ТК.Записать(ЛокальныйПутьВодителей,Кодировка);
	//--Копируем в сетевой каталог
	КопироватьФайл(ЛокальныйПутьВодителей,СетевойПутьВодителей);
	
	Если ЗначениеЗаполнено(СтрокаСообщенияВыгруженныхИД) Тогда
		Сообщить(СтрокаСообщенияВыгруженныхИД);
	КонецЕсли;
	
КонецПроцедуры


Процедура КонтрольЗоныОтгрузки() 
	// Ищем товар в зоне отгрузки который лежит более 100 часов
	//-------------------------
	
	ПределХранения=60*60*100;// 100 часов
	ТЗнфс=Новый ТаблицаЗначений;
	ТЗнфс.Колонки.Добавить("Организация");
	ТЗнфс.Колонки.Добавить("Получатель");
	ТЗнфс.Колонки.Добавить("НомерМестаОтгрузки");
	ТЗнфс.Колонки.Добавить("КоличествоКоробокОстаток");
	
	ТЗасклепий=Новый ТаблицаЗначений;
	ТЗасклепий.Колонки.Добавить("Организация");
	ТЗасклепий.Колонки.Добавить("Получатель");
	ТЗасклепий.Колонки.Добавить("НомерМестаОтгрузки");
	ТЗасклепий.Колонки.Добавить("КоличествоКоробокОстаток");



	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки,
		|	ЗонаОтгрузкиОстатки.ДокументПрихода КАК докБЯС,
		|	ЗонаОтгрузкиОстатки.КоличествоКоробокОстаток
		|ИЗ
		|	РегистрНакопления.ЗонаОтгрузки.Остатки(, ) КАК ЗонаОтгрузкиОстатки
		|ГДЕ
		|	ЗонаОтгрузкиОстатки.НомерМестаОтгрузки.Палет = ЛОЖЬ";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если (ТекущаяДата()-ВыборкаДетальныеЗаписи.докБЯС.НачалоОтгрузки)>ПределХранения Тогда
			// заполняем ТЗ
			Если  ВыборкаДетальныеЗаписи.докБЯС.Организация="Асклепий" Тогда
				новаяСтр=ТЗасклепий.Добавить();
				новаяСтр.Организация="Асклепий";
				новаяСтр.Получатель= ВыборкаДетальныеЗаписи.докБЯС.Получатель;
				новаяСтр.КоличествоКоробокОстаток= ВыборкаДетальныеЗаписи.КоличествоКоробокОстаток;
				новаяСтр.НомерМестаОтгрузки= ВыборкаДетальныеЗаписи.НомерМестаОтгрузки;
  			ИначеЕсли ВыборкаДетальныеЗаписи.докБЯС.Организация="НФС"  Тогда	
				новаяСтр=ТЗнфс.Добавить();
				новаяСтр.Организация="НФС";
				новаяСтр.Получатель= ВыборкаДетальныеЗаписи.докБЯС.Получатель;
				новаяСтр.КоличествоКоробокОстаток= ВыборкаДетальныеЗаписи.КоличествоКоробокОстаток;
				новаяСтр.НомерМестаОтгрузки= ВыборкаДетальныеЗаписи.НомерМестаОтгрузки;
            КонецЕсли;
		КонецЕсли;	
		
	КонецЦикла;

	//---- формируем сообщения если не выходной
	Если ДеньНедели(ТекущаяДата())<>7 Тогда
		СтруктураСообщения=ФормироватьСтруктуруСообщения();
		//--------------Асклепий----------------
		Если ТЗасклепий.Количество()>0 Тогда
			СтруктураСообщения.Наименование="АСК - КОНТРОЛЬ ЗОНЫ ОТГРУЗКИ";
			СтруктураСообщения.Кому=Справочники.Пользователи.НайтиПоНаименованию("АСК");//
			СтруктураСообщения.КоличествоПовторов=1;
			СтруктураСообщения.Активность=Истина;
			СтруктураСообщения.ИнтервалОтправки=60;
			СтруктураСообщения.ИсточникСообщения="КОНТРОЛЬ ЗОНЫ ОТГРУЗКИ";
			СтруктураСообщения.ВидСообщения="Предупреждение";
			//Формируем текст Сообщения
			ТекстСообщения="В ЗОНЕ ОТГРУЗКЕ ЛЕЖИТ ТОВАР БОЛЕЕ 100 часов. НЕОБХОДИМО ПРОВЕСТИ КОНТРОЛЬ(СПИСАТЬ ИЛИ ПРОДЛИТЬ)!!!";
			Для Каждого стр из ТЗасклепий Цикл
				ТекстСообщения=ТекстСообщения + Символы.ПС +
				" Место - ["+ стр.НомерМестаОтгрузки + "] Получатель - ["+стр.Получатель + "] Кол - " +стр.КоличествоКоробокОстаток;
			КонецЦикла;
			
			СтруктураСообщения.ТекстСообщения=ТекстСообщения;
			СоздатьСообщениеПользователю(СтруктураСообщения);
		КонецЕсли;
		
		//--------------НФС---------------------
		Если ТЗнфс.Количество()>0 Тогда
			СтруктураСообщения.Наименование="НФС - КОНТРОЛЬ ЗОНЫ ОТГРУЗКИ";
			СтруктураСообщения.Кому=Справочники.Пользователи.НайтиПоНаименованию("НФС");//
			СтруктураСообщения.КоличествоПовторов=1;
			СтруктураСообщения.Активность=Истина;
			СтруктураСообщения.ИнтервалОтправки=60;
			СтруктураСообщения.ИсточникСообщения="КОНТРОЛЬ ЗОНЫ ОТГРУЗКИ";
			СтруктураСообщения.ВидСообщения="Предупреждение";
			//Формируем текст Сообщения
			ТекстСообщения="В ЗОНЕ ОТГРУЗКЕ ЛЕЖИТ ТОВАР БОЛЕЕ 100 часов. НЕОБХОДИМО ПРОВЕСТИ КОНТРОЛЬ(СПИСАТЬ ИЛИ ПРОДЛИТЬ)!!!";
			Для Каждого стр из ТЗнфс Цикл
				ТекстСообщения=ТекстСообщения + Символы.ПС +
				" Место - ["+ стр.НомерМестаОтгрузки + "] Получатель - ["+стр.Получатель + "] Кол - " +стр.КоличествоКоробокОстаток;
			КонецЦикла;
			
			СтруктураСообщения.ТекстСообщения=ТекстСообщения;
			СоздатьСообщениеПользователю(СтруктураСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	
	
КонецПроцедуры

Процедура ОчиститьЗаписиЖурналов() Экспорт
	// Удалить Записи старше КолДней дней
	КолДней=100;  //Хранить данные за КолДней
	ДВ=ТекущаяДата()-КолДней*(24*60*60);	
	//Сообщить(ДВ);
	
	// Очистить ЖурналИзмененийДокументов 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ЖурналИзмененийДокументов КАК ЖурналИзмененийДокументов
		|ГДЕ
		|	ЖурналИзмененийДокументов.ДВ >= &ДВ";

	Запрос.УстановитьПараметр("ДВ", ДВ);

	ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить(); 
    НаборЗаписей = РегистрыСведений.ЖурналИзмененийДокументов.СоздатьНаборЗаписей(); 
	НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей); 
	НаборЗаписей.Записать(); 
    НаборЗаписей.Очистить();
	
	
	
КонецПроцедуры


Процедура ТестовоеРегламентноеЗадание() Экспорт
	
	новоеСообщение=Справочники.СообщенияПользователям.СоздатьЭлемент();
	новоеСообщение.Наименование="ТестовоеРегламентноеЗадание";
	новоеСообщение.Кому=Справочники.Пользователи.НайтиПоНаименованию("KimL");
	новоеСообщение.КоличествоПовторов=1;
	новоеСообщение.Активность=Истина;
	новоеСообщение.ИнтервалОтправки=60;
	//новоеСообщение.ВидСообщения="Сообщение";
	новоеСообщение.ИсточникСообщения="ОТЛАДКА";
	новоеСообщение.ВидСообщения="Предупреждение";
	новоеСообщение.ТекстСообщения="ТЕСТОВОЕ РЕГЛАМЕНТНОЕ ЗАДАНИЕ-"+ТекущаяДата();
	новоеСообщение.Записать();
	
КонецПроцедуры

Процедура ТестовоеРегламентноеЗаданиеЭЛЕКТРОННАЯПОЧТА()
	 
	 элСПР=Справочники.РегламентныеЗадания.НайтиПоНаименованию("ТестовоеРегламентноеЗаданиеЭЛЕКТРОННАЯПОЧТА");
	 элПочта=СокрЛП(элСПР.ЭлектроннаяПочта);
	 ПочтовыйСервер=СокрЛП(элСПР.SMTPServer);
	 Если  элПочта="" ИЛИ  ПочтовыйСервер="" Тогда
		 //
		 Комментарий="Нет ДАННЫХ.";
		 ЗаписьЖурналаРегистрации("ОШИБКА-ОТПРАВКА ЭЛ-ПОЧТЫ", 
		 УровеньЖурналаРегистрации.Информация, , ,
		 Комментарий);
		 
		 Возврат;	 
	 КонецЕсли;
	 
	 //---------------ОТПРАВКА ПОЧТЫ--------------//
	  
	 
	 
КонецПроцедуры

Процедура СоздатьСообщениеПользователю(СтруктураСообщения)
	
	новоеСообщение=Справочники.СообщенияПользователям.СоздатьЭлемент();
	новоеСообщение.Наименование=СтруктураСообщения.Наименование;
	новоеСообщение.Кому=СтруктураСообщения.Кому;
	новоеСообщение.КоличествоПовторов=СтруктураСообщения.КоличествоПовторов;
	новоеСообщение.Активность=СтруктураСообщения.Активность;
	новоеСообщение.ИнтервалОтправки=СтруктураСообщения.ИнтервалОтправки;
	новоеСообщение.ВидСообщения=СтруктураСообщения.ВидСообщения;
	новоеСообщение.ИсточникСообщения=СтруктураСообщения.ИсточникСообщения;
	новоеСообщение.ТекстСообщения=СтруктураСообщения.ТекстСообщения;
	новоеСообщение.ДатаНачала=СтруктураСообщения.ДатаНачала;
	новоеСообщение.ДатаОкончания=СтруктураСообщения.ДатаОкончания;
	новоеСообщение.Записать();

КонецПроцедуры

Функция ФормироватьСтруктуруСообщения()
СтруктураСообщения=Новый Структура("Наименование,
							|Активность,
							 |ДатаНачала,
							 |ДатаОкончания,
							 |ДатаПоследнейОтправки,
							 |ИнтервалОтправки,
							 |ИсточникСообщения,
							 |КоличествоПовторов,
							 |КоличествоПосланныхСообщений,
							 |Кому,
							 |ТекстСообщения,
							 |Комментарий,
							 |СистемныйКомментарий,
							 |ВидСообщения,
							 |ЭлектроннаяПочта,
							 |SMTPServer");
Возврат СтруктураСообщения;							


КонецФункции
